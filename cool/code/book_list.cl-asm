                        
Article..vtable:        
                        constant string1
                        constant Article..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Book.initBook
                        constant Article.print
                        constant Article.initArticle
                        
Book..vtable:           
                        constant string2
                        constant Book..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Book.initBook
                        constant Book.print
                        
BookList..vtable:       
                        constant string3
                        constant BookList..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant BookList.isNil
                        constant BookList.cons
                        constant BookList.car
                        constant BookList.cdr
                        constant BookList.print_list
                        
Bool..vtable:           
                        constant string4
                        constant Bool..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Cons..vtable:           
                        constant string5
                        constant Cons..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Cons.isNil
                        constant BookList.cons
                        constant Cons.car
                        constant Cons.cdr
                        constant Cons.print_list
                        constant Cons.init
                        
IO..vtable:             
                        constant string6
                        constant IO..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        
Int..vtable:            
                        constant string7
                        constant Int..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Main..vtable:           
                        constant string8
                        constant Main..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant Main.main
                        
Nil..vtable:            
                        constant string9
                        constant Nil..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Nil.isNil
                        constant BookList.cons
                        constant BookList.car
                        constant BookList.cdr
                        constant Nil.print_list
                        
Object..vtable:         
                        constant string10
                        constant Object..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
String..vtable:         
                        constant string11
                        constant String..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant String.concat
                        constant String.length
                        constant String.substr
                        
Article..new:           
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 6
                        alloc r0 r0
                        
                        li r2 <- 10
                        st r0[0] <- r2
                        li r2 <- 6
                        st r0[1] <- r2
                        la r2 <- Article..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[5] <- r1
                        
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Book..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 5
                        alloc r0 r0
                        
                        li r2 <- 11
                        st r0[0] <- r2
                        li r2 <- 5
                        st r0[1] <- r2
                        la r2 <- Book..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
BookList..new:          
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 12
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- BookList..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Bool..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 0
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Bool..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Cons..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 5
                        alloc r0 r0
                        
                        li r2 <- 13
                        st r0[0] <- r2
                        li r2 <- 5
                        st r0[1] <- r2
                        la r2 <- Cons..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        li r1 <- 0
                        st r0[4] <- r1
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO..new:                
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 14
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- IO..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Int..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 1
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Int..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Main..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 15
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Main..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Nil..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 16
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Nil..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 17
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Object..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 3
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- String..vtable
                        st r0[2] <- r2
                        
                        
                        la r1 <- the.empty.string
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.abort:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        la r1 <- string12
                        syscall IO.out_string
                        syscall exit
Object.abort.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.copy:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        ld r2 <- r0[1]
                        alloc r1 r2
                        push r1
l1:                     bz r2 l2
                        ld r3 <- r0[0]
                        st r1[0] <- r3
                        li r3 <- 1
                        add r0 <- r0 r3
                        add r1 <- r1 r3
                        li r3 <- 1
                        sub r2 <- r2 r3
                        jmp l1
l2:                     
                        pop r1
Object.copy.end:        
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.type_name:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[0]
                        st r1[3] <- r2
Object.type_name.end:   
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_int:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_int
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_int.end:          
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_string:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_string
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_string.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.out_int:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_int
                        mov r1 <- r0
IO.out_int.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
IO.out_string:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_string
                        mov r1 <- r0
IO.out_string.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Book.initBook:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
Book.initBook.0:        
                        
                        ld r1 <- fp[3]
                        st r0[3] <- r1
                        
                        ld r1 <- fp[2]
                        st r0[4] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Book.initBook.end
Book.initBook.end:      
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Article.print:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
Article.print.0:        
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Article.print.1
Article.print.1:        
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l3
                        la r1 <- string13
                        syscall IO.out_string
                        syscall exit
l3:                     push r1
                        
                        call Book.print
                        pop fp
                        pop r0
                        jmp Article.print.2
Article.print.2:        
                        
                        ld r1 <- r0[5]
                        st fp[-1] <- r1
                        jmp Article.print.3
Article.print.3:        
                        
                        la r1 <- l4
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Article.print.4
Article.print.4:        
                        jmp Article.print.5
Article.print.5:        
                        
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Article.print.6
Article.print.6:        
                        jmp Article.print.7
Article.print.7:        
                        
                        la r1 <- l5
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        ld r1 <- fp[0]
                        jmp Article.print.8
Article.print.8:        
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Article.print.end
Article.print.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
Article.initArticle:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Article.initArticle.0:  
                        
                        ld r1 <- fp[4]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[3]
                        st fp[0] <- r1
                        jmp Article.initArticle.1
Article.initArticle.1:  
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l6
                        la r1 <- string14
                        syscall IO.out_string
                        syscall exit
l6:                     push r1
                        
                        call Book.initBook
                        pop fp
                        pop r0
                        jmp Article.initArticle.2
Article.initArticle.2:  
                        
                        ld r1 <- fp[2]
                        st r0[5] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Article.initArticle.end
Article.initArticle.end:
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Book.print:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Book.print.0:           
                        
                        ld r1 <- r0[3]
                        st fp[-1] <- r1
                        jmp Book.print.1
Book.print.1:           
                        
                        push r0
                        push fp
                        la r1 <- l7
                        push r1
                        mov r1 <- r0
                        bnz r1 l8
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l8:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Book.print.2
Book.print.2:           
                        jmp Book.print.3
Book.print.3:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l9
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l9:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Book.print.4
Book.print.4:           
                        jmp Book.print.5
Book.print.5:           
                        
                        push r0
                        push fp
                        la r1 <- l5
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l10
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l10:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp Book.print.6
Book.print.6:           
                        
                        ld r1 <- r0[4]
                        st fp[-1] <- r1
                        jmp Book.print.7
Book.print.7:           
                        
                        push r0
                        push fp
                        la r1 <- l11
                        push r1
                        mov r1 <- r0
                        bnz r1 l12
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l12:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Book.print.8
Book.print.8:           
                        jmp Book.print.9
Book.print.9:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l13
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l13:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Book.print.10
Book.print.10:          
                        jmp Book.print.11
Book.print.11:          
                        
                        push r0
                        push fp
                        la r1 <- l5
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l14
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l14:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp Book.print.12
Book.print.12:          
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Book.print.end
Book.print.end:         
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
BookList.isNil:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
BookList.isNil.0:       
                        jmp BookList.isNil.1
BookList.isNil.1:       
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l15
                        la r1 <- string17
                        syscall IO.out_string
                        syscall exit
l15:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp BookList.isNil.2
BookList.isNil.2:       
                        
                        la r1 <- true
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp BookList.isNil.end
BookList.isNil.end:     
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
BookList.cons:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
BookList.cons.0:        
                        
                        push fp
                        push r0
                        la r2 <- Cons..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        mov r1 <- r0
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp BookList.cons.1
BookList.cons.1:        
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l16
                        la r1 <- string18
                        syscall IO.out_string
                        syscall exit
l16:                    push r1
                        
                        call Cons.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp BookList.cons.2
BookList.cons.2:        
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp BookList.cons.end
BookList.cons.end:      
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
BookList.car:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
BookList.car.0:         
                        jmp BookList.car.1
BookList.car.1:         
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l17
                        la r1 <- string19
                        syscall IO.out_string
                        syscall exit
l17:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp BookList.car.2
BookList.car.2:         
                        
                        push fp
                        push r0
                        la r2 <- Book..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp BookList.car.end
BookList.car.end:       
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
BookList.cdr:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
BookList.cdr.0:         
                        jmp BookList.cdr.1
BookList.cdr.1:         
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l18
                        la r1 <- string20
                        syscall IO.out_string
                        syscall exit
l18:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp BookList.cdr.2
BookList.cdr.2:         
                        
                        push fp
                        push r0
                        la r2 <- BookList..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp BookList.cdr.end
BookList.cdr.end:       
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
BookList.print_list:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
BookList.print_list.0:  
                        jmp BookList.print_list.1
BookList.print_list.1:  
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l19
                        la r1 <- string21
                        syscall IO.out_string
                        syscall exit
l19:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp BookList.print_list.2
BookList.print_list.2:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp BookList.print_list.end
BookList.print_list.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Cons.isNil:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Cons.isNil.0:           
                        
                        la r1 <- false
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.isNil.end
Cons.isNil.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Cons.car:               
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Cons.car.0:             
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.car.end
Cons.car.end:           
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Cons.cdr:               
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Cons.cdr.0:             
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.cdr.end
Cons.cdr.end:           
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Cons.print_list:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        bnz r1 l20
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l20:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[10]
                        call r2
                        pop fp
                        pop r0
                        bz r1 l21
                        st fp[0] <- r1
                        ld r1 <- r1[0]
                        
                        
                        
                        li r2 <- 10
                        beq r1 r2 l23
                        li r2 <- 11
                        beq r1 r2 l22
                        li r2 <- 12
                        beq r1 r2 l24
                        li r2 <- 0
                        beq r1 r2 l24
                        li r2 <- 13
                        beq r1 r2 l24
                        li r2 <- 14
                        beq r1 r2 l24
                        li r2 <- 1
                        beq r1 r2 l24
                        li r2 <- 15
                        beq r1 r2 l24
                        li r2 <- 16
                        beq r1 r2 l24
                        li r2 <- 17
                        beq r1 r2 l24
                        li r2 <- 3
                        beq r1 r2 l24
l24:                    
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l21:                    
                        la r1 <- string24
                        syscall IO.out_string
                        syscall exit
                        
l22:                    
                        
                        push r0
                        push fp
                        la r1 <- l26
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l25
l23:                    
                        
                        push r0
                        push fp
                        la r1 <- l27
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l25
l25:                    
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l28
                        la r1 <- string25
                        syscall IO.out_string
                        syscall exit
l28:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[13]
                        call r2
                        pop fp
                        pop r0
Cons.print_list.end:    
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Cons.init:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
Cons.init.0:            
                        
                        ld r1 <- fp[3]
                        st r0[3] <- r1
                        
                        ld r1 <- fp[2]
                        st r0[4] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.init.end
Cons.init.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Main.main:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.main.0:            
                        
                        push fp
                        push r0
                        la r2 <- Book..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp Main.main.1
Main.main.1:            
                        
                        push r0
                        push fp
                        la r1 <- l29
                        push r1
                        la r1 <- l30
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l31
                        la r1 <- string26
                        syscall IO.out_string
                        syscall exit
l31:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.2
Main.main.2:            
                        
                        push fp
                        push r0
                        la r2 <- Article..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp Main.main.3
Main.main.3:            
                        
                        push r0
                        push fp
                        la r1 <- l32
                        push r1
                        la r1 <- l33
                        push r1
                        la r1 <- l34
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l35
                        la r1 <- string27
                        syscall IO.out_string
                        syscall exit
l35:                    push r1
                        
                        call Article.initArticle
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.4
Main.main.4:            
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- Nil..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp Main.main.5
Main.main.5:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l36
                        la r1 <- string28
                        syscall IO.out_string
                        syscall exit
l36:                    push r1
                        
                        call BookList.cons
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.6
Main.main.6:            
                        jmp Main.main.7
Main.main.7:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l37
                        la r1 <- string28
                        syscall IO.out_string
                        syscall exit
l37:                    push r1
                        
                        call BookList.cons
                        pop fp
                        pop r0
                        st r0[3] <- r1
                        jmp Main.main.8
Main.main.8:            
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp Main.main.9
Main.main.9:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l38
                        la r1 <- string29
                        syscall IO.out_string
                        syscall exit
l38:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[13]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.10
Main.main.10:           
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.main.end
Main.main.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Nil.isNil:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
Nil.isNil.0:            
                        
                        la r1 <- true
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Nil.isNil.end
Nil.isNil.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Nil.print_list:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
Nil.print_list.0:       
                        
                        la r1 <- true
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Nil.print_list.end
Nil.print_list.end:     
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.concat:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- r0[3]
                        syscall String.concat
                        st r3[3] <- r1
                        mov r1 <- r3
String.concat.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.length:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        ld r1 <- r0[3]
                        syscall String.length
                        st r2[3] <- r1
                        mov r1 <- r2
String.length.end:      
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String.substr:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[3]
                        ld r1 <- r1[3]
                        ld r0 <- r0[3]
                        syscall String.substr
                        bnz r1 l39
                        la r1 <- string30
                        syscall IO.out_string
                        syscall exit
l39:                    st r3[3] <- r1
                        mov r1 <- r3
String.substr.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
                        
the.empty.string:       constant ""
string1:                constant "Article"
string2:                constant "Book"
string3:                constant "BookList"
string4:                constant "Bool"
string5:                constant "Cons"
string6:                constant "IO"
string7:                constant "Int"
string8:                constant "Main"
string9:                constant "Nil"
string10:               constant "Object"
string11:               constant "String"
string12:               constant "abort\n"
string13:               constant "ERROR: 38: Exception: dispatch on void\n"
string14:               constant "ERROR: 30: Exception: dispatch on void\n"
string15:               constant "ERROR: 17: Exception: dispatch on void\n"
string16:               constant "ERROR: 18: Exception: dispatch on void\n"
string17:               constant "ERROR: 50: Exception: dispatch on void\n"
string18:               constant "ERROR: 54: Exception: dispatch on void\n"
string19:               constant "ERROR: 62: Exception: dispatch on void\n"
string20:               constant "ERROR: 68: Exception: dispatch on void\n"
string21:               constant "ERROR: 70: Exception: dispatch on void\n"
string22:               constant "ERROR: 95: Exception: dispatch on void\n"
string23:               constant "ERROR: 95: Exception: case without matching branch\n"
string24:               constant "ERROR: 95: Exception: case on void\n"
string25:               constant "ERROR: 99: Exception: dispatch on void\n"
string26:               constant "ERROR: 117: Exception: dispatch on void\n"
string27:               constant "ERROR: 121: Exception: dispatch on void\n"
string28:               constant "ERROR: 126: Exception: dispatch on void\n"
string29:               constant "ERROR: 127: Exception: dispatch on void\n"
string30:               constant "ERROR: 0: Exception: String.substr out of range\n"
                        
eq_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
                        li r3 <- 0
                        beq r1 r3 eq_false
                        beq r2 r3 eq_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 eq_bool
                        li r2 <- 2
                        beq r1 r2 eq_int
                        li r2 <- 6
                        beq r1 r2 eq_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
eq_false:               
                        la r1 <- false
                        jmp eq_end
eq_true:                
                        la r1 <- true
                        jmp eq_end
eq_bool:                
eq_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
le_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
                        li r3 <- 0
                        beq r1 r3 le_false
                        beq r2 r3 le_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 le_bool
                        li r2 <- 2
                        beq r1 r2 le_int
                        li r2 <- 6
                        beq r1 r2 le_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
le_false:               
                        la r1 <- false
                        jmp le_end
le_true:                
                        la r1 <- true
                        jmp le_end
le_bool:                
le_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ble r1 r2 le_true
                        jmp le_false
le_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        ble r1 r2 le_true
                        jmp le_false
le_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
lt_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        li r3 <- 0
                        beq r1 r3 lt_false
                        beq r2 r3 lt_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 lt_bool
                        li r2 <- 2
                        beq r1 r2 lt_int
                        li r2 <- 6
                        beq r1 r2 lt_string
                        
lt_false:               
                        la r1 <- false
                        jmp lt_end
lt_true:                
                        la r1 <- true
                        jmp lt_end
lt_bool:                
lt_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
l29:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l40
l40:                    constant "Compilers, Principles, Techniques, and Tools"
l7:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l41
l41:                    constant "title:      "
l5:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l42
l42:                    constant "\n"
l4:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l43
l43:                    constant "periodical:  "
l26:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l44
l44:                    constant "- dynamic type was Book -\n"
l33:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l45
l45:                    constant "Ulanoff"
l11:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l46
l46:                    constant "author:     "
l30:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l47
l47:                    constant "Aho, Sethi, and Ullman"
l32:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l48
l48:                    constant "The Top 100 CD_ROMs"
l34:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l49
l49:                    constant "PC Magazine"
l27:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l50
l50:                    constant "- dynamic type was Article -\n"
true:                   constant 0
                        constant 4
                        constant Bool..vtable
                        constant 1
false:                  constant 0
                        constant 4
                        constant Bool..vtable
                        constant 0
                        
start:                  
                        la r2 <- Main..new
                        push fp
                        call r2
                        push fp
                        push r1
                        la r2 <- Main.main
                        call r2
                        syscall exit
