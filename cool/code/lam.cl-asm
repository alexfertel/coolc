                        
App..vtable:            
                        constant string1
                        constant App..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant App.print_self
                        constant App.beta
                        constant App.substitute
                        constant App.gen_code
                        constant App.init
                        
Bool..vtable:           
                        constant string2
                        constant Bool..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Expr..vtable:           
                        constant string3
                        constant Expr..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Expr.print_self
                        constant Expr.beta
                        constant Expr.substitute
                        constant Expr.gen_code
                        
IO..vtable:             
                        constant string4
                        constant IO..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        
Int..vtable:            
                        constant string5
                        constant Int..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Lambda..vtable:         
                        constant string6
                        constant Lambda..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Lambda.print_self
                        constant Lambda.beta
                        constant Lambda.substitute
                        constant Lambda.gen_code
                        constant Lambda.init
                        constant Lambda.apply
                        constant Lambda.gen_closure_code
                        
LambdaList..vtable:     
                        constant string7
                        constant LambdaList..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant LambdaList.isNil
                        constant LambdaList.headE
                        constant LambdaList.headC
                        constant LambdaList.headN
                        constant LambdaList.tail
                        constant LambdaList.add
                        
LambdaListNE..vtable:   
                        constant string8
                        constant LambdaListNE..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant LambdaListNE.isNil
                        constant LambdaListNE.headE
                        constant LambdaListNE.headC
                        constant LambdaListNE.headN
                        constant LambdaListNE.tail
                        constant LambdaList.add
                        constant LambdaListNE.init
                        
LambdaListRef..vtable:  
                        constant string9
                        constant LambdaListRef..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant LambdaListRef.isNil
                        constant LambdaListRef.headE
                        constant LambdaListRef.headC
                        constant LambdaListRef.headN
                        constant LambdaListRef.reset
                        constant LambdaListRef.add
                        constant LambdaListRef.removeHead
                        
Main..vtable:           
                        constant string10
                        constant Main..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Term.var
                        constant Term.lam
                        constant Term.app
                        constant Term.i
                        constant Term.k
                        constant Term.s
                        constant Main.beta_reduce
                        constant Main.eval_class
                        constant Main.closure_class
                        constant Main.gen_code
                        constant Main.main
                        
Object..vtable:         
                        constant string11
                        constant Object..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
String..vtable:         
                        constant string12
                        constant String..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant String.concat
                        constant String.length
                        constant String.substr
                        
Term..vtable:           
                        constant string13
                        constant Term..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Term.var
                        constant Term.lam
                        constant Term.app
                        constant Term.i
                        constant Term.k
                        constant Term.s
                        
VarList..vtable:        
                        constant string14
                        constant VarList..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant VarList.isNil
                        constant VarList.head
                        constant VarList.tail
                        constant VarList.add
                        constant VarList.print
                        
VarListNE..vtable:      
                        constant string15
                        constant VarListNE..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant VarListNE.isNil
                        constant VarListNE.head
                        constant VarListNE.tail
                        constant VarList.add
                        constant VarListNE.print
                        constant VarListNE.init
                        
Variable..vtable:       
                        constant string16
                        constant Variable..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Variable.print_self
                        constant Variable.beta
                        constant Variable.substitute
                        constant Variable.gen_code
                        constant Variable.init
                        
App..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 5
                        alloc r0 r0
                        
                        li r2 <- 10
                        st r0[0] <- r2
                        li r2 <- 5
                        st r0[1] <- r2
                        la r2 <- App..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        li r1 <- 0
                        st r0[4] <- r1
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Bool..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 0
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Bool..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Expr..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 11
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Expr..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO..new:                
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 12
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- IO..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Int..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 1
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Int..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Lambda..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 5
                        alloc r0 r0
                        
                        li r2 <- 13
                        st r0[0] <- r2
                        li r2 <- 5
                        st r0[1] <- r2
                        la r2 <- Lambda..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        li r1 <- 0
                        st r0[4] <- r1
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
LambdaList..new:        
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 14
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- LambdaList..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
LambdaListNE..new:      
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 7
                        alloc r0 r0
                        
                        li r2 <- 15
                        st r0[0] <- r2
                        li r2 <- 7
                        st r0[1] <- r2
                        la r2 <- LambdaListNE..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
                        
                        li r1 <- 0
                        st r0[5] <- r1
                        
                        li r1 <- 0
                        st r0[6] <- r1
                        
                        
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
LambdaListRef..new:     
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 5
                        alloc r0 r0
                        
                        li r2 <- 16
                        st r0[0] <- r2
                        li r2 <- 5
                        st r0[1] <- r2
                        la r2 <- LambdaListRef..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        li r1 <- 0
                        st r0[4] <- r1
                        
                        la r1 <- int0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Main..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 17
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Main..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 18
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Object..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 3
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- String..vtable
                        st r0[2] <- r2
                        
                        
                        la r1 <- the.empty.string
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Term..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 19
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Term..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
VarList..new:           
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 20
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- VarList..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
VarListNE..new:         
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 5
                        alloc r0 r0
                        
                        li r2 <- 21
                        st r0[0] <- r2
                        li r2 <- 5
                        st r0[1] <- r2
                        la r2 <- VarListNE..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        li r1 <- 0
                        st r0[4] <- r1
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Variable..new:          
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 22
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Variable..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.abort:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        la r1 <- string17
                        syscall IO.out_string
                        syscall exit
Object.abort.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.copy:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        ld r2 <- r0[1]
                        alloc r1 r2
                        push r1
l1:                     bz r2 l2
                        ld r3 <- r0[0]
                        st r1[0] <- r3
                        li r3 <- 1
                        add r0 <- r0 r3
                        add r1 <- r1 r3
                        li r3 <- 1
                        sub r2 <- r2 r3
                        jmp l1
l2:                     
                        pop r1
Object.copy.end:        
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.type_name:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[0]
                        st r1[3] <- r2
Object.type_name.end:   
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_int:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_int
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_int.end:          
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_string:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_string
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_string.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.out_int:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_int
                        mov r1 <- r0
IO.out_int.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
IO.out_string:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_string
                        mov r1 <- r0
IO.out_string.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
App.print_self:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
App.print_self.0:       
                        jmp App.print_self.1
App.print_self.1:       
                        
                        la r1 <- l3
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.print_self.2
App.print_self.2:       
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp App.print_self.3
App.print_self.3:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l4
                        la r1 <- string18
                        syscall IO.out_string
                        syscall exit
l4:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp App.print_self.4
App.print_self.4:       
                        jmp App.print_self.5
App.print_self.5:       
                        
                        la r1 <- l5
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.print_self.6
App.print_self.6:       
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp App.print_self.7
App.print_self.7:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l6
                        la r1 <- string19
                        syscall IO.out_string
                        syscall exit
l6:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp App.print_self.8
App.print_self.8:       
                        jmp App.print_self.9
App.print_self.9:       
                        
                        la r1 <- l7
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.print_self.10
App.print_self.10:      
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp App.print_self.end
App.print_self.end:     
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
App.beta:               
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        ld r1 <- r0[3]
                        bz r1 l8
                        st fp[0] <- r1
                        ld r1 <- r1[0]
                        
                        
                        
                        li r2 <- 10
                        beq r1 r2 l10
                        li r2 <- 0
                        beq r1 r2 l11
                        li r2 <- 11
                        beq r1 r2 l10
                        li r2 <- 12
                        beq r1 r2 l11
                        li r2 <- 1
                        beq r1 r2 l11
                        li r2 <- 13
                        beq r1 r2 l9
                        li r2 <- 14
                        beq r1 r2 l11
                        li r2 <- 15
                        beq r1 r2 l11
                        li r2 <- 16
                        beq r1 r2 l11
                        li r2 <- 17
                        beq r1 r2 l11
                        li r2 <- 18
                        beq r1 r2 l11
                        li r2 <- 3
                        beq r1 r2 l11
                        li r2 <- 19
                        beq r1 r2 l11
                        li r2 <- 20
                        beq r1 r2 l11
                        li r2 <- 21
                        beq r1 r2 l11
                        li r2 <- 22
                        beq r1 r2 l10
l11:                    
                        la r1 <- string20
                        syscall IO.out_string
                        syscall exit
l8:                     
                        la r1 <- string21
                        syscall IO.out_string
                        syscall exit
                        
l9:                     
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        push r1
                        
                        ld r1 <- fp[0]
                        bnz r1 l13
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l13:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        jmp l12
l10:                    
                        
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        bnz r1 l14
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l14:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[10]
                        call r2
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- App..new
                        call r2
                        pop r0
                        pop fp
                        st fp[-2] <- r1
                        
                        push r0
                        push fp
                        
                        ld r1 <- fp[-1]
                        push r1
                        
                        ld r1 <- r0[4]
                        push r1
                        
                        ld r1 <- fp[-2]
                        bnz r1 l15
                        la r1 <- string24
                        syscall IO.out_string
                        syscall exit
l15:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[13]
                        call r2
                        pop fp
                        pop r0
                        jmp l12
l12:                    
App.beta.end:           
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
App.substitute:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 5
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
App.substitute.0:       
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp App.substitute.1
App.substitute.1:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l16
                        la r1 <- string25
                        syscall IO.out_string
                        syscall exit
l16:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st fp[-3] <- r1
                        jmp App.substitute.2
App.substitute.2:       
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp App.substitute.3
App.substitute.3:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l17
                        la r1 <- string26
                        syscall IO.out_string
                        syscall exit
l17:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp App.substitute.4
App.substitute.4:       
                        
                        push fp
                        push r0
                        la r2 <- App..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[-3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp App.substitute.5
App.substitute.5:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l18
                        la r1 <- string27
                        syscall IO.out_string
                        syscall exit
l18:                    push r1
                        
                        call App.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp App.substitute.6
App.substitute.6:       
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp App.substitute.end
App.substitute.end:     
                        pop ra
                        li r2 <- 7
                        add sp <- sp r2
                        return
                        
App.gen_code:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
App.gen_code.0:         
                        jmp App.gen_code.1
App.gen_code.1:         
                        
                        la r1 <- l19
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.gen_code.2
App.gen_code.2:         
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp App.gen_code.3
App.gen_code.3:         
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l20
                        la r1 <- string28
                        syscall IO.out_string
                        syscall exit
l20:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        jmp App.gen_code.4
App.gen_code.4:         
                        jmp App.gen_code.5
App.gen_code.5:         
                        
                        la r1 <- l21
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.gen_code.6
App.gen_code.6:         
                        jmp App.gen_code.7
App.gen_code.7:         
                        
                        la r1 <- l22
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.gen_code.8
App.gen_code.8:         
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp App.gen_code.9
App.gen_code.9:         
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l23
                        la r1 <- string29
                        syscall IO.out_string
                        syscall exit
l23:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        jmp App.gen_code.10
App.gen_code.10:        
                        jmp App.gen_code.11
App.gen_code.11:        
                        
                        la r1 <- l24
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.gen_code.12
App.gen_code.12:        
                        jmp App.gen_code.13
App.gen_code.13:        
                        
                        la r1 <- l25
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.gen_code.14
App.gen_code.14:        
                        jmp App.gen_code.15
App.gen_code.15:        
                        
                        la r1 <- l26
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.gen_code.16
App.gen_code.16:        
                        jmp App.gen_code.17
App.gen_code.17:        
                        
                        la r1 <- l27
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp App.gen_code.18
App.gen_code.18:        
                        jmp App.gen_code.19
App.gen_code.19:        
                        
                        la r1 <- l28
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp App.gen_code.20
App.gen_code.20:        
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp App.gen_code.end
App.gen_code.end:       
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
App.init:               
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
App.init.0:             
                        
                        ld r1 <- fp[3]
                        st r0[3] <- r1
                        
                        ld r1 <- fp[2]
                        st r0[4] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp App.init.end
App.init.end:           
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Expr.print_self:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
Expr.print_self.0:      
                        jmp Expr.print_self.1
Expr.print_self.1:      
                        
                        push r0
                        push fp
                        la r1 <- l29
                        push r1
                        mov r1 <- r0
                        bnz r1 l30
                        la r1 <- string30
                        syscall IO.out_string
                        syscall exit
l30:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.print_self.2
Expr.print_self.2:      
                        jmp Expr.print_self.3
Expr.print_self.3:      
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l31
                        la r1 <- string31
                        syscall IO.out_string
                        syscall exit
l31:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.print_self.4
Expr.print_self.4:      
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Expr.print_self.end
Expr.print_self.end:    
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Expr.beta:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
Expr.beta.0:            
                        jmp Expr.beta.1
Expr.beta.1:            
                        
                        push r0
                        push fp
                        la r1 <- l32
                        push r1
                        mov r1 <- r0
                        bnz r1 l33
                        la r1 <- string32
                        syscall IO.out_string
                        syscall exit
l33:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.beta.2
Expr.beta.2:            
                        jmp Expr.beta.3
Expr.beta.3:            
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l34
                        la r1 <- string33
                        syscall IO.out_string
                        syscall exit
l34:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.beta.4
Expr.beta.4:            
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Expr.beta.end
Expr.beta.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Expr.substitute:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Expr.substitute.0:      
                        jmp Expr.substitute.1
Expr.substitute.1:      
                        
                        push r0
                        push fp
                        la r1 <- l35
                        push r1
                        mov r1 <- r0
                        bnz r1 l36
                        la r1 <- string34
                        syscall IO.out_string
                        syscall exit
l36:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.substitute.2
Expr.substitute.2:      
                        jmp Expr.substitute.3
Expr.substitute.3:      
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l37
                        la r1 <- string35
                        syscall IO.out_string
                        syscall exit
l37:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.substitute.4
Expr.substitute.4:      
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Expr.substitute.end
Expr.substitute.end:    
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Expr.gen_code:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Expr.gen_code.0:        
                        jmp Expr.gen_code.1
Expr.gen_code.1:        
                        
                        push r0
                        push fp
                        la r1 <- l38
                        push r1
                        mov r1 <- r0
                        bnz r1 l39
                        la r1 <- string36
                        syscall IO.out_string
                        syscall exit
l39:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.gen_code.2
Expr.gen_code.2:        
                        jmp Expr.gen_code.3
Expr.gen_code.3:        
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l40
                        la r1 <- string37
                        syscall IO.out_string
                        syscall exit
l40:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp Expr.gen_code.4
Expr.gen_code.4:        
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Expr.gen_code.end
Expr.gen_code.end:      
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Lambda.print_self:      
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
Lambda.print_self.0:    
                        jmp Lambda.print_self.1
Lambda.print_self.1:    
                        
                        la r1 <- l41
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.print_self.2
Lambda.print_self.2:    
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp Lambda.print_self.3
Lambda.print_self.3:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l42
                        la r1 <- string38
                        syscall IO.out_string
                        syscall exit
l42:                    push r1
                        
                        call Variable.print_self
                        pop fp
                        pop r0
                        jmp Lambda.print_self.4
Lambda.print_self.4:    
                        jmp Lambda.print_self.5
Lambda.print_self.5:    
                        
                        la r1 <- l43
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.print_self.6
Lambda.print_self.6:    
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Lambda.print_self.7
Lambda.print_self.7:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l44
                        la r1 <- string39
                        syscall IO.out_string
                        syscall exit
l44:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp Lambda.print_self.8
Lambda.print_self.8:    
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.print_self.end
Lambda.print_self.end:  
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Lambda.beta:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Lambda.beta.0:          
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.beta.end
Lambda.beta.end:        
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Lambda.substitute:      
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Lambda.substitute.0:    
                        
                        ld r1 <- fp[3]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Lambda.substitute.1
                        jmp Lambda.substitute.2
Lambda.substitute.1:    
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Lambda.substitute.3
Lambda.substitute.2:    
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Lambda.substitute.4
Lambda.substitute.3:    
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.substitute.end
Lambda.substitute.4:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l45
                        la r1 <- string40
                        syscall IO.out_string
                        syscall exit
l45:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Lambda.substitute.5
Lambda.substitute.5:    
                        
                        push fp
                        push r0
                        la r2 <- Lambda..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- r0[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.substitute.6
Lambda.substitute.6:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l46
                        la r1 <- string41
                        syscall IO.out_string
                        syscall exit
l46:                    push r1
                        
                        call Lambda.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Lambda.substitute.7
Lambda.substitute.7:    
                        jmp Lambda.substitute.3
Lambda.substitute.end:  
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Lambda.gen_code:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Lambda.gen_code.0:      
                        jmp Lambda.gen_code.1
Lambda.gen_code.1:      
                        
                        la r1 <- l47
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_code.2
Lambda.gen_code.2:      
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        mov r1 <- r0
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Lambda.gen_code.3
Lambda.gen_code.3:      
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l48
                        la r1 <- string42
                        syscall IO.out_string
                        syscall exit
l48:                    push r1
                        
                        call LambdaListRef.add
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Lambda.gen_code.4
Lambda.gen_code.4:      
                        jmp Lambda.gen_code.5
Lambda.gen_code.5:      
                        
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        syscall IO.out_int
                        mov r1 <- r0
                        jmp Lambda.gen_code.6
Lambda.gen_code.6:      
                        jmp Lambda.gen_code.7
Lambda.gen_code.7:      
                        
                        la r1 <- l49
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_code.8
Lambda.gen_code.8:      
                        
                        ld r1 <- fp[3]
                        st fp[0] <- r1
                        jmp Lambda.gen_code.9
Lambda.gen_code.9:      
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l50
                        la r1 <- string43
                        syscall IO.out_string
                        syscall exit
l50:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Lambda.gen_code.10
Lambda.gen_code.10:     
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Lambda.gen_code.11
                        jmp Lambda.gen_code.12
Lambda.gen_code.11:     
                        jmp Lambda.gen_code.14
Lambda.gen_code.12:     
                        jmp Lambda.gen_code.16
Lambda.gen_code.13:     
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.gen_code.end
Lambda.gen_code.14:     
                        
                        la r1 <- l51
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_code.15
Lambda.gen_code.15:     
                        jmp Lambda.gen_code.13
Lambda.gen_code.16:     
                        
                        la r1 <- l52
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_code.17
Lambda.gen_code.17:     
                        jmp Lambda.gen_code.13
Lambda.gen_code.end:    
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Lambda.init:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
Lambda.init.0:          
                        
                        ld r1 <- fp[3]
                        st r0[3] <- r1
                        
                        ld r1 <- fp[2]
                        st r0[4] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.init.end
Lambda.init.end:        
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Lambda.apply:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
Lambda.apply.0:         
                        
                        ld r1 <- r0[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Lambda.apply.1
Lambda.apply.1:         
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l53
                        la r1 <- string44
                        syscall IO.out_string
                        syscall exit
l53:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Lambda.apply.2
Lambda.apply.2:         
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.apply.end
Lambda.apply.end:       
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
Lambda.gen_closure_code:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Lambda.gen_closure_code.0:
                        jmp Lambda.gen_closure_code.1
Lambda.gen_closure_code.1:
                        
                        la r1 <- l54
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.2
Lambda.gen_closure_code.2:
                        
                        ld r1 <- fp[4]
                        st fp[0] <- r1
                        jmp Lambda.gen_closure_code.3
Lambda.gen_closure_code.3:
                        
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        syscall IO.out_int
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.4
Lambda.gen_closure_code.4:
                        jmp Lambda.gen_closure_code.5
Lambda.gen_closure_code.5:
                        
                        la r1 <- l55
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.6
Lambda.gen_closure_code.6:
                        jmp Lambda.gen_closure_code.7
Lambda.gen_closure_code.7:
                        
                        la r1 <- l56
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.8
Lambda.gen_closure_code.8:
                        jmp Lambda.gen_closure_code.9
Lambda.gen_closure_code.9:
                        
                        la r1 <- l57
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.10
Lambda.gen_closure_code.10:
                        
                        ld r1 <- fp[4]
                        st fp[0] <- r1
                        jmp Lambda.gen_closure_code.11
Lambda.gen_closure_code.11:
                        
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        syscall IO.out_int
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.12
Lambda.gen_closure_code.12:
                        jmp Lambda.gen_closure_code.13
Lambda.gen_closure_code.13:
                        
                        la r1 <- l58
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.14
Lambda.gen_closure_code.14:
                        jmp Lambda.gen_closure_code.15
Lambda.gen_closure_code.15:
                        
                        la r1 <- l59
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.16
Lambda.gen_closure_code.16:
                        
                        ld r1 <- r0[3]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[3]
                        st fp[0] <- r1
                        jmp Lambda.gen_closure_code.17
Lambda.gen_closure_code.17:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l60
                        la r1 <- string45
                        syscall IO.out_string
                        syscall exit
l60:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp Lambda.gen_closure_code.18
Lambda.gen_closure_code.18:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Lambda.gen_closure_code.19
Lambda.gen_closure_code.19:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l61
                        la r1 <- string45
                        syscall IO.out_string
                        syscall exit
l61:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        jmp Lambda.gen_closure_code.20
Lambda.gen_closure_code.20:
                        jmp Lambda.gen_closure_code.21
Lambda.gen_closure_code.21:
                        
                        la r1 <- l62
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Lambda.gen_closure_code.22
Lambda.gen_closure_code.22:
                        jmp Lambda.gen_closure_code.23
Lambda.gen_closure_code.23:
                        
                        la r1 <- l63
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Lambda.gen_closure_code.24
Lambda.gen_closure_code.24:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Lambda.gen_closure_code.end
Lambda.gen_closure_code.end:
                        pop ra
                        li r2 <- 7
                        add sp <- sp r2
                        return
                        
LambdaList.isNil:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
LambdaList.isNil.0:     
                        
                        la r1 <- true
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaList.isNil.end
LambdaList.isNil.end:   
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaList.headE:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
LambdaList.headE.0:     
                        jmp LambdaList.headE.1
LambdaList.headE.1:     
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l64
                        la r1 <- string46
                        syscall IO.out_string
                        syscall exit
l64:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp LambdaList.headE.2
LambdaList.headE.2:     
                        
                        push fp
                        push r0
                        la r2 <- VarList..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaList.headE.end
LambdaList.headE.end:   
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaList.headC:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
LambdaList.headC.0:     
                        jmp LambdaList.headC.1
LambdaList.headC.1:     
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l65
                        la r1 <- string47
                        syscall IO.out_string
                        syscall exit
l65:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp LambdaList.headC.2
LambdaList.headC.2:     
                        
                        push fp
                        push r0
                        la r2 <- Lambda..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaList.headC.end
LambdaList.headC.end:   
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaList.headN:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
LambdaList.headN.0:     
                        jmp LambdaList.headN.1
LambdaList.headN.1:     
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l66
                        la r1 <- string48
                        syscall IO.out_string
                        syscall exit
l66:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp LambdaList.headN.2
LambdaList.headN.2:     
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaList.headN.end
LambdaList.headN.end:   
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaList.tail:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
LambdaList.tail.0:      
                        jmp LambdaList.tail.1
LambdaList.tail.1:      
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l67
                        la r1 <- string49
                        syscall IO.out_string
                        syscall exit
l67:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp LambdaList.tail.2
LambdaList.tail.2:      
                        
                        push fp
                        push r0
                        la r2 <- LambdaList..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaList.tail.end
LambdaList.tail.end:    
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaList.add:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 6
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
LambdaList.add.0:       
                        
                        ld r1 <- fp[4]
                        st fp[-4] <- r1
                        
                        ld r1 <- fp[3]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        mov r1 <- r0
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- LambdaListNE..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp LambdaList.add.1
LambdaList.add.1:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-4]
                        push r1
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l68
                        la r1 <- string50
                        syscall IO.out_string
                        syscall exit
l68:                    push r1
                        
                        call LambdaListNE.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp LambdaList.add.2
LambdaList.add.2:       
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaList.add.end
LambdaList.add.end:     
                        pop ra
                        li r2 <- 9
                        add sp <- sp r2
                        return
                        
LambdaListNE.isNil:     
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
LambdaListNE.isNil.0:   
                        
                        la r1 <- false
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListNE.isNil.end
LambdaListNE.isNil.end: 
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListNE.headE:     
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
LambdaListNE.headE.0:   
                        
                        ld r1 <- r0[5]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListNE.headE.end
LambdaListNE.headE.end: 
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListNE.headC:     
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
LambdaListNE.headC.0:   
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListNE.headC.end
LambdaListNE.headC.end: 
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListNE.headN:     
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
LambdaListNE.headN.0:   
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListNE.headN.end
LambdaListNE.headN.end: 
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListNE.tail:      
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
LambdaListNE.tail.0:    
                        
                        ld r1 <- r0[6]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListNE.tail.end
LambdaListNE.tail.end:  
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListNE.init:      
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
LambdaListNE.init.0:    
                        
                        ld r1 <- fp[5]
                        st r0[5] <- r1
                        
                        ld r1 <- fp[4]
                        st r0[3] <- r1
                        
                        ld r1 <- fp[3]
                        st r0[4] <- r1
                        
                        ld r1 <- fp[2]
                        st r0[6] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListNE.init.end
LambdaListNE.init.end:  
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
LambdaListRef.isNil:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
LambdaListRef.isNil.0:  
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp LambdaListRef.isNil.1
LambdaListRef.isNil.1:  
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l69
                        la r1 <- string51
                        syscall IO.out_string
                        syscall exit
l69:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp LambdaListRef.isNil.2
LambdaListRef.isNil.2:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListRef.isNil.end
LambdaListRef.isNil.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListRef.headE:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
LambdaListRef.headE.0:  
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp LambdaListRef.headE.1
LambdaListRef.headE.1:  
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l70
                        la r1 <- string52
                        syscall IO.out_string
                        syscall exit
l70:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp LambdaListRef.headE.2
LambdaListRef.headE.2:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListRef.headE.end
LambdaListRef.headE.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListRef.headC:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
LambdaListRef.headC.0:  
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp LambdaListRef.headC.1
LambdaListRef.headC.1:  
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l71
                        la r1 <- string53
                        syscall IO.out_string
                        syscall exit
l71:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[7]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp LambdaListRef.headC.2
LambdaListRef.headC.2:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListRef.headC.end
LambdaListRef.headC.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListRef.headN:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
LambdaListRef.headN.0:  
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp LambdaListRef.headN.1
LambdaListRef.headN.1:  
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l72
                        la r1 <- string54
                        syscall IO.out_string
                        syscall exit
l72:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp LambdaListRef.headN.2
LambdaListRef.headN.2:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListRef.headN.end
LambdaListRef.headN.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListRef.reset:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
LambdaListRef.reset.0:  
                        
                        la r1 <- int0
                        st r0[3] <- r1
                        
                        push fp
                        push r0
                        la r2 <- LambdaList..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListRef.reset.end
LambdaListRef.reset.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
LambdaListRef.add:      
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 5
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
LambdaListRef.add.0:    
                        
                        ld r1 <- fp[3]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        ld r1 <- r0[3]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp LambdaListRef.add.1
LambdaListRef.add.1:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l73
                        la r1 <- string55
                        syscall IO.out_string
                        syscall exit
l73:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[10]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
                        jmp LambdaListRef.add.2
LambdaListRef.add.2:    
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st r0[3] <- r1
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListRef.add.end
LambdaListRef.add.end:  
                        pop ra
                        li r2 <- 7
                        add sp <- sp r2
                        return
                        
LambdaListRef.removeHead:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
LambdaListRef.removeHead.0:
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp LambdaListRef.removeHead.1
LambdaListRef.removeHead.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l74
                        la r1 <- string56
                        syscall IO.out_string
                        syscall exit
l74:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
                        jmp LambdaListRef.removeHead.2
LambdaListRef.removeHead.2:
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp LambdaListRef.removeHead.end
LambdaListRef.removeHead.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Term.var:               
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
Term.var.0:             
                        
                        push fp
                        push r0
                        la r2 <- Variable..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.var.1
Term.var.1:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l75
                        la r1 <- string57
                        syscall IO.out_string
                        syscall exit
l75:                    push r1
                        
                        call Variable.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.var.2
Term.var.2:             
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.var.end
Term.var.end:           
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Term.lam:               
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
Term.lam.0:             
                        
                        push fp
                        push r0
                        la r2 <- Lambda..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.lam.1
Term.lam.1:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l76
                        la r1 <- string58
                        syscall IO.out_string
                        syscall exit
l76:                    push r1
                        
                        call Lambda.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.lam.2
Term.lam.2:             
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.lam.end
Term.lam.end:           
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Term.app:               
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
Term.app.0:             
                        
                        push fp
                        push r0
                        la r2 <- App..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[3]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.app.1
Term.app.1:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l77
                        la r1 <- string59
                        syscall IO.out_string
                        syscall exit
l77:                    push r1
                        
                        call App.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.app.2
Term.app.2:             
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.app.end
Term.app.end:           
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Term.i:                 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
Term.i.0:               
                        jmp Term.i.1
Term.i.1:               
                        
                        push r0
                        push fp
                        la r1 <- l78
                        push r1
                        mov r1 <- r0
                        bnz r1 l79
                        la r1 <- string60
                        syscall IO.out_string
                        syscall exit
l79:                    push r1
                        
                        call Term.var
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.i.2
Term.i.2:               
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.i.3
Term.i.3:               
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l80
                        la r1 <- string61
                        syscall IO.out_string
                        syscall exit
l80:                    push r1
                        
                        call Term.lam
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.i.4
Term.i.4:               
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.i.end
Term.i.end:             
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
Term.k:                 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
Term.k.0:               
                        jmp Term.k.1
Term.k.1:               
                        
                        push r0
                        push fp
                        la r1 <- l78
                        push r1
                        mov r1 <- r0
                        bnz r1 l81
                        la r1 <- string62
                        syscall IO.out_string
                        syscall exit
l81:                    push r1
                        
                        call Term.var
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.k.2
Term.k.2:               
                        jmp Term.k.3
Term.k.3:               
                        
                        push r0
                        push fp
                        la r1 <- l82
                        push r1
                        mov r1 <- r0
                        bnz r1 l83
                        la r1 <- string63
                        syscall IO.out_string
                        syscall exit
l83:                    push r1
                        
                        call Term.var
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Term.k.4
Term.k.4:               
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.k.5
Term.k.5:               
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l84
                        la r1 <- string64
                        syscall IO.out_string
                        syscall exit
l84:                    push r1
                        
                        call Term.lam
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.k.6
Term.k.6:               
                        jmp Term.k.7
Term.k.7:               
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l85
                        la r1 <- string64
                        syscall IO.out_string
                        syscall exit
l85:                    push r1
                        
                        call Term.lam
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.k.8
Term.k.8:               
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.k.end
Term.k.end:             
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Term.s:                 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 8
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Term.s.0:               
                        jmp Term.s.1
Term.s.1:               
                        
                        push r0
                        push fp
                        la r1 <- l78
                        push r1
                        mov r1 <- r0
                        bnz r1 l86
                        la r1 <- string65
                        syscall IO.out_string
                        syscall exit
l86:                    push r1
                        
                        call Term.var
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp Term.s.2
Term.s.2:               
                        jmp Term.s.3
Term.s.3:               
                        
                        push r0
                        push fp
                        la r1 <- l82
                        push r1
                        mov r1 <- r0
                        bnz r1 l87
                        la r1 <- string66
                        syscall IO.out_string
                        syscall exit
l87:                    push r1
                        
                        call Term.var
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Term.s.4
Term.s.4:               
                        jmp Term.s.5
Term.s.5:               
                        
                        push r0
                        push fp
                        la r1 <- l88
                        push r1
                        mov r1 <- r0
                        bnz r1 l89
                        la r1 <- string67
                        syscall IO.out_string
                        syscall exit
l89:                    push r1
                        
                        call Term.var
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.s.6
Term.s.6:               
                        
                        ld r1 <- fp[-2]
                        st fp[-6] <- r1
                        
                        ld r1 <- fp[-1]
                        st fp[-5] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-4] <- r1
                        
                        ld r1 <- fp[-2]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        jmp Term.s.7
Term.s.7:               
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        mov r1 <- r0
                        bnz r1 l90
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l90:                    push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp Term.s.8
Term.s.8:               
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.s.9
Term.s.9:               
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l91
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l91:                    push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.s.10
Term.s.10:              
                        jmp Term.s.11
Term.s.11:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l92
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l92:                    push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.s.12
Term.s.12:              
                        jmp Term.s.13
Term.s.13:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[-4]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l93
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l93:                    push r1
                        
                        call Term.lam
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.s.14
Term.s.14:              
                        jmp Term.s.15
Term.s.15:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[-5]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l94
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l94:                    push r1
                        
                        call Term.lam
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.s.16
Term.s.16:              
                        jmp Term.s.17
Term.s.17:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[-6]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l95
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l95:                    push r1
                        
                        call Term.lam
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Term.s.18
Term.s.18:              
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Term.s.end
Term.s.end:             
                        pop ra
                        li r2 <- 8
                        add sp <- sp r2
                        return
                        
Main.beta_reduce:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 5
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.beta_reduce.0:     
                        jmp Main.beta_reduce.1
Main.beta_reduce.1:     
                        
                        la r1 <- l96
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.beta_reduce.2
Main.beta_reduce.2:     
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Main.beta_reduce.3
Main.beta_reduce.3:     
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l97
                        la r1 <- string69
                        syscall IO.out_string
                        syscall exit
l97:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.beta_reduce.4
Main.beta_reduce.4:     
                        
                        la r1 <- false
                        st fp[-1] <- r1
                        jmp Main.beta_reduce.5
Main.beta_reduce.5:     
                        
                        ld r1 <- fp[-1]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        li r1 <- 1
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Bool..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Main.beta_reduce.7
                        jmp Main.beta_reduce.6
Main.beta_reduce.6:     
                        jmp Main.beta_reduce.17
Main.beta_reduce.7:     
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Main.beta_reduce.8
Main.beta_reduce.8:     
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l98
                        la r1 <- string70
                        syscall IO.out_string
                        syscall exit
l98:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[10]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.beta_reduce.9
Main.beta_reduce.9:     
                        
                        ld r1 <- fp[0]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        ld r1 <- fp[-2]
                        ld r1 <- r1[3]
                        bnz r1 Main.beta_reduce.10
                        jmp Main.beta_reduce.11
Main.beta_reduce.10:    
                        
                        la r1 <- true
                        st fp[-1] <- r1
                        jmp Main.beta_reduce.12
Main.beta_reduce.11:    
                        
                        ld r1 <- fp[0]
                        st fp[2] <- r1
                        jmp Main.beta_reduce.13
Main.beta_reduce.12:    
                        jmp Main.beta_reduce.5
Main.beta_reduce.13:    
                        
                        la r1 <- l99
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.beta_reduce.14
Main.beta_reduce.14:    
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Main.beta_reduce.15
Main.beta_reduce.15:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l100
                        la r1 <- string71
                        syscall IO.out_string
                        syscall exit
l100:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.beta_reduce.16
Main.beta_reduce.16:    
                        jmp Main.beta_reduce.12
Main.beta_reduce.17:    
                        
                        la r1 <- l101
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.beta_reduce.18
Main.beta_reduce.18:    
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.beta_reduce.end
Main.beta_reduce.end:   
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Main.eval_class:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
Main.eval_class.0:      
                        jmp Main.eval_class.1
Main.eval_class.1:      
                        
                        la r1 <- l102
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.eval_class.2
Main.eval_class.2:      
                        jmp Main.eval_class.3
Main.eval_class.3:      
                        
                        la r1 <- l103
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.eval_class.4
Main.eval_class.4:      
                        jmp Main.eval_class.5
Main.eval_class.5:      
                        
                        la r1 <- l63
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Main.eval_class.6
Main.eval_class.6:      
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.eval_class.end
Main.eval_class.end:    
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Main.closure_class:     
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
Main.closure_class.0:   
                        jmp Main.closure_class.1
Main.closure_class.1:   
                        
                        la r1 <- l104
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.closure_class.2
Main.closure_class.2:   
                        jmp Main.closure_class.3
Main.closure_class.3:   
                        
                        la r1 <- l105
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.closure_class.4
Main.closure_class.4:   
                        jmp Main.closure_class.5
Main.closure_class.5:   
                        
                        la r1 <- l106
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.closure_class.6
Main.closure_class.6:   
                        jmp Main.closure_class.7
Main.closure_class.7:   
                        
                        la r1 <- l107
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.closure_class.8
Main.closure_class.8:   
                        jmp Main.closure_class.9
Main.closure_class.9:   
                        
                        la r1 <- l108
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.closure_class.10
Main.closure_class.10:  
                        jmp Main.closure_class.11
Main.closure_class.11:  
                        
                        la r1 <- l109
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.closure_class.12
Main.closure_class.12:  
                        jmp Main.closure_class.13
Main.closure_class.13:  
                        
                        la r1 <- l110
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.closure_class.14
Main.closure_class.14:  
                        jmp Main.closure_class.15
Main.closure_class.15:  
                        
                        la r1 <- l63
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Main.closure_class.16
Main.closure_class.16:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.closure_class.end
Main.closure_class.end: 
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Main.gen_code:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 7
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.gen_code.0:        
                        
                        push fp
                        push r0
                        la r2 <- LambdaListRef..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp Main.gen_code.1
Main.gen_code.1:        
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l111
                        la r1 <- string72
                        syscall IO.out_string
                        syscall exit
l111:                   push r1
                        
                        call LambdaListRef.reset
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.gen_code.2
Main.gen_code.2:        
                        jmp Main.gen_code.3
Main.gen_code.3:        
                        
                        la r1 <- l112
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.gen_code.4
Main.gen_code.4:        
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        jmp Main.gen_code.5
Main.gen_code.5:        
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l113
                        la r1 <- string73
                        syscall IO.out_string
                        syscall exit
l113:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.gen_code.6
Main.gen_code.6:        
                        jmp Main.gen_code.7
Main.gen_code.7:        
                        
                        la r1 <- l114
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.gen_code.8
Main.gen_code.8:        
                        jmp Main.gen_code.9
Main.gen_code.9:        
                        
                        la r1 <- l115
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.gen_code.10
Main.gen_code.10:       
                        jmp Main.gen_code.11
Main.gen_code.11:       
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l116
                        la r1 <- string74
                        syscall IO.out_string
                        syscall exit
l116:                   push r1
                        
                        call Main.eval_class
                        pop fp
                        pop r0
                        jmp Main.gen_code.12
Main.gen_code.12:       
                        jmp Main.gen_code.13
Main.gen_code.13:       
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l117
                        la r1 <- string75
                        syscall IO.out_string
                        syscall exit
l117:                   push r1
                        
                        call Main.closure_class
                        pop fp
                        pop r0
                        jmp Main.gen_code.14
Main.gen_code.14:       
                        jmp Main.gen_code.15
Main.gen_code.15:       
                        
                        la r1 <- l118
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.gen_code.16
Main.gen_code.16:       
                        jmp Main.gen_code.17
Main.gen_code.17:       
                        
                        la r1 <- l119
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.gen_code.18
Main.gen_code.18:       
                        
                        push fp
                        push r0
                        la r2 <- VarList..new
                        call r2
                        pop r0
                        pop fp
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        jmp Main.gen_code.19
Main.gen_code.19:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l120
                        la r1 <- string76
                        syscall IO.out_string
                        syscall exit
l120:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.gen_code.20
Main.gen_code.20:       
                        jmp Main.gen_code.21
Main.gen_code.21:       
                        
                        la r1 <- l121
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.gen_code.22
Main.gen_code.22:       
                        jmp Main.gen_code.23
Main.gen_code.23:       
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        jmp Main.gen_code.26
Main.gen_code.24:       
                        jmp Main.gen_code.38
Main.gen_code.25:       
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        jmp Main.gen_code.28
Main.gen_code.26:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l122
                        la r1 <- string77
                        syscall IO.out_string
                        syscall exit
l122:                   push r1
                        
                        call LambdaListRef.isNil
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.gen_code.27
Main.gen_code.27:       
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        li r1 <- 1
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Bool..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Main.gen_code.25
                        jmp Main.gen_code.24
Main.gen_code.28:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l123
                        la r1 <- string78
                        syscall IO.out_string
                        syscall exit
l123:                   push r1
                        
                        call LambdaListRef.headE
                        pop fp
                        pop r0
                        st fp[-3] <- r1
                        jmp Main.gen_code.29
Main.gen_code.29:       
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        jmp Main.gen_code.30
Main.gen_code.30:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l124
                        la r1 <- string79
                        syscall IO.out_string
                        syscall exit
l124:                   push r1
                        
                        call LambdaListRef.headC
                        pop fp
                        pop r0
                        st fp[-5] <- r1
                        jmp Main.gen_code.31
Main.gen_code.31:       
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        jmp Main.gen_code.32
Main.gen_code.32:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l125
                        la r1 <- string80
                        syscall IO.out_string
                        syscall exit
l125:                   push r1
                        
                        call LambdaListRef.headN
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp Main.gen_code.33
Main.gen_code.33:       
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        jmp Main.gen_code.34
Main.gen_code.34:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l126
                        la r1 <- string81
                        syscall IO.out_string
                        syscall exit
l126:                   push r1
                        
                        call LambdaListRef.removeHead
                        pop fp
                        pop r0
                        jmp Main.gen_code.35
Main.gen_code.35:       
                        
                        ld r1 <- fp[-2]
                        st fp[-4] <- r1
                        
                        ld r1 <- fp[-3]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[-5]
                        st fp[-1] <- r1
                        jmp Main.gen_code.36
Main.gen_code.36:       
                        
                        push r0
                        push fp
                        ld r1 <- fp[-4]
                        push r1
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l127
                        la r1 <- string82
                        syscall IO.out_string
                        syscall exit
l127:                   push r1
                        
                        call Lambda.gen_closure_code
                        pop fp
                        pop r0
                        jmp Main.gen_code.37
Main.gen_code.37:       
                        jmp Main.gen_code.23
Main.gen_code.38:       
                        
                        la r1 <- l114
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Main.gen_code.39
Main.gen_code.39:       
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.gen_code.end
Main.gen_code.end:      
                        pop ra
                        li r2 <- 8
                        add sp <- sp r2
                        return
                        
Main.main:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 5
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.main.0:            
                        jmp Main.main.1
Main.main.1:            
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l128
                        la r1 <- string83
                        syscall IO.out_string
                        syscall exit
l128:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.2
Main.main.2:            
                        jmp Main.main.3
Main.main.3:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l129
                        la r1 <- string83
                        syscall IO.out_string
                        syscall exit
l129:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.main.4
Main.main.4:            
                        jmp Main.main.5
Main.main.5:            
                        
                        la r1 <- l101
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.main.6
Main.main.6:            
                        jmp Main.main.7
Main.main.7:            
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l130
                        la r1 <- string84
                        syscall IO.out_string
                        syscall exit
l130:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.8
Main.main.8:            
                        jmp Main.main.9
Main.main.9:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l131
                        la r1 <- string84
                        syscall IO.out_string
                        syscall exit
l131:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.main.10
Main.main.10:           
                        jmp Main.main.11
Main.main.11:           
                        
                        la r1 <- l101
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.main.12
Main.main.12:           
                        jmp Main.main.13
Main.main.13:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l132
                        la r1 <- string85
                        syscall IO.out_string
                        syscall exit
l132:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.14
Main.main.14:           
                        jmp Main.main.15
Main.main.15:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l133
                        la r1 <- string85
                        syscall IO.out_string
                        syscall exit
l133:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.main.16
Main.main.16:           
                        jmp Main.main.17
Main.main.17:           
                        
                        la r1 <- l101
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.main.18
Main.main.18:           
                        jmp Main.main.19
Main.main.19:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l134
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l134:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.20
Main.main.20:           
                        jmp Main.main.21
Main.main.21:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l135
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l135:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.22
Main.main.22:           
                        jmp Main.main.23
Main.main.23:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l136
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l136:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.24
Main.main.24:           
                        jmp Main.main.25
Main.main.25:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l137
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l137:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.26
Main.main.26:           
                        jmp Main.main.27
Main.main.27:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l138
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l138:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.28
Main.main.28:           
                        jmp Main.main.29
Main.main.29:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l139
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l139:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.30
Main.main.30:           
                        jmp Main.main.31
Main.main.31:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        mov r1 <- r0
                        bnz r1 l140
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l140:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.32
Main.main.32:           
                        jmp Main.main.33
Main.main.33:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l141
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l141:                   push r1
                        
                        call Main.beta_reduce
                        pop fp
                        pop r0
                        jmp Main.main.34
Main.main.34:           
                        jmp Main.main.35
Main.main.35:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l142
                        la r1 <- string87
                        syscall IO.out_string
                        syscall exit
l142:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.36
Main.main.36:           
                        jmp Main.main.37
Main.main.37:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l143
                        la r1 <- string87
                        syscall IO.out_string
                        syscall exit
l143:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.38
Main.main.38:           
                        jmp Main.main.39
Main.main.39:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l144
                        la r1 <- string87
                        syscall IO.out_string
                        syscall exit
l144:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.40
Main.main.40:           
                        jmp Main.main.41
Main.main.41:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l145
                        la r1 <- string87
                        syscall IO.out_string
                        syscall exit
l145:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.42
Main.main.42:           
                        jmp Main.main.43
Main.main.43:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l146
                        la r1 <- string87
                        syscall IO.out_string
                        syscall exit
l146:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.44
Main.main.44:           
                        jmp Main.main.45
Main.main.45:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l147
                        la r1 <- string87
                        syscall IO.out_string
                        syscall exit
l147:                   push r1
                        
                        call Main.beta_reduce
                        pop fp
                        pop r0
                        jmp Main.main.46
Main.main.46:           
                        jmp Main.main.47
Main.main.47:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l148
                        la r1 <- string88
                        syscall IO.out_string
                        syscall exit
l148:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.48
Main.main.48:           
                        jmp Main.main.49
Main.main.49:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l149
                        la r1 <- string88
                        syscall IO.out_string
                        syscall exit
l149:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.50
Main.main.50:           
                        jmp Main.main.51
Main.main.51:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l150
                        la r1 <- string88
                        syscall IO.out_string
                        syscall exit
l150:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.52
Main.main.52:           
                        jmp Main.main.53
Main.main.53:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l151
                        la r1 <- string88
                        syscall IO.out_string
                        syscall exit
l151:                   push r1
                        
                        call Main.gen_code
                        pop fp
                        pop r0
                        jmp Main.main.54
Main.main.54:           
                        jmp Main.main.55
Main.main.55:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l152
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l152:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.56
Main.main.56:           
                        jmp Main.main.57
Main.main.57:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l153
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l153:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.58
Main.main.58:           
                        jmp Main.main.59
Main.main.59:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l154
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l154:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.60
Main.main.60:           
                        jmp Main.main.61
Main.main.61:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l155
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l155:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.62
Main.main.62:           
                        jmp Main.main.63
Main.main.63:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l156
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l156:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.64
Main.main.64:           
                        jmp Main.main.65
Main.main.65:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l157
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l157:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.66
Main.main.66:           
                        jmp Main.main.67
Main.main.67:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l158
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l158:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.68
Main.main.68:           
                        jmp Main.main.69
Main.main.69:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l159
                        la r1 <- string89
                        syscall IO.out_string
                        syscall exit
l159:                   push r1
                        
                        call Main.gen_code
                        pop fp
                        pop r0
                        jmp Main.main.70
Main.main.70:           
                        jmp Main.main.71
Main.main.71:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l160
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l160:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.72
Main.main.72:           
                        jmp Main.main.73
Main.main.73:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l161
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l161:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.74
Main.main.74:           
                        jmp Main.main.75
Main.main.75:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l162
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l162:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.76
Main.main.76:           
                        jmp Main.main.77
Main.main.77:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l163
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l163:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.78
Main.main.78:           
                        jmp Main.main.79
Main.main.79:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l164
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l164:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.80
Main.main.80:           
                        jmp Main.main.81
Main.main.81:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l165
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l165:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.82
Main.main.82:           
                        jmp Main.main.83
Main.main.83:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l166
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l166:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.84
Main.main.84:           
                        jmp Main.main.85
Main.main.85:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l167
                        la r1 <- string91
                        syscall IO.out_string
                        syscall exit
l167:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.86
Main.main.86:           
                        jmp Main.main.87
Main.main.87:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l168
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l168:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.88
Main.main.88:           
                        jmp Main.main.89
Main.main.89:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l169
                        la r1 <- string91
                        syscall IO.out_string
                        syscall exit
l169:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.90
Main.main.90:           
                        jmp Main.main.91
Main.main.91:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l170
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l170:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.92
Main.main.92:           
                        jmp Main.main.93
Main.main.93:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l171
                        la r1 <- string91
                        syscall IO.out_string
                        syscall exit
l171:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.94
Main.main.94:           
                        jmp Main.main.95
Main.main.95:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l172
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l172:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.96
Main.main.96:           
                        jmp Main.main.97
Main.main.97:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l173
                        la r1 <- string91
                        syscall IO.out_string
                        syscall exit
l173:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.98
Main.main.98:           
                        jmp Main.main.99
Main.main.99:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l174
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l174:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.100
Main.main.100:          
                        jmp Main.main.101
Main.main.101:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l175
                        la r1 <- string91
                        syscall IO.out_string
                        syscall exit
l175:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.102
Main.main.102:          
                        jmp Main.main.103
Main.main.103:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l176
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l176:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.104
Main.main.104:          
                        jmp Main.main.105
Main.main.105:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l177
                        la r1 <- string90
                        syscall IO.out_string
                        syscall exit
l177:                   push r1
                        
                        call Main.gen_code
                        pop fp
                        pop r0
                        jmp Main.main.106
Main.main.106:          
                        jmp Main.main.107
Main.main.107:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l178
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l178:                   push r1
                        
                        call Term.i
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp Main.main.108
Main.main.108:          
                        jmp Main.main.109
Main.main.109:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l179
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l179:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.110
Main.main.110:          
                        jmp Main.main.111
Main.main.111:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l180
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l180:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.112
Main.main.112:          
                        jmp Main.main.113
Main.main.113:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l181
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l181:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.114
Main.main.114:          
                        jmp Main.main.115
Main.main.115:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l182
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l182:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[-3] <- r1
                        jmp Main.main.116
Main.main.116:          
                        jmp Main.main.117
Main.main.117:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l183
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l183:                   push r1
                        
                        call Term.k
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp Main.main.118
Main.main.118:          
                        jmp Main.main.119
Main.main.119:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l184
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l184:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.120
Main.main.120:          
                        jmp Main.main.121
Main.main.121:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l185
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l185:                   push r1
                        
                        call Term.s
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.122
Main.main.122:          
                        jmp Main.main.123
Main.main.123:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l186
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l186:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.124
Main.main.124:          
                        jmp Main.main.125
Main.main.125:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l187
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l187:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.126
Main.main.126:          
                        jmp Main.main.127
Main.main.127:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l188
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l188:                   push r1
                        
                        call Term.app
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.128
Main.main.128:          
                        jmp Main.main.129
Main.main.129:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l189
                        la r1 <- string92
                        syscall IO.out_string
                        syscall exit
l189:                   push r1
                        
                        call Main.gen_code
                        pop fp
                        pop r0
                        jmp Main.main.130
Main.main.130:          
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.main.end
Main.main.end:          
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
String.concat:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- r0[3]
                        syscall String.concat
                        st r3[3] <- r1
                        mov r1 <- r3
String.concat.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.length:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        ld r1 <- r0[3]
                        syscall String.length
                        st r2[3] <- r1
                        mov r1 <- r2
String.length.end:      
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String.substr:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[3]
                        ld r1 <- r1[3]
                        ld r0 <- r0[3]
                        syscall String.substr
                        bnz r1 l190
                        la r1 <- string93
                        syscall IO.out_string
                        syscall exit
l190:                   st r3[3] <- r1
                        mov r1 <- r3
String.substr.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
VarList.isNil:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
VarList.isNil.0:        
                        
                        la r1 <- true
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarList.isNil.end
VarList.isNil.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarList.head:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
VarList.head.0:         
                        jmp VarList.head.1
VarList.head.1:         
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l191
                        la r1 <- string94
                        syscall IO.out_string
                        syscall exit
l191:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp VarList.head.2
VarList.head.2:         
                        
                        push fp
                        push r0
                        la r2 <- Variable..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarList.head.end
VarList.head.end:       
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarList.tail:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
VarList.tail.0:         
                        jmp VarList.tail.1
VarList.tail.1:         
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l192
                        la r1 <- string95
                        syscall IO.out_string
                        syscall exit
l192:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp VarList.tail.2
VarList.tail.2:         
                        
                        push fp
                        push r0
                        la r2 <- VarList..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarList.tail.end
VarList.tail.end:       
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarList.add:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
VarList.add.0:          
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        mov r1 <- r0
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- VarListNE..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp VarList.add.1
VarList.add.1:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l193
                        la r1 <- string96
                        syscall IO.out_string
                        syscall exit
l193:                   push r1
                        
                        call VarListNE.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp VarList.add.2
VarList.add.2:          
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarList.add.end
VarList.add.end:        
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
VarList.print:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
VarList.print.0:        
                        jmp VarList.print.1
VarList.print.1:        
                        
                        push r0
                        push fp
                        la r1 <- l101
                        push r1
                        mov r1 <- r0
                        bnz r1 l194
                        la r1 <- string97
                        syscall IO.out_string
                        syscall exit
l194:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp VarList.print.2
VarList.print.2:        
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarList.print.end
VarList.print.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarListNE.isNil:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
VarListNE.isNil.0:      
                        
                        la r1 <- false
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarListNE.isNil.end
VarListNE.isNil.end:    
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarListNE.head:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
VarListNE.head.0:       
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarListNE.head.end
VarListNE.head.end:     
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarListNE.tail:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
VarListNE.tail.0:       
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarListNE.tail.end
VarListNE.tail.end:     
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarListNE.print:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
VarListNE.print.0:      
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp VarListNE.print.1
VarListNE.print.1:      
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l195
                        la r1 <- string98
                        syscall IO.out_string
                        syscall exit
l195:                   push r1
                        
                        call Variable.print_self
                        pop fp
                        pop r0
                        jmp VarListNE.print.2
VarListNE.print.2:      
                        jmp VarListNE.print.3
VarListNE.print.3:      
                        
                        la r1 <- l196
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp VarListNE.print.4
VarListNE.print.4:      
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp VarListNE.print.5
VarListNE.print.5:      
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l197
                        la r1 <- string99
                        syscall IO.out_string
                        syscall exit
l197:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[13]
                        call r2
                        pop fp
                        pop r0
                        jmp VarListNE.print.6
VarListNE.print.6:      
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarListNE.print.end
VarListNE.print.end:    
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
VarListNE.init:         
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
VarListNE.init.0:       
                        
                        ld r1 <- fp[3]
                        st r0[3] <- r1
                        
                        ld r1 <- fp[2]
                        st r0[4] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp VarListNE.init.end
VarListNE.init.end:     
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Variable.print_self:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Variable.print_self.0:  
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp Variable.print_self.1
Variable.print_self.1:  
                        
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Variable.print_self.2
Variable.print_self.2:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Variable.print_self.end
Variable.print_self.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Variable.beta:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
Variable.beta.0:        
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Variable.beta.end
Variable.beta.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Variable.substitute:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
Variable.substitute.0:  
                        
                        ld r1 <- fp[3]
                        st fp[-1] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Variable.substitute.1
                        jmp Variable.substitute.2
Variable.substitute.1:  
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Variable.substitute.3
Variable.substitute.2:  
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Variable.substitute.3
Variable.substitute.3:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Variable.substitute.end
Variable.substitute.end:
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
Variable.gen_code:      
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Variable.gen_code.0:    
                        
                        ld r1 <- fp[3]
                        st fp[0] <- r1
                        jmp Variable.gen_code.1
Variable.gen_code.1:    
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        jmp Variable.gen_code.4
Variable.gen_code.2:    
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Variable.gen_code.15
Variable.gen_code.3:    
                        jmp Variable.gen_code.11
Variable.gen_code.4:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l198
                        la r1 <- string100
                        syscall IO.out_string
                        syscall exit
l198:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Variable.gen_code.5
Variable.gen_code.5:    
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Variable.gen_code.6
                        jmp Variable.gen_code.7
Variable.gen_code.6:    
                        
                        la r1 <- false
                        st fp[-1] <- r1
                        jmp Variable.gen_code.8
Variable.gen_code.7:    
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        jmp Variable.gen_code.9
Variable.gen_code.8:    
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Variable.gen_code.3
                        jmp Variable.gen_code.2
Variable.gen_code.9:    
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l199
                        la r1 <- string101
                        syscall IO.out_string
                        syscall exit
l199:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[10]
                        call r2
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp Variable.gen_code.10
Variable.gen_code.10:   
                        
                        mov r1 <- r0
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        li r1 <- 1
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Bool..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        jmp Variable.gen_code.8
Variable.gen_code.11:   
                        
                        la r1 <- l200
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Variable.gen_code.12
Variable.gen_code.12:   
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Variable.gen_code.13
Variable.gen_code.13:   
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l201
                        la r1 <- string102
                        syscall IO.out_string
                        syscall exit
l201:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Variable.gen_code.14
Variable.gen_code.14:   
                        jmp Variable.gen_code.1
Variable.gen_code.15:   
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l202
                        la r1 <- string103
                        syscall IO.out_string
                        syscall exit
l202:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Variable.gen_code.16
Variable.gen_code.16:   
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Variable.gen_code.17
                        jmp Variable.gen_code.18
Variable.gen_code.17:   
                        jmp Variable.gen_code.20
Variable.gen_code.18:   
                        jmp Variable.gen_code.28
Variable.gen_code.19:   
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Variable.gen_code.end
Variable.gen_code.20:   
                        
                        la r1 <- l203
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Variable.gen_code.21
Variable.gen_code.21:   
                        jmp Variable.gen_code.22
Variable.gen_code.22:   
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l204
                        la r1 <- string104
                        syscall IO.out_string
                        syscall exit
l204:                   push r1
                        
                        call Variable.print_self
                        pop fp
                        pop r0
                        jmp Variable.gen_code.23
Variable.gen_code.23:   
                        jmp Variable.gen_code.24
Variable.gen_code.24:   
                        
                        la r1 <- l101
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Variable.gen_code.25
Variable.gen_code.25:   
                        jmp Variable.gen_code.26
Variable.gen_code.26:   
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l205
                        la r1 <- string105
                        syscall IO.out_string
                        syscall exit
l205:                   push r1
                        
                        call Object.abort
                        pop fp
                        pop r0
                        jmp Variable.gen_code.27
Variable.gen_code.27:   
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Variable.gen_code.19
Variable.gen_code.28:   
                        
                        la r1 <- l206
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Variable.gen_code.29
Variable.gen_code.29:   
                        jmp Variable.gen_code.19
Variable.gen_code.end:  
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Variable.init:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Variable.init.0:        
                        
                        ld r1 <- fp[2]
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Variable.init.end
Variable.init.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
                        
the.empty.string:       constant ""
string1:                constant "App"
string2:                constant "Bool"
string3:                constant "Expr"
string4:                constant "IO"
string5:                constant "Int"
string6:                constant "Lambda"
string7:                constant "LambdaList"
string8:                constant "LambdaListNE"
string9:                constant "LambdaListRef"
string10:               constant "Main"
string11:               constant "Object"
string12:               constant "String"
string13:               constant "Term"
string14:               constant "VarList"
string15:               constant "VarListNE"
string16:               constant "Variable"
string17:               constant "abort\n"
string18:               constant "ERROR: 289: Exception: dispatch on void\n"
string19:               constant "ERROR: 291: Exception: dispatch on void\n"
string20:               constant "ERROR: 298: Exception: case without matching branch\n"
string21:               constant "ERROR: 298: Exception: case on void\n"
string22:               constant "ERROR: 299: Exception: dispatch on void\n"
string23:               constant "ERROR: 301: Exception: dispatch on void\n"
string24:               constant "ERROR: 303: Exception: dispatch on void\n"
string25:               constant "ERROR: 308: Exception: dispatch on void\n"
string26:               constant "ERROR: 309: Exception: dispatch on void\n"
string27:               constant "ERROR: 311: Exception: dispatch on void\n"
string28:               constant "ERROR: 317: Exception: dispatch on void\n"
string29:               constant "ERROR: 320: Exception: dispatch on void\n"
string30:               constant "ERROR: 116: Exception: dispatch on void\n"
string31:               constant "ERROR: 117: Exception: dispatch on void\n"
string32:               constant "ERROR: 125: Exception: dispatch on void\n"
string33:               constant "ERROR: 126: Exception: dispatch on void\n"
string34:               constant "ERROR: 134: Exception: dispatch on void\n"
string35:               constant "ERROR: 135: Exception: dispatch on void\n"
string36:               constant "ERROR: 143: Exception: dispatch on void\n"
string37:               constant "ERROR: 144: Exception: dispatch on void\n"
string38:               constant "ERROR: 216: Exception: dispatch on void\n"
string39:               constant "ERROR: 218: Exception: dispatch on void\n"
string40:               constant "ERROR: 234: Exception: dispatch on void\n"
string41:               constant "ERROR: 236: Exception: dispatch on void\n"
string42:               constant "ERROR: 243: Exception: dispatch on void\n"
string43:               constant "ERROR: 245: Exception: dispatch on void\n"
string44:               constant "ERROR: 226: Exception: dispatch on void\n"
string45:               constant "ERROR: 264: Exception: dispatch on void\n"
string46:               constant "ERROR: 46: Exception: dispatch on void\n"
string47:               constant "ERROR: 47: Exception: dispatch on void\n"
string48:               constant "ERROR: 48: Exception: dispatch on void\n"
string49:               constant "ERROR: 49: Exception: dispatch on void\n"
string50:               constant "ERROR: 51: Exception: dispatch on void\n"
string51:               constant "ERROR: 79: Exception: dispatch on void\n"
string52:               constant "ERROR: 80: Exception: dispatch on void\n"
string53:               constant "ERROR: 81: Exception: dispatch on void\n"
string54:               constant "ERROR: 82: Exception: dispatch on void\n"
string55:               constant "ERROR: 92: Exception: dispatch on void\n"
string56:               constant "ERROR: 99: Exception: dispatch on void\n"
string57:               constant "ERROR: 341: Exception: dispatch on void\n"
string58:               constant "ERROR: 346: Exception: dispatch on void\n"
string59:               constant "ERROR: 351: Exception: dispatch on void\n"
string60:               constant "ERROR: 358: Exception: dispatch on void\n"
string61:               constant "ERROR: 359: Exception: dispatch on void\n"
string62:               constant "ERROR: 363: Exception: dispatch on void\n"
string63:               constant "ERROR: 364: Exception: dispatch on void\n"
string64:               constant "ERROR: 365: Exception: dispatch on void\n"
string65:               constant "ERROR: 369: Exception: dispatch on void\n"
string66:               constant "ERROR: 370: Exception: dispatch on void\n"
string67:               constant "ERROR: 371: Exception: dispatch on void\n"
string68:               constant "ERROR: 372: Exception: dispatch on void\n"
string69:               constant "ERROR: 388: Exception: dispatch on void\n"
string70:               constant "ERROR: 394: Exception: dispatch on void\n"
string71:               constant "ERROR: 401: Exception: dispatch on void\n"
string72:               constant "ERROR: 434: Exception: dispatch on void\n"
string73:               constant "ERROR: 437: Exception: dispatch on void\n"
string74:               constant "ERROR: 440: Exception: dispatch on void\n"
string75:               constant "ERROR: 441: Exception: dispatch on void\n"
string76:               constant "ERROR: 444: Exception: dispatch on void\n"
string77:               constant "ERROR: 446: Exception: dispatch on void\n"
string78:               constant "ERROR: 447: Exception: dispatch on void\n"
string79:               constant "ERROR: 448: Exception: dispatch on void\n"
string80:               constant "ERROR: 449: Exception: dispatch on void\n"
string81:               constant "ERROR: 451: Exception: dispatch on void\n"
string82:               constant "ERROR: 452: Exception: dispatch on void\n"
string83:               constant "ERROR: 461: Exception: dispatch on void\n"
string84:               constant "ERROR: 463: Exception: dispatch on void\n"
string85:               constant "ERROR: 465: Exception: dispatch on void\n"
string86:               constant "ERROR: 467: Exception: dispatch on void\n"
string87:               constant "ERROR: 468: Exception: dispatch on void\n"
string88:               constant "ERROR: 469: Exception: dispatch on void\n"
string89:               constant "ERROR: 470: Exception: dispatch on void\n"
string90:               constant "ERROR: 471: Exception: dispatch on void\n"
string91:               constant "ERROR: 472: Exception: dispatch on void\n"
string92:               constant "ERROR: 473: Exception: dispatch on void\n"
string93:               constant "ERROR: 0: Exception: String.substr out of range\n"
string94:               constant "ERROR: 23: Exception: dispatch on void\n"
string95:               constant "ERROR: 24: Exception: dispatch on void\n"
string96:               constant "ERROR: 25: Exception: dispatch on void\n"
string97:               constant "ERROR: 26: Exception: dispatch on void\n"
string98:               constant "ERROR: 36: Exception: dispatch on void\n"
string99:               constant "ERROR: 37: Exception: dispatch on void\n"
string100:              constant "ERROR: 175: Exception: dispatch on void\n"
string101:              constant "ERROR: 178: Exception: dispatch on void\n"
string102:              constant "ERROR: 181: Exception: dispatch on void\n"
string103:              constant "ERROR: 184: Exception: dispatch on void\n"
string104:              constant "ERROR: 186: Exception: dispatch on void\n"
string105:              constant "ERROR: 188: Exception: dispatch on void\n"
                        
eq_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
                        li r3 <- 0
                        beq r1 r3 eq_false
                        beq r2 r3 eq_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 eq_bool
                        li r2 <- 2
                        beq r1 r2 eq_int
                        li r2 <- 6
                        beq r1 r2 eq_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
eq_false:               
                        la r1 <- false
                        jmp eq_end
eq_true:                
                        la r1 <- true
                        jmp eq_end
eq_bool:                
eq_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
le_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
                        li r3 <- 0
                        beq r1 r3 le_false
                        beq r2 r3 le_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 le_bool
                        li r2 <- 2
                        beq r1 r2 le_int
                        li r2 <- 6
                        beq r1 r2 le_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
le_false:               
                        la r1 <- false
                        jmp le_end
le_true:                
                        la r1 <- true
                        jmp le_end
le_bool:                
le_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ble r1 r2 le_true
                        jmp le_false
le_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        ble r1 r2 le_true
                        jmp le_false
le_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
lt_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        li r3 <- 0
                        beq r1 r3 lt_false
                        beq r2 r3 lt_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 lt_bool
                        li r2 <- 2
                        beq r1 r2 lt_int
                        li r2 <- 6
                        beq r1 r2 lt_string
                        
lt_false:               
                        la r1 <- false
                        jmp lt_end
lt_true:                
                        la r1 <- true
                        jmp lt_end
lt_bool:                
lt_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
int0:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 0
int1:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 1
l110:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l207
l207:                   constant "  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n"
l29:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l208
l208:                   constant "\nError: Expr is pure virtual; can't print self\n"
l52:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l209
l209:                   constant "self))"
l108:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l210
l210:                   constant "  get_x() : EvalObject { x };\n"
l63:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l211
l211:                   constant "};\n"
l206:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l212
l212:                   constant "get_x()"
l59:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l213
l213:                   constant "      x <- y;\n"
l49:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l214
l214:                   constant ").init("
l38:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l215
l215:                   constant "\nError: Expr is pure virtual; can't gen_code\n"
l196:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l216
l216:                   constant " "
l55:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l217
l217:                   constant " inherits Closure {\n"
l3:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l218
l218:                   constant "(("
l19:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l219
l219:                   constant "(let x : EvalObject <- "
l43:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l220
l220:                   constant "."
l106:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l221
l221:                   constant "  x : EvalObject;\n"
l28:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l222
l222:                   constant "  esac)"
l41:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l223
l223:                   constant "\\"
l7:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l224
l224:                   constant "))"
l62:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l225
l225:                   constant ";}};\n"
l54:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l226
l226:                   constant "class Closure"
l32:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l227
l227:                   constant "\nError: Expr is pure virtual; can't beta-reduce\n"
l101:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l228
l228:                   constant "\n"
l51:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l229
l229:                   constant "new Closure))"
l35:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l230
l230:                   constant "\nError: Expr is pure virtual; can't substitute\n"
l24:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l231
l231:                   constant " in\n"
l115:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l232
l232:                   constant "(*Generated by lam.cl (Jeff Foster, March 2000)*)\n"
l119:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l233
l233:                   constant "  main() : EvalObject {\n"
l22:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l234
l234:                   constant "     y : EvalObject <- "
l102:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l235
l235:                   constant "class EvalObject inherits IO {\n"
l118:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l236
l236:                   constant "class Main {\n"
l78:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l237
l237:                   constant "x"
l82:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l238
l238:                   constant "y"
l88:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l239
l239:                   constant "z"
l104:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l240
l240:                   constant "class Closure inherits EvalObject {\n"
l103:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l241
l241:                   constant "  eval() : EvalObject { { abort(); self; } };\n"
l96:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l242
l242:                   constant "beta-reduce: "
l109:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l243
l243:                   constant "  init(p : Closure) : Closure {{ parent <- p; self; }};\n"
l107:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l244
l244:                   constant "  get_parent() : Closure { parent };\n"
l21:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l245
l245:                   constant ",\n"
l112:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l246
l246:                   constant "Generating code for "
l47:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l247
l247:                   constant "((new Closure"
l203:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l248
l248:                   constant "Error:  free occurrence of "
l57:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l249
l249:                   constant "    { out_string(\"Applying closure "
l200:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l250
l250:                   constant "get_parent()."
l56:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l251
l251:                   constant "  apply(y : EvalObject) : EvalObject {\n"
l105:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l252
l252:                   constant "  parent : Closure;\n"
l121:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l253
l253:                   constant "\n};\n};\n"
l25:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l254
l254:                   constant "  case x of\n"
l114:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l255
l255:                   constant "\n------------------cut here------------------\n"
l58:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l256
l256:                   constant "\\n\");\n"
l99:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l257
l257:                   constant " =>\n"
l5:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l258
l258:                   constant ")@("
l27:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l259
l259:                   constant "    o : Object => { abort(); new EvalObject; };\n"
l26:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l260
l260:                   constant "    c : Closure => c.apply(y);\n"
true:                   constant 0
                        constant 4
                        constant Bool..vtable
                        constant 1
false:                  constant 0
                        constant 4
                        constant Bool..vtable
                        constant 0
                        
start:                  
                        la r2 <- Main..new
                        push fp
                        call r2
                        push fp
                        push r1
                        la r2 <- Main.main
                        call r2
                        syscall exit
