11
21
VarList
inherits
21
IO
5
method
22
isNil
0
22
Bool
22
true
method
23
head
0
23
Variable
23
block
2
23
self_dispatch
23
abort
0
23
new
23
Variable
method
24
tail
0
24
VarList
24
block
2
24
self_dispatch
24
abort
0
24
new
24
VarList
method
25
add
1
25
x
25
Variable
25
VarList
25
dynamic_dispatch
25
new
25
VarListNE
25
init
2
25
identifier
25
x
25
identifier
25
self
method
26
print
0
26
SELF_TYPE
26
self_dispatch
26
out_string
1
26
string
\n
29
VarListNE
inherits
29
VarList
7
attribute_no_init
30
x
30
Variable
attribute_no_init
31
rest
31
VarList
method
32
isNil
0
32
Bool
32
false
method
33
head
0
33
Variable
33
identifier
33
x
method
34
tail
0
34
VarList
34
identifier
34
rest
method
35
init
2
35
y
35
Variable
35
r
35
VarList
35
VarListNE
35
block
3
35
assign
35
x
35
identifier
35
y
35
assign
35
rest
35
identifier
35
r
35
identifier
35
self
method
36
print
0
36
SELF_TYPE
36
block
4
36
dynamic_dispatch
36
identifier
36
x
36
print_self
0
36
self_dispatch
36
out_string
1
36
string
 
37
dynamic_dispatch
37
identifier
37
rest
37
print
0
37
identifier
37
self
44
LambdaList
no_inherits
6
method
45
isNil
0
45
Bool
45
true
method
46
headE
0
46
VarList
46
block
2
46
self_dispatch
46
abort
0
46
new
46
VarList
method
47
headC
0
47
Lambda
47
block
2
47
self_dispatch
47
abort
0
47
new
47
Lambda
method
48
headN
0
48
Int
48
block
2
48
self_dispatch
48
abort
0
48
integer
0
method
49
tail
0
49
LambdaList
49
block
2
49
self_dispatch
49
abort
0
49
new
49
LambdaList
method
50
add
3
50
e
50
VarList
50
x
50
Lambda
50
n
50
Int
50
LambdaList
51
dynamic_dispatch
51
new
51
LambdaListNE
51
init
4
51
identifier
51
e
51
identifier
51
x
51
identifier
51
n
51
identifier
51
self
55
LambdaListNE
inherits
55
LambdaList
10
attribute_no_init
56
lam
56
Lambda
attribute_no_init
57
num
57
Int
attribute_no_init
58
env
58
VarList
attribute_no_init
59
rest
59
LambdaList
method
60
isNil
0
60
Bool
60
false
method
61
headE
0
61
VarList
61
identifier
61
env
method
62
headC
0
62
Lambda
62
identifier
62
lam
method
63
headN
0
63
Int
63
identifier
63
num
method
64
tail
0
64
LambdaList
64
identifier
64
rest
method
65
init
4
65
e
65
VarList
65
l
65
Lambda
65
n
65
Int
65
r
65
LambdaList
65
LambdaListNE
66
block
5
67
assign
67
env
67
identifier
67
e
68
assign
68
lam
68
identifier
68
l
69
assign
69
num
69
identifier
69
n
70
assign
70
rest
70
identifier
70
r
71
identifier
71
self
76
LambdaListRef
no_inherits
9
attribute_init
77
nextNum
77
Int
77
integer
0
attribute_no_init
78
l
78
LambdaList
method
79
isNil
0
79
Bool
79
dynamic_dispatch
79
identifier
79
l
79
isNil
0
method
80
headE
0
80
VarList
80
dynamic_dispatch
80
identifier
80
l
80
headE
0
method
81
headC
0
81
Lambda
81
dynamic_dispatch
81
identifier
81
l
81
headC
0
method
82
headN
0
82
Int
82
dynamic_dispatch
82
identifier
82
l
82
headN
0
method
83
reset
0
83
SELF_TYPE
84
block
3
85
assign
85
nextNum
85
integer
0
86
assign
86
l
86
new
86
LambdaList
87
identifier
87
self
method
90
add
2
90
env
90
VarList
90
c
90
Lambda
90
Int
91
block
3
92
assign
92
l
92
dynamic_dispatch
92
identifier
92
l
92
add
3
92
identifier
92
env
92
identifier
92
c
92
identifier
92
nextNum
93
assign
93
nextNum
93
plus
93
identifier
93
nextNum
93
integer
1
94
minus
94
identifier
94
nextNum
94
integer
1
method
97
removeHead
0
97
SELF_TYPE
98
block
2
99
assign
99
l
99
dynamic_dispatch
99
identifier
99
l
99
tail
0
100
identifier
100
self
111
Expr
inherits
111
IO
4
method
114
print_self
0
114
SELF_TYPE
115
block
3
116
self_dispatch
116
out_string
1
116
string
\nError: Expr is pure virtual; can't print self\n
117
self_dispatch
117
abort
0
118
identifier
118
self
method
123
beta
0
123
Expr
124
block
3
125
self_dispatch
125
out_string
1
125
string
\nError: Expr is pure virtual; can't beta-reduce\n
126
self_dispatch
126
abort
0
127
identifier
127
self
method
132
substitute
2
132
x
132
Variable
132
e
132
Expr
132
Expr
133
block
3
134
self_dispatch
134
out_string
1
134
string
\nError: Expr is pure virtual; can't substitute\n
135
self_dispatch
135
abort
0
136
identifier
136
self
method
141
gen_code
2
141
env
141
VarList
141
closures
141
LambdaListRef
141
SELF_TYPE
142
block
3
143
self_dispatch
143
out_string
1
143
string
\nError: Expr is pure virtual; can't gen_code\n
144
self_dispatch
144
abort
0
145
identifier
145
self
153
Variable
inherits
153
Expr
6
attribute_no_init
154
name
154
String
method
156
init
1
156
n
156
String
156
Variable
157
block
2
158
assign
158
name
158
identifier
158
n
159
identifier
159
self
method
163
print_self
0
163
SELF_TYPE
164
self_dispatch
164
out_string
1
164
identifier
164
name
method
167
beta
0
167
Expr
167
identifier
167
self
method
169
substitute
2
169
x
169
Variable
169
e
169
Expr
169
Expr
170
if
170
eq
170
identifier
170
x
170
identifier
170
self
170
identifier
170
e
170
identifier
170
self
method
173
gen_code
2
173
env
173
VarList
173
closures
173
LambdaListRef
173
SELF_TYPE
174
let
1
let_binding_init
174
cur_env
174
VarList
174
identifier
174
env
175
block
2
175
while
175
if
175
dynamic_dispatch
175
identifier
175
cur_env
175
isNil
0
176
false
178
not
178
eq
178
dynamic_dispatch
178
identifier
178
cur_env
178
head
0
178
identifier
178
self
180
block
2
180
self_dispatch
180
out_string
1
180
string
get_parent().
181
assign
181
cur_env
181
dynamic_dispatch
181
identifier
181
cur_env
181
tail
0
184
if
184
dynamic_dispatch
184
identifier
184
cur_env
184
isNil
0
185
block
5
185
self_dispatch
185
out_string
1
185
string
Error:  free occurrence of 
186
self_dispatch
186
print_self
0
187
self_dispatch
187
out_string
1
187
string
\n
188
self_dispatch
188
abort
0
189
identifier
189
self
192
self_dispatch
192
out_string
1
192
string
get_x()
201
Lambda
inherits
201
Expr
9
attribute_no_init
202
arg
202
Variable
attribute_no_init
203
body
203
Expr
method
205
init
2
205
a
205
Variable
205
b
205
Expr
205
Lambda
206
block
3
207
assign
207
arg
207
identifier
207
a
208
assign
208
body
208
identifier
208
b
209
identifier
209
self
method
213
print_self
0
213
SELF_TYPE
214
block
5
215
self_dispatch
215
out_string
1
215
string
\\
216
dynamic_dispatch
216
identifier
216
arg
216
print_self
0
217
self_dispatch
217
out_string
1
217
string
.
218
dynamic_dispatch
218
identifier
218
body
218
print_self
0
219
identifier
219
self
method
223
beta
0
223
Expr
223
identifier
223
self
method
225
apply
1
225
actual
225
Expr
225
Expr
226
dynamic_dispatch
226
identifier
226
body
226
substitute
2
226
identifier
226
arg
226
identifier
226
actual
method
230
substitute
2
230
x
230
Variable
230
e
230
Expr
230
Expr
231
if
231
eq
231
identifier
231
x
231
identifier
231
arg
232
identifier
232
self
234
let
2
let_binding_init
234
new_body
234
Expr
234
dynamic_dispatch
234
identifier
234
body
234
substitute
2
234
identifier
234
x
234
identifier
234
e
let_binding_init
235
new_lam
235
Lambda
235
new
235
Lambda
236
dynamic_dispatch
236
identifier
236
new_lam
236
init
2
236
identifier
236
arg
236
identifier
236
new_body
method
240
gen_code
2
240
env
240
VarList
240
closures
240
LambdaListRef
240
SELF_TYPE
241
block
5
242
self_dispatch
242
out_string
1
242
string
((new Closure
243
self_dispatch
243
out_int
1
243
dynamic_dispatch
243
identifier
243
closures
243
add
2
243
identifier
243
env
243
identifier
243
self
244
self_dispatch
244
out_string
1
244
string
).init(
245
if
245
dynamic_dispatch
245
identifier
245
env
245
isNil
0
246
self_dispatch
246
out_string
1
246
string
new Closure))
248
self_dispatch
248
out_string
1
248
string
self))
249
identifier
249
self
method
253
gen_closure_code
3
253
n
253
Int
253
env
253
VarList
254
closures
254
LambdaListRef
254
SELF_TYPE
255
block
11
256
self_dispatch
256
out_string
1
256
string
class Closure
257
self_dispatch
257
out_int
1
257
identifier
257
n
258
self_dispatch
258
out_string
1
258
string
 inherits Closure {\n
259
self_dispatch
259
out_string
1
259
string
  apply(y : EvalObject) : EvalObject {\n
260
self_dispatch
260
out_string
1
260
string
    { out_string(\"Applying closure 
261
self_dispatch
261
out_int
1
261
identifier
261
n
262
self_dispatch
262
out_string
1
262
string
\\n\");\n
263
self_dispatch
263
out_string
1
263
string
      x <- y;\n
264
dynamic_dispatch
264
identifier
264
body
264
gen_code
2
264
dynamic_dispatch
264
identifier
264
env
264
add
1
264
identifier
264
arg
264
identifier
264
closures
265
self_dispatch
265
out_string
1
265
string
;}};\n
266
self_dispatch
266
out_string
1
266
string
};\n
274
App
inherits
274
Expr
7
attribute_no_init
275
fun
275
Expr
attribute_no_init
276
arg
276
Expr
method
278
init
2
278
f
278
Expr
278
a
278
Expr
278
App
279
block
3
280
assign
280
fun
280
identifier
280
f
281
assign
281
arg
281
identifier
281
a
282
identifier
282
self
method
286
print_self
0
286
SELF_TYPE
287
block
6
288
self_dispatch
288
out_string
1
288
string
((
289
dynamic_dispatch
289
identifier
289
fun
289
print_self
0
290
self_dispatch
290
out_string
1
290
string
)@(
291
dynamic_dispatch
291
identifier
291
arg
291
print_self
0
292
self_dispatch
292
out_string
1
292
string
))
293
identifier
293
self
method
297
beta
0
297
Expr
298
case
298
identifier
298
fun
2
299
l
299
Lambda
299
dynamic_dispatch
299
identifier
299
l
299
apply
1
299
identifier
299
arg
300
e
300
Expr
301
let
2
let_binding_init
301
new_fun
301
Expr
301
dynamic_dispatch
301
identifier
301
fun
301
beta
0
let_binding_init
302
new_app
302
App
302
new
302
App
303
dynamic_dispatch
303
identifier
303
new_app
303
init
2
303
identifier
303
new_fun
303
identifier
303
arg
method
307
substitute
2
307
x
307
Variable
307
e
307
Expr
307
Expr
308
let
3
let_binding_init
308
new_fun
308
Expr
308
dynamic_dispatch
308
identifier
308
fun
308
substitute
2
308
identifier
308
x
308
identifier
308
e
let_binding_init
309
new_arg
309
Expr
309
dynamic_dispatch
309
identifier
309
arg
309
substitute
2
309
identifier
309
x
309
identifier
309
e
let_binding_init
310
new_app
310
App
310
new
310
App
311
dynamic_dispatch
311
identifier
311
new_app
311
init
2
311
identifier
311
new_fun
311
identifier
311
new_arg
method
314
gen_code
2
314
env
314
VarList
314
closures
314
LambdaListRef
314
SELF_TYPE
315
block
10
316
self_dispatch
316
out_string
1
316
string
(let x : EvalObject <- 
317
dynamic_dispatch
317
identifier
317
fun
317
gen_code
2
317
identifier
317
env
317
identifier
317
closures
318
self_dispatch
318
out_string
1
318
string
,\n
319
self_dispatch
319
out_string
1
319
string
     y : EvalObject <- 
320
dynamic_dispatch
320
identifier
320
arg
320
gen_code
2
320
identifier
320
env
320
identifier
320
closures
321
self_dispatch
321
out_string
1
321
string
 in\n
322
self_dispatch
322
out_string
1
322
string
  case x of\n
323
self_dispatch
323
out_string
1
323
string
    c : Closure => c.apply(y);\n
324
self_dispatch
324
out_string
1
324
string
    o : Object => { abort(); new EvalObject; };\n
325
self_dispatch
325
out_string
1
325
string
  esac)
335
Term
inherits
335
IO
6
method
339
var
1
339
x
339
String
339
Variable
340
let
1
let_binding_init
340
v
340
Variable
340
new
340
Variable
341
dynamic_dispatch
341
identifier
341
v
341
init
1
341
identifier
341
x
method
344
lam
2
344
x
344
Variable
344
e
344
Expr
344
Lambda
345
let
1
let_binding_init
345
l
345
Lambda
345
new
345
Lambda
346
dynamic_dispatch
346
identifier
346
l
346
init
2
346
identifier
346
x
346
identifier
346
e
method
349
app
2
349
e1
349
Expr
349
e2
349
Expr
349
App
350
let
1
let_binding_init
350
a
350
App
350
new
350
App
351
dynamic_dispatch
351
identifier
351
a
351
init
2
351
identifier
351
e1
351
identifier
351
e2
method
357
i
0
357
Expr
358
let
1
let_binding_init
358
x
358
Variable
358
self_dispatch
358
var
1
358
string
x
359
self_dispatch
359
lam
2
359
identifier
359
x
359
identifier
359
x
method
362
k
0
362
Expr
363
let
2
let_binding_init
363
x
363
Variable
363
self_dispatch
363
var
1
363
string
x
let_binding_init
364
y
364
Variable
364
self_dispatch
364
var
1
364
string
y
365
self_dispatch
365
lam
2
365
identifier
365
x
365
self_dispatch
365
lam
2
365
identifier
365
y
365
identifier
365
x
method
368
s
0
368
Expr
369
let
3
let_binding_init
369
x
369
Variable
369
self_dispatch
369
var
1
369
string
x
let_binding_init
370
y
370
Variable
370
self_dispatch
370
var
1
370
string
y
let_binding_init
371
z
371
Variable
371
self_dispatch
371
var
1
371
string
z
372
self_dispatch
372
lam
2
372
identifier
372
x
372
self_dispatch
372
lam
2
372
identifier
372
y
372
self_dispatch
372
lam
2
372
identifier
372
z
372
self_dispatch
372
app
2
372
self_dispatch
372
app
2
372
identifier
372
x
372
identifier
372
z
372
self_dispatch
372
app
2
372
identifier
372
y
372
identifier
372
z
383
Main
inherits
383
Term
5
method
385
beta_reduce
1
385
e
385
Expr
385
Expr
386
block
3
387
self_dispatch
387
out_string
1
387
string
beta-reduce: 
388
dynamic_dispatch
388
identifier
388
e
388
print_self
0
389
let
2
let_binding_init
389
done
389
Bool
389
false
let_binding_no_init
390
new_expr
390
Expr
391
block
3
392
while
392
not
392
identifier
392
done
393
block
2
394
assign
394
new_expr
394
dynamic_dispatch
394
identifier
394
e
394
beta
0
395
if
395
eq
395
identifier
395
new_expr
395
identifier
395
e
396
assign
396
done
396
true
398
block
3
399
assign
399
e
399
identifier
399
new_expr
400
self_dispatch
400
out_string
1
400
string
 =>\n
401
dynamic_dispatch
401
identifier
401
e
401
print_self
0
406
self_dispatch
406
out_string
1
406
string
\n
407
identifier
407
e
method
412
eval_class
0
412
SELF_TYPE
413
block
3
414
self_dispatch
414
out_string
1
414
string
class EvalObject inherits IO {\n
415
self_dispatch
415
out_string
1
415
string
  eval() : EvalObject { { abort(); self; } };\n
416
self_dispatch
416
out_string
1
416
string
};\n
method
420
closure_class
0
420
SELF_TYPE
421
block
8
422
self_dispatch
422
out_string
1
422
string
class Closure inherits EvalObject {\n
423
self_dispatch
423
out_string
1
423
string
  parent : Closure;\n
424
self_dispatch
424
out_string
1
424
string
  x : EvalObject;\n
425
self_dispatch
425
out_string
1
425
string
  get_parent() : Closure { parent };\n
426
self_dispatch
426
out_string
1
426
string
  get_x() : EvalObject { x };\n
427
self_dispatch
427
out_string
1
427
string
  init(p : Closure) : Closure {{ parent <- p; self; }};\n
428
self_dispatch
428
out_string
1
428
string
  apply(y : EvalObject) : EvalObject { { abort(); self; } };\n
429
self_dispatch
429
out_string
1
429
string
};\n
method
433
gen_code
1
433
e
433
Expr
433
SELF_TYPE
434
let
1
let_binding_init
434
cl
434
LambdaListRef
434
dynamic_dispatch
434
new
434
LambdaListRef
434
reset
0
435
block
12
436
self_dispatch
436
out_string
1
436
string
Generating code for 
437
dynamic_dispatch
437
identifier
437
e
437
print_self
0
438
self_dispatch
438
out_string
1
438
string
\n------------------cut here------------------\n
439
self_dispatch
439
out_string
1
439
string
(*Generated by lam.cl (Jeff Foster, March 2000)*)\n
440
self_dispatch
440
eval_class
0
441
self_dispatch
441
closure_class
0
442
self_dispatch
442
out_string
1
442
string
class Main {\n
443
self_dispatch
443
out_string
1
443
string
  main() : EvalObject {\n
444
dynamic_dispatch
444
identifier
444
e
444
gen_code
2
444
new
444
VarList
444
identifier
444
cl
445
self_dispatch
445
out_string
1
445
string
\n};\n};\n
446
while
446
not
446
dynamic_dispatch
446
identifier
446
cl
446
isNil
0
447
let
3
let_binding_init
447
e
447
VarList
447
dynamic_dispatch
447
identifier
447
cl
447
headE
0
let_binding_init
448
c
448
Lambda
448
dynamic_dispatch
448
identifier
448
cl
448
headC
0
let_binding_init
449
n
449
Int
449
dynamic_dispatch
449
identifier
449
cl
449
headN
0
450
block
2
451
dynamic_dispatch
451
identifier
451
cl
451
removeHead
0
452
dynamic_dispatch
452
identifier
452
c
452
gen_closure_code
3
452
identifier
452
n
452
identifier
452
e
452
identifier
452
cl
455
self_dispatch
455
out_string
1
455
string
\n------------------cut here------------------\n
method
459
main
0
459
Int
460
block
13
461
dynamic_dispatch
461
self_dispatch
461
i
0
461
print_self
0
462
self_dispatch
462
out_string
1
462
string
\n
463
dynamic_dispatch
463
self_dispatch
463
k
0
463
print_self
0
464
self_dispatch
464
out_string
1
464
string
\n
465
dynamic_dispatch
465
self_dispatch
465
s
0
465
print_self
0
466
self_dispatch
466
out_string
1
466
string
\n
467
self_dispatch
467
beta_reduce
1
467
self_dispatch
467
app
2
467
self_dispatch
467
app
2
467
self_dispatch
467
app
2
467
self_dispatch
467
s
0
467
self_dispatch
467
k
0
467
self_dispatch
467
i
0
467
self_dispatch
467
i
0
468
self_dispatch
468
beta_reduce
1
468
self_dispatch
468
app
2
468
self_dispatch
468
app
2
468
self_dispatch
468
k
0
468
self_dispatch
468
i
0
468
self_dispatch
468
i
0
469
self_dispatch
469
gen_code
1
469
self_dispatch
469
app
2
469
self_dispatch
469
i
0
469
self_dispatch
469
i
0
470
self_dispatch
470
gen_code
1
470
self_dispatch
470
app
2
470
self_dispatch
470
app
2
470
self_dispatch
470
app
2
470
self_dispatch
470
s
0
470
self_dispatch
470
k
0
470
self_dispatch
470
i
0
470
self_dispatch
470
i
0
471
self_dispatch
471
gen_code
1
471
self_dispatch
471
app
2
471
self_dispatch
471
app
2
471
self_dispatch
471
app
2
471
self_dispatch
471
app
2
471
self_dispatch
471
app
2
471
self_dispatch
471
app
2
471
self_dispatch
471
app
2
471
self_dispatch
471
app
2
471
self_dispatch
471
i
0
471
self_dispatch
471
k
0
471
self_dispatch
471
s
0
471
self_dispatch
471
s
0
472
self_dispatch
472
k
0
472
self_dispatch
472
s
0
472
self_dispatch
472
i
0
472
self_dispatch
472
k
0
472
self_dispatch
472
i
0
473
self_dispatch
473
gen_code
1
473
self_dispatch
473
app
2
473
self_dispatch
473
app
2
473
self_dispatch
473
i
0
473
self_dispatch
473
app
2
473
self_dispatch
473
k
0
473
self_dispatch
473
s
0
473
self_dispatch
473
app
2
473
self_dispatch
473
k
0
473
self_dispatch
473
app
2
473
self_dispatch
473
s
0
473
self_dispatch
473
s
0
474
integer
0
