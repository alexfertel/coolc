                        
Bool..vtable:           
                        constant string1
                        constant Bool..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Cons..vtable:           
                        constant string2
                        constant Cons..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant Cons.isNil
                        constant Cons.head
                        constant Cons.tail
                        constant List.cons
                        constant Cons.init
                        
IO..vtable:             
                        constant string3
                        constant IO..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        
Int..vtable:            
                        constant string4
                        constant Int..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
List..vtable:           
                        constant string5
                        constant List..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant List.isNil
                        constant List.head
                        constant List.tail
                        constant List.cons
                        
Main..vtable:           
                        constant string6
                        constant Main..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Main.print_list
                        constant Main.main
                        
Object..vtable:         
                        constant string7
                        constant Object..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
String..vtable:         
                        constant string8
                        constant String..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant String.concat
                        constant String.length
                        constant String.substr
                        
Bool..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 0
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Bool..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Cons..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 5
                        alloc r0 r0
                        
                        li r2 <- 10
                        st r0[0] <- r2
                        li r2 <- 5
                        st r0[1] <- r2
                        la r2 <- Cons..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        li r1 <- 0
                        st r0[4] <- r1
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO..new:                
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 11
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- IO..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Int..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 1
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Int..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
List..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 12
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- List..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Main..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 13
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Main..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 14
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Object..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 3
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- String..vtable
                        st r0[2] <- r2
                        
                        
                        la r1 <- the.empty.string
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.abort:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        la r1 <- string9
                        syscall IO.out_string
                        syscall exit
Object.abort.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.copy:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        ld r2 <- r0[1]
                        alloc r1 r2
                        push r1
l1:                     bz r2 l2
                        ld r3 <- r0[0]
                        st r1[0] <- r3
                        li r3 <- 1
                        add r0 <- r0 r3
                        add r1 <- r1 r3
                        li r3 <- 1
                        sub r2 <- r2 r3
                        jmp l1
l2:                     
                        pop r1
Object.copy.end:        
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.type_name:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[0]
                        st r1[3] <- r2
Object.type_name.end:   
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Cons.isNil:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Cons.isNil.0:           
                        
                        la r1 <- false
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.isNil.end
Cons.isNil.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Cons.head:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Cons.head.0:            
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.head.end
Cons.head.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Cons.tail:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
Cons.tail.0:            
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.tail.end
Cons.tail.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
List.cons:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
List.cons.0:            
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        mov r1 <- r0
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- Cons..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp List.cons.1
List.cons.1:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l3
                        la r1 <- string10
                        syscall IO.out_string
                        syscall exit
l3:                     push r1
                        
                        call Cons.init
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp List.cons.2
List.cons.2:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp List.cons.end
List.cons.end:          
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
Cons.init:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
Cons.init.0:            
                        
                        ld r1 <- fp[3]
                        st r0[3] <- r1
                        
                        ld r1 <- fp[2]
                        st r0[4] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Cons.init.end
Cons.init.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
IO.in_int:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_int
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_int.end:          
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_string:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_string
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_string.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.out_int:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_int
                        mov r1 <- r0
IO.out_int.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
IO.out_string:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_string
                        mov r1 <- r0
IO.out_string.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
List.isNil:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
List.isNil.0:           
                        
                        la r1 <- true
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp List.isNil.end
List.isNil.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
List.head:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
List.head.0:            
                        jmp List.head.1
List.head.1:            
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l4
                        la r1 <- string11
                        syscall IO.out_string
                        syscall exit
l4:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp List.head.2
List.head.2:            
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp List.head.end
List.head.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
List.tail:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
List.tail.0:            
                        jmp List.tail.1
List.tail.1:            
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l5
                        la r1 <- string12
                        syscall IO.out_string
                        syscall exit
l5:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        jmp List.tail.2
List.tail.2:            
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp List.tail.end
List.tail.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Main.print_list:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.print_list.0:      
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Main.print_list.1
Main.print_list.1:      
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l6
                        la r1 <- string13
                        syscall IO.out_string
                        syscall exit
l6:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.print_list.2
Main.print_list.2:      
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Main.print_list.3
                        jmp Main.print_list.4
Main.print_list.3:      
                        jmp Main.print_list.6
Main.print_list.4:      
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Main.print_list.8
Main.print_list.5:      
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.print_list.end
Main.print_list.6:      
                        
                        la r1 <- l7
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Main.print_list.7
Main.print_list.7:      
                        jmp Main.print_list.5
Main.print_list.8:      
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l8
                        la r1 <- string14
                        syscall IO.out_string
                        syscall exit
l8:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.print_list.9
Main.print_list.9:      
                        jmp Main.print_list.10
Main.print_list.10:     
                        
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        syscall IO.out_int
                        mov r1 <- r0
                        jmp Main.print_list.11
Main.print_list.11:     
                        jmp Main.print_list.12
Main.print_list.12:     
                        
                        la r1 <- l9
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.print_list.13
Main.print_list.13:     
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Main.print_list.14
Main.print_list.14:     
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l10
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l10:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[7]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.print_list.15
Main.print_list.15:     
                        jmp Main.print_list.16
Main.print_list.16:     
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l11
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l11:                    push r1
                        
                        call Main.print_list
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.print_list.17
Main.print_list.17:     
                        jmp Main.print_list.5
Main.print_list.end:    
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
Main.main:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.main.0:            
                        
                        push fp
                        push r0
                        la r2 <- List..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp Main.main.1
Main.main.1:            
                        
                        push r0
                        push fp
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l12
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l12:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.2
Main.main.2:            
                        jmp Main.main.3
Main.main.3:            
                        
                        push r0
                        push fp
                        la r1 <- int2
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l13
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l13:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.4
Main.main.4:            
                        jmp Main.main.5
Main.main.5:            
                        
                        push r0
                        push fp
                        la r1 <- int3
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l14
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l14:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.6
Main.main.6:            
                        jmp Main.main.7
Main.main.7:            
                        
                        push r0
                        push fp
                        la r1 <- int4
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l15
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l15:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.8
Main.main.8:            
                        jmp Main.main.9
Main.main.9:            
                        
                        push r0
                        push fp
                        la r1 <- int5
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l16
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l16:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st r0[3] <- r1
                        jmp Main.main.10
Main.main.10:           
                        jmp Main.main.11
Main.main.11:           
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp Main.main.14
Main.main.12:           
                        
                        li r1 <- 0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.main.end
Main.main.13:           
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp Main.main.16
Main.main.14:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l17
                        la r1 <- string17
                        syscall IO.out_string
                        syscall exit
l17:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.15
Main.main.15:           
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        li r1 <- 1
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Bool..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Main.main.13
                        jmp Main.main.12
Main.main.16:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l18
                        la r1 <- string18
                        syscall IO.out_string
                        syscall exit
l18:                    push r1
                        
                        call Main.print_list
                        pop fp
                        pop r0
                        jmp Main.main.17
Main.main.17:           
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp Main.main.18
Main.main.18:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l19
                        la r1 <- string19
                        syscall IO.out_string
                        syscall exit
l19:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[7]
                        call r2
                        pop fp
                        pop r0
                        st r0[3] <- r1
                        jmp Main.main.19
Main.main.19:           
                        jmp Main.main.11
Main.main.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.concat:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- r0[3]
                        syscall String.concat
                        st r3[3] <- r1
                        mov r1 <- r3
String.concat.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.length:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        ld r1 <- r0[3]
                        syscall String.length
                        st r2[3] <- r1
                        mov r1 <- r2
String.length.end:      
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String.substr:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[3]
                        ld r1 <- r1[3]
                        ld r0 <- r0[3]
                        syscall String.substr
                        bnz r1 l20
                        la r1 <- string20
                        syscall IO.out_string
                        syscall exit
l20:                    st r3[3] <- r1
                        mov r1 <- r3
String.substr.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
                        
the.empty.string:       constant ""
string1:                constant "Bool"
string2:                constant "Cons"
string3:                constant "IO"
string4:                constant "Int"
string5:                constant "List"
string6:                constant "Main"
string7:                constant "Object"
string8:                constant "String"
string9:                constant "abort\n"
string10:               constant "ERROR: 50: Exception: dispatch on void\n"
string11:               constant "ERROR: 35: Exception: dispatch on void\n"
string12:               constant "ERROR: 40: Exception: dispatch on void\n"
string13:               constant "ERROR: 108: Exception: dispatch on void\n"
string14:               constant "ERROR: 110: Exception: dispatch on void\n"
string15:               constant "ERROR: 112: Exception: dispatch on void\n"
string16:               constant "ERROR: 128: Exception: dispatch on void\n"
string17:               constant "ERROR: 129: Exception: dispatch on void\n"
string18:               constant "ERROR: 131: Exception: dispatch on void\n"
string19:               constant "ERROR: 132: Exception: dispatch on void\n"
string20:               constant "ERROR: 0: Exception: String.substr out of range\n"
                        
eq_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
                        li r3 <- 0
                        beq r1 r3 eq_false
                        beq r2 r3 eq_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 eq_bool
                        li r2 <- 2
                        beq r1 r2 eq_int
                        li r2 <- 6
                        beq r1 r2 eq_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
eq_false:               
                        la r1 <- false
                        jmp eq_end
eq_true:                
                        la r1 <- true
                        jmp eq_end
eq_bool:                
eq_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
le_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
                        li r3 <- 0
                        beq r1 r3 le_false
                        beq r2 r3 le_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 le_bool
                        li r2 <- 2
                        beq r1 r2 le_int
                        li r2 <- 6
                        beq r1 r2 le_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
le_false:               
                        la r1 <- false
                        jmp le_end
le_true:                
                        la r1 <- true
                        jmp le_end
le_bool:                
le_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ble r1 r2 le_true
                        jmp le_false
le_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        ble r1 r2 le_true
                        jmp le_false
le_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
lt_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        li r3 <- 0
                        beq r1 r3 lt_false
                        beq r2 r3 lt_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 lt_bool
                        li r2 <- 2
                        beq r1 r2 lt_int
                        li r2 <- 6
                        beq r1 r2 lt_string
                        
lt_false:               
                        la r1 <- false
                        jmp lt_end
lt_true:                
                        la r1 <- true
                        jmp lt_end
lt_bool:                
lt_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
int0:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 0
int1:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 1
int2:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 2
int3:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 3
int4:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 4
int5:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 5
l9:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l21
l21:                    constant " "
l7:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l22
l22:                    constant "\n"
true:                   constant 0
                        constant 4
                        constant Bool..vtable
                        constant 1
false:                  constant 0
                        constant 4
                        constant Bool..vtable
                        constant 0
                        
start:                  
                        la r2 <- Main..new
                        push fp
                        call r2
                        push fp
                        push r1
                        la r2 <- Main.main
                        call r2
                        syscall exit
