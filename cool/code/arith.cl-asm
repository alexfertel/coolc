                        
A..vtable:              
                        constant string1
                        constant A..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant A.value
                        constant A.set_var
                        constant A.method1
                        constant A.method2
                        constant A.method3
                        constant A.method4
                        constant A.method5
                        
A2I..vtable:            
                        constant string2
                        constant A2I..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant A2I.c2i
                        constant A2I.i2c
                        constant A2I.a2i
                        constant A2I.a2i_aux
                        constant A2I.i2a
                        constant A2I.i2a_aux
                        
B..vtable:              
                        constant string3
                        constant B..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant A.value
                        constant A.set_var
                        constant A.method1
                        constant A.method2
                        constant A.method3
                        constant A.method4
                        constant B.method5
                        
Bool..vtable:           
                        constant string4
                        constant Bool..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
C..vtable:              
                        constant string5
                        constant C..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant A.value
                        constant A.set_var
                        constant A.method1
                        constant A.method2
                        constant A.method3
                        constant A.method4
                        constant C.method5
                        constant C.method6
                        
D..vtable:              
                        constant string6
                        constant D..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant A.value
                        constant A.set_var
                        constant A.method1
                        constant A.method2
                        constant A.method3
                        constant A.method4
                        constant B.method5
                        constant D.method7
                        
E..vtable:              
                        constant string7
                        constant E..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant A.value
                        constant A.set_var
                        constant A.method1
                        constant A.method2
                        constant A.method3
                        constant A.method4
                        constant B.method5
                        constant D.method7
                        constant E.method6
                        
IO..vtable:             
                        constant string8
                        constant IO..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        
Int..vtable:            
                        constant string9
                        constant Int..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Main..vtable:           
                        constant string10
                        constant Main..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Main.menu
                        constant Main.prompt
                        constant Main.get_int
                        constant Main.is_even
                        constant Main.class_type
                        constant Main.print
                        constant Main.main
                        
Object..vtable:         
                        constant string11
                        constant Object..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
String..vtable:         
                        constant string12
                        constant String..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant String.concat
                        constant String.length
                        constant String.substr
                        
A..new:                 
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 10
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- A..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        la r1 <- int0
                        st r0[3] <- r1
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
A2I..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 11
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- A2I..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
B..new:                 
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 12
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- B..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        la r1 <- int0
                        st r0[3] <- r1
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Bool..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 0
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Bool..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
C..new:                 
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 13
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- C..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        la r1 <- int0
                        st r0[3] <- r1
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
D..new:                 
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 14
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- D..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        la r1 <- int0
                        st r0[3] <- r1
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
E..new:                 
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 15
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- E..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        la r1 <- int0
                        st r0[3] <- r1
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO..new:                
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 16
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- IO..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Int..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 1
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Int..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Main..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 7
                        alloc r0 r0
                        
                        li r2 <- 17
                        st r0[0] <- r2
                        li r2 <- 7
                        st r0[1] <- r2
                        la r2 <- Main..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        li r1 <- 0
                        st r0[4] <- r1
                        
                        li r1 <- 0
                        st r0[5] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Bool..new
                        call r2
                        pop r0
                        pop fp
                        st r0[6] <- r1
                        
                        
                        
                        
                        la r1 <- true
                        st r0[6] <- r1
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 18
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Object..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 3
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- String..vtable
                        st r0[2] <- r2
                        
                        
                        la r1 <- the.empty.string
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.abort:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        la r1 <- string13
                        syscall IO.out_string
                        syscall exit
Object.abort.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.copy:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        ld r2 <- r0[1]
                        alloc r1 r2
                        push r1
l1:                     bz r2 l2
                        ld r3 <- r0[0]
                        st r1[0] <- r3
                        li r3 <- 1
                        add r0 <- r0 r3
                        add r1 <- r1 r3
                        li r3 <- 1
                        sub r2 <- r2 r3
                        jmp l1
l2:                     
                        pop r1
Object.copy.end:        
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.type_name:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[0]
                        st r1[3] <- r2
Object.type_name.end:   
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
A.value:                
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
A.value.0:              
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A.value.end
A.value.end:            
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
A.set_var:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
A.set_var.0:            
                        
                        ld r1 <- fp[2]
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A.set_var.end
A.set_var.end:          
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
A.method1:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
A.method1.0:            
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A.method1.end
A.method1.end:          
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
A.method2:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A.method2.0:            
                        
                        ld r1 <- fp[3]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- B..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp A.method2.1
A.method2.1:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l3
                        la r1 <- string14
                        syscall IO.out_string
                        syscall exit
l3:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A.method2.2
A.method2.2:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A.method2.end
A.method2.end:          
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
A.method3:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
A.method3.0:            
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        li r1 <- 0
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- C..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp A.method3.1
A.method3.1:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l4
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l4:                     push r1
                        
                        call A.set_var
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A.method3.2
A.method3.2:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A.method3.end
A.method3.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
A.method4:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A.method4.0:            
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[3]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A.method4.1
                        jmp A.method4.2
A.method4.1:            
                        
                        ld r1 <- fp[3]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- D..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp A.method4.4
A.method4.2:            
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[3]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- D..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp A.method4.6
A.method4.3:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A.method4.end
A.method4.4:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l5
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l5:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A.method4.5
A.method4.5:            
                        jmp A.method4.3
A.method4.6:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l6
                        la r1 <- string17
                        syscall IO.out_string
                        syscall exit
l6:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A.method4.7
A.method4.7:            
                        jmp A.method4.3
A.method4.end:          
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
A.method5:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 5
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A.method5.0:            
                        
                        la r1 <- int1
                        st fp[-1] <- r1
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp A.method5.1
A.method5.1:            
                        
                        ld r1 <- fp[0]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        push r0
                        call le_handler
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        ld r1 <- fp[-2]
                        ld r1 <- r1[3]
                        bnz r1 A.method5.3
                        jmp A.method5.2
A.method5.2:            
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- E..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp A.method5.4
A.method5.3:            
                        
                        ld r1 <- fp[-1]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        ld r2 <- fp[-2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp A.method5.1
A.method5.4:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l7
                        la r1 <- string18
                        syscall IO.out_string
                        syscall exit
l7:                     push r1
                        
                        call A.set_var
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A.method5.5
A.method5.5:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A.method5.end
A.method5.end:          
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
A2I.c2i:                
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A2I.c2i.0:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l8
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.1
                        jmp A2I.c2i.2
A2I.c2i.1:              
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp A2I.c2i.3
A2I.c2i.2:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l9
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.4
                        jmp A2I.c2i.5
A2I.c2i.3:              
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A2I.c2i.end
A2I.c2i.4:              
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp A2I.c2i.6
A2I.c2i.5:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l10
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.7
                        jmp A2I.c2i.8
A2I.c2i.6:              
                        jmp A2I.c2i.3
A2I.c2i.7:              
                        
                        la r1 <- int2
                        st fp[0] <- r1
                        jmp A2I.c2i.9
A2I.c2i.8:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l11
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.10
                        jmp A2I.c2i.11
A2I.c2i.9:              
                        jmp A2I.c2i.6
A2I.c2i.10:             
                        
                        la r1 <- int3
                        st fp[0] <- r1
                        jmp A2I.c2i.12
A2I.c2i.11:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l12
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.13
                        jmp A2I.c2i.14
A2I.c2i.12:             
                        jmp A2I.c2i.9
A2I.c2i.13:             
                        
                        la r1 <- int4
                        st fp[0] <- r1
                        jmp A2I.c2i.15
A2I.c2i.14:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l13
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.16
                        jmp A2I.c2i.17
A2I.c2i.15:             
                        jmp A2I.c2i.12
A2I.c2i.16:             
                        
                        la r1 <- int5
                        st fp[0] <- r1
                        jmp A2I.c2i.18
A2I.c2i.17:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l14
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.19
                        jmp A2I.c2i.20
A2I.c2i.18:             
                        jmp A2I.c2i.15
A2I.c2i.19:             
                        
                        la r1 <- int6
                        st fp[0] <- r1
                        jmp A2I.c2i.21
A2I.c2i.20:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l15
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.22
                        jmp A2I.c2i.23
A2I.c2i.21:             
                        jmp A2I.c2i.18
A2I.c2i.22:             
                        
                        la r1 <- int7
                        st fp[0] <- r1
                        jmp A2I.c2i.24
A2I.c2i.23:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l16
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.25
                        jmp A2I.c2i.26
A2I.c2i.24:             
                        jmp A2I.c2i.21
A2I.c2i.25:             
                        
                        la r1 <- int8
                        st fp[0] <- r1
                        jmp A2I.c2i.27
A2I.c2i.26:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l17
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.c2i.28
                        jmp A2I.c2i.29
A2I.c2i.27:             
                        jmp A2I.c2i.24
A2I.c2i.28:             
                        
                        la r1 <- int9
                        st fp[0] <- r1
                        jmp A2I.c2i.30
A2I.c2i.29:             
                        jmp A2I.c2i.31
A2I.c2i.30:             
                        jmp A2I.c2i.27
A2I.c2i.31:             
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l18
                        la r1 <- string19
                        syscall IO.out_string
                        syscall exit
l18:                    push r1
                        
                        call Object.abort
                        pop fp
                        pop r0
                        jmp A2I.c2i.32
A2I.c2i.32:             
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp A2I.c2i.30
A2I.c2i.end:            
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
A2I.i2c:                
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A2I.i2c.0:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.1
                        jmp A2I.i2c.2
A2I.i2c.1:              
                        
                        la r1 <- l8
                        st fp[0] <- r1
                        jmp A2I.i2c.3
A2I.i2c.2:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int1
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.4
                        jmp A2I.i2c.5
A2I.i2c.3:              
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A2I.i2c.end
A2I.i2c.4:              
                        
                        la r1 <- l9
                        st fp[0] <- r1
                        jmp A2I.i2c.6
A2I.i2c.5:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int2
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.7
                        jmp A2I.i2c.8
A2I.i2c.6:              
                        jmp A2I.i2c.3
A2I.i2c.7:              
                        
                        la r1 <- l10
                        st fp[0] <- r1
                        jmp A2I.i2c.9
A2I.i2c.8:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int3
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.10
                        jmp A2I.i2c.11
A2I.i2c.9:              
                        jmp A2I.i2c.6
A2I.i2c.10:             
                        
                        la r1 <- l11
                        st fp[0] <- r1
                        jmp A2I.i2c.12
A2I.i2c.11:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int4
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.13
                        jmp A2I.i2c.14
A2I.i2c.12:             
                        jmp A2I.i2c.9
A2I.i2c.13:             
                        
                        la r1 <- l12
                        st fp[0] <- r1
                        jmp A2I.i2c.15
A2I.i2c.14:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int5
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.16
                        jmp A2I.i2c.17
A2I.i2c.15:             
                        jmp A2I.i2c.12
A2I.i2c.16:             
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp A2I.i2c.18
A2I.i2c.17:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int6
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.19
                        jmp A2I.i2c.20
A2I.i2c.18:             
                        jmp A2I.i2c.15
A2I.i2c.19:             
                        
                        la r1 <- l14
                        st fp[0] <- r1
                        jmp A2I.i2c.21
A2I.i2c.20:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int7
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.22
                        jmp A2I.i2c.23
A2I.i2c.21:             
                        jmp A2I.i2c.18
A2I.i2c.22:             
                        
                        la r1 <- l15
                        st fp[0] <- r1
                        jmp A2I.i2c.24
A2I.i2c.23:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int8
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.25
                        jmp A2I.i2c.26
A2I.i2c.24:             
                        jmp A2I.i2c.21
A2I.i2c.25:             
                        
                        la r1 <- l16
                        st fp[0] <- r1
                        jmp A2I.i2c.27
A2I.i2c.26:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int9
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2c.28
                        jmp A2I.i2c.29
A2I.i2c.27:             
                        jmp A2I.i2c.24
A2I.i2c.28:             
                        
                        la r1 <- l17
                        st fp[0] <- r1
                        jmp A2I.i2c.30
A2I.i2c.29:             
                        jmp A2I.i2c.31
A2I.i2c.30:             
                        jmp A2I.i2c.27
A2I.i2c.31:             
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l19
                        la r1 <- string20
                        syscall IO.out_string
                        syscall exit
l19:                    push r1
                        
                        call Object.abort
                        pop fp
                        pop r0
                        jmp A2I.i2c.32
A2I.i2c.32:             
                        
                        la r1 <- l20
                        st fp[0] <- r1
                        jmp A2I.i2c.30
A2I.i2c.end:            
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
A2I.a2i:                
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A2I.a2i.0:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i.1
A2I.a2i.1:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l21
                        la r1 <- string21
                        syscall IO.out_string
                        syscall exit
l21:                    push r1
                        
                        call String.length
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.2
A2I.a2i.2:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.a2i.3
                        jmp A2I.a2i.4
A2I.a2i.3:              
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp A2I.a2i.5
A2I.a2i.4:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i.6
A2I.a2i.5:              
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A2I.a2i.end
A2I.a2i.6:              
                        
                        push r0
                        push fp
                        la r1 <- int0
                        push r1
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l22
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l22:                    push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.7
A2I.a2i.7:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l23
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.a2i.8
                        jmp A2I.a2i.9
A2I.a2i.8:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i.11
A2I.a2i.9:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i.17
A2I.a2i.10:             
                        jmp A2I.a2i.5
A2I.a2i.11:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l24
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l24:                    push r1
                        
                        call String.length
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.12
A2I.a2i.12:             
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        jmp A2I.a2i.13
A2I.a2i.13:             
                        
                        push r0
                        push fp
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l25
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l25:                    push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.14
A2I.a2i.14:             
                        jmp A2I.a2i.15
A2I.a2i.15:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l26
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l26:                    push r1
                        
                        call A2I.a2i_aux
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.16
A2I.a2i.16:             
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        li r1 <- 0
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp A2I.a2i.10
A2I.a2i.17:             
                        
                        push r0
                        push fp
                        la r1 <- int0
                        push r1
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l27
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l27:                    push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.18
A2I.a2i.18:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l28
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.a2i.19
                        jmp A2I.a2i.20
A2I.a2i.19:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i.22
A2I.a2i.20:             
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i.28
A2I.a2i.21:             
                        jmp A2I.a2i.10
A2I.a2i.22:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l29
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l29:                    push r1
                        
                        call String.length
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.23
A2I.a2i.23:             
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i.24
A2I.a2i.24:             
                        
                        push r0
                        push fp
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l30
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l30:                    push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.25
A2I.a2i.25:             
                        jmp A2I.a2i.26
A2I.a2i.26:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l31
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l31:                    push r1
                        
                        call A2I.a2i_aux
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.27
A2I.a2i.27:             
                        jmp A2I.a2i.21
A2I.a2i.28:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l32
                        la r1 <- string24
                        syscall IO.out_string
                        syscall exit
l32:                    push r1
                        
                        call A2I.a2i_aux
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.a2i.29
A2I.a2i.29:             
                        jmp A2I.a2i.21
A2I.a2i.end:            
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
A2I.a2i_aux:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 6
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A2I.a2i_aux.0:          
                        
                        la r1 <- int0
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.a2i_aux.1
A2I.a2i_aux.1:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l33
                        la r1 <- string25
                        syscall IO.out_string
                        syscall exit
l33:                    push r1
                        
                        call String.length
                        pop fp
                        pop r0
                        st fp[-4] <- r1
                        jmp A2I.a2i_aux.2
A2I.a2i_aux.2:          
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp A2I.a2i_aux.3
A2I.a2i_aux.3:          
                        
                        ld r1 <- fp[0]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[-4]
                        st fp[-2] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        ld r1 <- fp[-2]
                        ld r1 <- r1[3]
                        bnz r1 A2I.a2i_aux.5
                        jmp A2I.a2i_aux.4
A2I.a2i_aux.4:          
                        
                        ld r1 <- fp[-1]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A2I.a2i_aux.end
A2I.a2i_aux.5:          
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        la r1 <- int10
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        jmp A2I.a2i_aux.6
A2I.a2i_aux.6:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l34
                        la r1 <- string26
                        syscall IO.out_string
                        syscall exit
l34:                    push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp A2I.a2i_aux.7
A2I.a2i_aux.7:          
                        jmp A2I.a2i_aux.8
A2I.a2i_aux.8:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        mov r1 <- r0
                        bnz r1 l35
                        la r1 <- string26
                        syscall IO.out_string
                        syscall exit
l35:                    push r1
                        
                        call A2I.c2i
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp A2I.a2i_aux.9
A2I.a2i_aux.9:          
                        
                        ld r2 <- fp[-2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp A2I.a2i_aux.3
A2I.a2i_aux.end:        
                        pop ra
                        li r2 <- 7
                        add sp <- sp r2
                        return
                        
A2I.i2a:                
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A2I.i2a.0:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2a.1
                        jmp A2I.i2a.2
A2I.i2a.1:              
                        
                        la r1 <- l8
                        st fp[0] <- r1
                        jmp A2I.i2a.3
A2I.i2a.2:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        la r1 <- int0
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2a.4
                        jmp A2I.i2a.5
A2I.i2a.3:              
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A2I.i2a.end
A2I.i2a.4:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp A2I.i2a.7
A2I.i2a.5:              
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int_neg1
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp A2I.i2a.9
A2I.i2a.6:              
                        jmp A2I.i2a.3
A2I.i2a.7:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l36
                        la r1 <- string27
                        syscall IO.out_string
                        syscall exit
l36:                    push r1
                        
                        call A2I.i2a_aux
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.i2a.8
A2I.i2a.8:              
                        jmp A2I.i2a.6
A2I.i2a.9:              
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l37
                        la r1 <- string28
                        syscall IO.out_string
                        syscall exit
l37:                    push r1
                        
                        call A2I.i2a_aux
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.i2a.10
A2I.i2a.10:             
                        jmp A2I.i2a.11
A2I.i2a.11:             
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l23
                        bnz r1 l38
                        la r1 <- string28
                        syscall IO.out_string
                        syscall exit
l38:                    push r1
                        
                        call String.concat
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.i2a.12
A2I.i2a.12:             
                        jmp A2I.i2a.6
A2I.i2a.end:            
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
A2I.i2a_aux:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
A2I.i2a_aux.0:          
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 A2I.i2a_aux.1
                        jmp A2I.i2a_aux.2
A2I.i2a_aux.1:          
                        
                        la r1 <- l20
                        st fp[0] <- r1
                        jmp A2I.i2a_aux.3
A2I.i2a_aux.2:          
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int10
                        ld r3 <- r1[3]
                        bnz r3 l39
                        la r1 <- string29
                        syscall IO.out_string
                        syscall exit
l39:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        la r1 <- int10
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r2 <- fp[-2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        jmp A2I.i2a_aux.4
A2I.i2a_aux.3:          
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A2I.i2a_aux.end
A2I.i2a_aux.4:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        mov r1 <- r0
                        bnz r1 l40
                        la r1 <- string30
                        syscall IO.out_string
                        syscall exit
l40:                    push r1
                        
                        call A2I.i2c
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp A2I.i2a_aux.5
A2I.i2a_aux.5:          
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp A2I.i2a_aux.6
A2I.i2a_aux.6:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l41
                        la r1 <- string30
                        syscall IO.out_string
                        syscall exit
l41:                    push r1
                        
                        call A2I.i2a_aux
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.i2a_aux.7
A2I.i2a_aux.7:          
                        jmp A2I.i2a_aux.8
A2I.i2a_aux.8:          
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l42
                        la r1 <- string30
                        syscall IO.out_string
                        syscall exit
l42:                    push r1
                        
                        call String.concat
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp A2I.i2a_aux.9
A2I.i2a_aux.9:          
                        jmp A2I.i2a_aux.3
A2I.i2a_aux.end:        
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
B.method5:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
B.method5.0:            
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- E..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp B.method5.1
B.method5.1:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l43
                        la r1 <- string31
                        syscall IO.out_string
                        syscall exit
l43:                    push r1
                        
                        call A.set_var
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp B.method5.2
B.method5.2:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp B.method5.end
B.method5.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
C.method5:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
C.method5.0:            
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- E..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp C.method5.1
C.method5.1:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l44
                        la r1 <- string32
                        syscall IO.out_string
                        syscall exit
l44:                    push r1
                        
                        call A.set_var
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp C.method5.2
C.method5.2:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp C.method5.end
C.method5.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
C.method6:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
C.method6.0:            
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        li r1 <- 0
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- A..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp C.method6.1
C.method6.1:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l45
                        la r1 <- string33
                        syscall IO.out_string
                        syscall exit
l45:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp C.method6.2
C.method6.2:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp C.method6.end
C.method6.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
D.method7:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
D.method7.0:            
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 D.method7.1
                        jmp D.method7.2
D.method7.1:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        li r1 <- 0
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp D.method7.4
D.method7.2:            
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        la r1 <- int0
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 D.method7.6
                        jmp D.method7.7
D.method7.3:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp D.method7.end
D.method7.4:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l46
                        la r1 <- string34
                        syscall IO.out_string
                        syscall exit
l46:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp D.method7.5
D.method7.5:            
                        jmp D.method7.3
D.method7.6:            
                        
                        la r1 <- true
                        st fp[0] <- r1
                        jmp D.method7.8
D.method7.7:            
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 D.method7.9
                        jmp D.method7.10
D.method7.8:            
                        jmp D.method7.3
D.method7.9:            
                        
                        la r1 <- false
                        st fp[0] <- r1
                        jmp D.method7.11
D.method7.10:           
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        la r1 <- int2
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 D.method7.12
                        jmp D.method7.13
D.method7.11:           
                        jmp D.method7.8
D.method7.12:           
                        
                        la r1 <- false
                        st fp[0] <- r1
                        jmp D.method7.14
D.method7.13:           
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int3
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp D.method7.15
D.method7.14:           
                        jmp D.method7.11
D.method7.15:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l47
                        la r1 <- string35
                        syscall IO.out_string
                        syscall exit
l47:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp D.method7.16
D.method7.16:           
                        jmp D.method7.14
D.method7.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
E.method6:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
E.method6.0:            
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int8
                        ld r3 <- r1[3]
                        bnz r3 l48
                        la r1 <- string36
                        syscall IO.out_string
                        syscall exit
l48:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- A..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp E.method6.1
E.method6.1:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l49
                        la r1 <- string37
                        syscall IO.out_string
                        syscall exit
l49:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp E.method6.2
E.method6.2:            
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp E.method6.end
E.method6.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
IO.in_int:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_int
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_int.end:          
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_string:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_string
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_string.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.out_int:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_int
                        mov r1 <- r0
IO.out_int.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
IO.out_string:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_string
                        mov r1 <- r0
IO.out_string.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Main.menu:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.menu.0:            
                        jmp Main.menu.1
Main.menu.1:            
                        
                        la r1 <- l50
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.2
Main.menu.2:            
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.3
Main.menu.3:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l51
                        la r1 <- string38
                        syscall IO.out_string
                        syscall exit
l51:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.4
Main.menu.4:            
                        jmp Main.menu.5
Main.menu.5:            
                        
                        la r1 <- l52
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.6
Main.menu.6:            
                        jmp Main.menu.7
Main.menu.7:            
                        
                        la r1 <- l53
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.8
Main.menu.8:            
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.9
Main.menu.9:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l54
                        la r1 <- string39
                        syscall IO.out_string
                        syscall exit
l54:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.10
Main.menu.10:           
                        jmp Main.menu.11
Main.menu.11:           
                        
                        la r1 <- l55
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.12
Main.menu.12:           
                        jmp Main.menu.13
Main.menu.13:           
                        
                        la r1 <- l56
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.14
Main.menu.14:           
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.15
Main.menu.15:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l57
                        la r1 <- string40
                        syscall IO.out_string
                        syscall exit
l57:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.16
Main.menu.16:           
                        jmp Main.menu.17
Main.menu.17:           
                        
                        la r1 <- l58
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.18
Main.menu.18:           
                        jmp Main.menu.19
Main.menu.19:           
                        
                        la r1 <- l59
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.20
Main.menu.20:           
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.21
Main.menu.21:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l60
                        la r1 <- string41
                        syscall IO.out_string
                        syscall exit
l60:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.22
Main.menu.22:           
                        jmp Main.menu.23
Main.menu.23:           
                        
                        la r1 <- l61
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.24
Main.menu.24:           
                        jmp Main.menu.25
Main.menu.25:           
                        
                        la r1 <- l62
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.26
Main.menu.26:           
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.27
Main.menu.27:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l63
                        la r1 <- string42
                        syscall IO.out_string
                        syscall exit
l63:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.28
Main.menu.28:           
                        jmp Main.menu.29
Main.menu.29:           
                        
                        la r1 <- l64
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.30
Main.menu.30:           
                        jmp Main.menu.31
Main.menu.31:           
                        
                        la r1 <- l65
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.32
Main.menu.32:           
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.33
Main.menu.33:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l66
                        la r1 <- string43
                        syscall IO.out_string
                        syscall exit
l66:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.34
Main.menu.34:           
                        jmp Main.menu.35
Main.menu.35:           
                        
                        la r1 <- l67
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.36
Main.menu.36:           
                        jmp Main.menu.37
Main.menu.37:           
                        
                        la r1 <- l68
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.38
Main.menu.38:           
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.39
Main.menu.39:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l69
                        la r1 <- string44
                        syscall IO.out_string
                        syscall exit
l69:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.40
Main.menu.40:           
                        jmp Main.menu.41
Main.menu.41:           
                        
                        la r1 <- l70
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.42
Main.menu.42:           
                        jmp Main.menu.43
Main.menu.43:           
                        
                        la r1 <- l71
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.44
Main.menu.44:           
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        jmp Main.menu.45
Main.menu.45:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l72
                        la r1 <- string45
                        syscall IO.out_string
                        syscall exit
l72:                    push r1
                        
                        call Main.print
                        pop fp
                        pop r0
                        jmp Main.menu.46
Main.menu.46:           
                        jmp Main.menu.47
Main.menu.47:           
                        
                        la r1 <- l73
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.48
Main.menu.48:           
                        jmp Main.menu.49
Main.menu.49:           
                        
                        la r1 <- l74
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.50
Main.menu.50:           
                        jmp Main.menu.51
Main.menu.51:           
                        
                        la r1 <- l75
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.menu.52
Main.menu.52:           
                        jmp Main.menu.53
Main.menu.53:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l76
                        la r1 <- string46
                        syscall IO.out_string
                        syscall exit
l76:                    push r1
                        
                        call IO.in_string
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.menu.54
Main.menu.54:           
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.menu.end
Main.menu.end:          
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Main.prompt:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
Main.prompt.0:          
                        jmp Main.prompt.1
Main.prompt.1:          
                        
                        la r1 <- l77
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.prompt.2
Main.prompt.2:          
                        jmp Main.prompt.3
Main.prompt.3:          
                        
                        la r1 <- l78
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.prompt.4
Main.prompt.4:          
                        jmp Main.prompt.5
Main.prompt.5:          
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l79
                        la r1 <- string47
                        syscall IO.out_string
                        syscall exit
l79:                    push r1
                        
                        call IO.in_string
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.prompt.6
Main.prompt.6:          
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.prompt.end
Main.prompt.end:        
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Main.get_int:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.get_int.0:         
                        
                        push fp
                        push r0
                        la r2 <- A2I..new
                        call r2
                        pop r0
                        pop fp
                        st fp[-2] <- r1
                        jmp Main.get_int.1
Main.get_int.1:         
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l80
                        la r1 <- string48
                        syscall IO.out_string
                        syscall exit
l80:                    push r1
                        
                        call Main.prompt
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.get_int.2
Main.get_int.2:         
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[-2]
                        st fp[0] <- r1
                        jmp Main.get_int.3
Main.get_int.3:         
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l81
                        la r1 <- string49
                        syscall IO.out_string
                        syscall exit
l81:                    push r1
                        
                        call A2I.a2i
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.get_int.4
Main.get_int.4:         
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.get_int.end
Main.get_int.end:       
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Main.is_even:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.is_even.0:         
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Main.is_even.1
                        jmp Main.is_even.2
Main.is_even.1:         
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        li r1 <- 0
                        sub r1 <- r1 r2
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp Main.is_even.4
Main.is_even.2:         
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        la r1 <- int0
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Main.is_even.6
                        jmp Main.is_even.7
Main.is_even.3:         
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.is_even.end
Main.is_even.4:         
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l82
                        la r1 <- string50
                        syscall IO.out_string
                        syscall exit
l82:                    push r1
                        
                        call Main.is_even
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.is_even.5
Main.is_even.5:         
                        jmp Main.is_even.3
Main.is_even.6:         
                        
                        la r1 <- true
                        st fp[0] <- r1
                        jmp Main.is_even.8
Main.is_even.7:         
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Main.is_even.9
                        jmp Main.is_even.10
Main.is_even.8:         
                        jmp Main.is_even.3
Main.is_even.9:         
                        
                        la r1 <- false
                        st fp[0] <- r1
                        jmp Main.is_even.11
Main.is_even.10:        
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int2
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp Main.is_even.12
Main.is_even.11:        
                        jmp Main.is_even.8
Main.is_even.12:        
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l83
                        la r1 <- string51
                        syscall IO.out_string
                        syscall exit
l83:                    push r1
                        
                        call Main.is_even
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.is_even.13
Main.is_even.13:        
                        jmp Main.is_even.11
Main.is_even.end:       
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
Main.class_type:        
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        ld r1 <- fp[2]
                        bz r1 l84
                        st fp[0] <- r1
                        ld r1 <- r1[0]
                        
                        
                        
                        
                        
                        
                        
                        li r2 <- 10
                        beq r1 r2 l85
                        li r2 <- 11
                        beq r1 r2 l90
                        li r2 <- 12
                        beq r1 r2 l86
                        li r2 <- 0
                        beq r1 r2 l90
                        li r2 <- 13
                        beq r1 r2 l87
                        li r2 <- 14
                        beq r1 r2 l88
                        li r2 <- 15
                        beq r1 r2 l89
                        li r2 <- 16
                        beq r1 r2 l90
                        li r2 <- 1
                        beq r1 r2 l90
                        li r2 <- 17
                        beq r1 r2 l90
                        li r2 <- 18
                        beq r1 r2 l90
                        li r2 <- 3
                        beq r1 r2 l90
l91:                    
                        la r1 <- string52
                        syscall IO.out_string
                        syscall exit
l84:                    
                        la r1 <- string53
                        syscall IO.out_string
                        syscall exit
                        
l85:                    
                        
                        push r0
                        push fp
                        la r1 <- l93
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l92
l86:                    
                        
                        push r0
                        push fp
                        la r1 <- l94
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l92
l87:                    
                        
                        push r0
                        push fp
                        la r1 <- l95
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l92
l88:                    
                        
                        push r0
                        push fp
                        la r1 <- l96
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l92
l89:                    
                        
                        push r0
                        push fp
                        la r1 <- l97
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l92
l90:                    
                        
                        push r0
                        push fp
                        la r1 <- l98
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l92
l92:                    
Main.class_type.end:    
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
Main.print:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.print.0:           
                        
                        push fp
                        push r0
                        la r2 <- A2I..new
                        call r2
                        pop r0
                        pop fp
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Main.print.1
Main.print.1:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l99
                        la r1 <- string54
                        syscall IO.out_string
                        syscall exit
l99:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.print.2
Main.print.2:           
                        
                        ld r1 <- fp[-2]
                        st fp[0] <- r1
                        jmp Main.print.3
Main.print.3:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l100
                        la r1 <- string54
                        syscall IO.out_string
                        syscall exit
l100:                   push r1
                        
                        call A2I.i2a
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.print.4
Main.print.4:           
                        jmp Main.print.5
Main.print.5:           
                        
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.print.6
Main.print.6:           
                        jmp Main.print.7
Main.print.7:           
                        
                        la r1 <- l101
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        st fp[0] <- r1
                        jmp Main.print.8
Main.print.8:           
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.print.end
Main.print.end:         
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
Main.main:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 6
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- A..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
l102:                   
                        
                        ld r1 <- r0[6]
                        ld r1 <- r1[3]
                        bz r1 l103
                        
                        push r0
                        push fp
                        la r1 <- l104
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l105
                        la r1 <- string55
                        syscall IO.out_string
                        syscall exit
l105:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l106
l107:                   
                        
                        push r0
                        push fp
                        la r1 <- l109
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l108
l106:                   
                        
                        push r0
                        push fp
                        la r1 <- l110
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
l108:                   
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[13]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st r0[3] <- r1
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l111
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l112
l113:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l115
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l116
l117:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l119
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l120
l121:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l123
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l124
l125:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l127
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l128
l129:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l131
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l132
l133:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l135
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l136
l137:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l139
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l140
l141:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l143
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l144
l145:                   
                        push r0
                        push fp
                        
                        ld r1 <- r0[3]
                        push r1
                        la r1 <- l147
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l148
l149:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l151
                        la r1 <- string56
                        syscall IO.out_string
                        syscall exit
l151:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- A..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l152
                        la r1 <- string56
                        syscall IO.out_string
                        syscall exit
l152:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[7]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
                        jmp l150
l148:                   
                        la r1 <- false
                        st r0[6] <- r1
l150:                   
                        jmp l146
l144:                   
                        
                        push fp
                        push r0
                        la r2 <- A..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
l146:                   
                        jmp l142
l140:                   
                        
                        li r1 <- 0
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l153
                        la r1 <- string57
                        syscall IO.out_string
                        syscall exit
l153:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- E..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l154
                        la r1 <- string57
                        syscall IO.out_string
                        syscall exit
l154:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[13]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l155
                        la r1 <- string58
                        syscall IO.out_string
                        syscall exit
l155:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        
                        ld r1 <- fp[0]
                        bnz r1 l156
                        la r1 <- string58
                        syscall IO.out_string
                        syscall exit
l156:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        st fp[-2] <- r1
                        la r1 <- int8
                        ld r1 <- r1[3]
                        ld r2 <- fp[-2]
                        mul r1 <- r2 r1
                        st fp[-2] <- r1
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        ld r2 <- fp[-2]
                        st r1[3] <- r2
                        ld r1 <- r1[3]
                        ld r2 <- fp[-1]
                        sub r1 <- r2 r1
                        st fp[-1] <- r1
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        ld r2 <- fp[-1]
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        la r1 <- l104
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        la r1 <- l157
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        la r1 <- l158
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        
                        push fp
                        push r0
                        la r2 <- A2I..new
                        call r2
                        pop r0
                        pop fp
                        st fp[-2] <- r1
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- fp[-1]
                        push r1
                        
                        ld r1 <- fp[-2]
                        bnz r1 l159
                        la r1 <- string59
                        syscall IO.out_string
                        syscall exit
l159:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        la r1 <- l77
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        ld r1 <- fp[0]
                        st r0[4] <- r1
l142:                   
                        jmp l138
l136:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l160
                        la r1 <- string60
                        syscall IO.out_string
                        syscall exit
l160:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- D..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l161
                        la r1 <- string60
                        syscall IO.out_string
                        syscall exit
l161:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        ld r1 <- r1[3]
                        bnz r1 l162
l163:                   
                        
                        push r0
                        push fp
                        la r1 <- l104
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        la r1 <- l165
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp l164
l162:                   
                        
                        push r0
                        push fp
                        la r1 <- l104
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        la r1 <- l166
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
l164:                   
l138:                   
                        jmp l134
l132:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l167
                        la r1 <- string61
                        syscall IO.out_string
                        syscall exit
l167:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- C..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l168
                        la r1 <- string61
                        syscall IO.out_string
                        syscall exit
l168:                   push r1
                        
                        la r2 <- C..vtable
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
l134:                   
                        jmp l130
l128:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l169
                        la r1 <- string62
                        syscall IO.out_string
                        syscall exit
l169:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- C..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l170
                        la r1 <- string62
                        syscall IO.out_string
                        syscall exit
l170:                   push r1
                        
                        la r2 <- B..vtable
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
l130:                   
                        jmp l126
l124:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l171
                        la r1 <- string63
                        syscall IO.out_string
                        syscall exit
l171:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- C..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l172
                        la r1 <- string63
                        syscall IO.out_string
                        syscall exit
l172:                   push r1
                        
                        la r2 <- A..vtable
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
l126:                   
                        jmp l122
l120:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- A..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l173
                        la r1 <- string64
                        syscall IO.out_string
                        syscall exit
l173:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st r0[5] <- r1
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l174
                        la r1 <- string65
                        syscall IO.out_string
                        syscall exit
l174:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[5]
                        bnz r1 l175
                        la r1 <- string65
                        syscall IO.out_string
                        syscall exit
l175:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- D..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l176
                        la r1 <- string65
                        syscall IO.out_string
                        syscall exit
l176:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[10]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
l122:                   
                        jmp l118
l116:                   
                        
                        
                        ld r1 <- r0[4]
                        bz r1 l177
                        st fp[0] <- r1
                        ld r1 <- r1[0]
                        
                        
                        
                        
                        li r2 <- 10
                        beq r1 r2 l179
                        li r2 <- 11
                        beq r1 r2 l180
                        li r2 <- 12
                        beq r1 r2 l179
                        li r2 <- 0
                        beq r1 r2 l180
                        li r2 <- 13
                        beq r1 r2 l178
                        li r2 <- 14
                        beq r1 r2 l179
                        li r2 <- 15
                        beq r1 r2 l179
                        li r2 <- 16
                        beq r1 r2 l180
                        li r2 <- 1
                        beq r1 r2 l180
                        li r2 <- 17
                        beq r1 r2 l180
                        li r2 <- 18
                        beq r1 r2 l180
                        li r2 <- 3
                        beq r1 r2 l180
l181:                   
                        la r1 <- string66
                        syscall IO.out_string
                        syscall exit
l177:                   
                        la r1 <- string67
                        syscall IO.out_string
                        syscall exit
                        
l178:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- fp[0]
                        bnz r1 l183
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l183:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        ld r1 <- fp[0]
                        bnz r1 l184
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l184:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
                        jmp l182
l179:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- fp[0]
                        bnz r1 l185
                        la r1 <- string69
                        syscall IO.out_string
                        syscall exit
l185:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        ld r1 <- fp[0]
                        bnz r1 l186
                        la r1 <- string69
                        syscall IO.out_string
                        syscall exit
l186:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
                        jmp l182
l180:                   
                        
                        push r0
                        push fp
                        la r1 <- l98
                        push r1
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        
                        push r0
                        push fp
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[2]
                        call r2
                        pop fp
                        pop r0
                        la r1 <- int0
                        jmp l182
l182:                   
l118:                   
                        jmp l114
l112:                   
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        push r0
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- A..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l187
                        la r1 <- string70
                        syscall IO.out_string
                        syscall exit
l187:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st r0[5] <- r1
                        
                        push r0
                        push fp
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[4]
                        bnz r1 l188
                        la r1 <- string71
                        syscall IO.out_string
                        syscall exit
l188:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push r0
                        push fp
                        
                        ld r1 <- r0[5]
                        bnz r1 l189
                        la r1 <- string71
                        syscall IO.out_string
                        syscall exit
l189:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        push r1
                        
                        push fp
                        push r0
                        la r2 <- B..new
                        call r2
                        pop r0
                        pop fp
                        bnz r1 l190
                        la r1 <- string71
                        syscall IO.out_string
                        syscall exit
l190:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        st r0[4] <- r1
l114:                   
                        jmp l102
l103:                   
Main.main.end:          
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
String.concat:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- r0[3]
                        syscall String.concat
                        st r3[3] <- r1
                        mov r1 <- r3
String.concat.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.length:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        ld r1 <- r0[3]
                        syscall String.length
                        st r2[3] <- r1
                        mov r1 <- r2
String.length.end:      
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String.substr:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[3]
                        ld r1 <- r1[3]
                        ld r0 <- r0[3]
                        syscall String.substr
                        bnz r1 l191
                        la r1 <- string72
                        syscall IO.out_string
                        syscall exit
l191:                   st r3[3] <- r1
                        mov r1 <- r3
String.substr.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
                        
the.empty.string:       constant ""
string1:                constant "A"
string2:                constant "A2I"
string3:                constant "B"
string4:                constant "Bool"
string5:                constant "C"
string6:                constant "D"
string7:                constant "E"
string8:                constant "IO"
string9:                constant "Int"
string10:               constant "Main"
string11:               constant "Object"
string12:               constant "String"
string13:               constant "abort\n"
string14:               constant "ERROR: 28: Exception: dispatch on void\n"
string15:               constant "ERROR: 37: Exception: dispatch on void\n"
string16:               constant "ERROR: 47: Exception: dispatch on void\n"
string17:               constant "ERROR: 54: Exception: dispatch on void\n"
string18:               constant "ERROR: 71: Exception: dispatch on void\n"
string19:               constant "ERROR: 168: Exception: dispatch on void\n"
string20:               constant "ERROR: 187: Exception: dispatch on void\n"
string21:               constant "ERROR: 200: Exception: dispatch on void\n"
string22:               constant "ERROR: 201: Exception: dispatch on void\n"
string23:               constant "ERROR: 202: Exception: dispatch on void\n"
string24:               constant "ERROR: 203: Exception: dispatch on void\n"
string25:               constant "ERROR: 214: Exception: dispatch on void\n"
string26:               constant "ERROR: 218: Exception: dispatch on void\n"
string27:               constant "ERROR: 234: Exception: dispatch on void\n"
string28:               constant "ERROR: 235: Exception: dispatch on void\n"
string29:               constant "ERROR: 243: Exception: division by zero\n"
string30:               constant "ERROR: 244: Exception: dispatch on void\n"
string31:               constant "ERROR: 84: Exception: dispatch on void\n"
string32:               constant "ERROR: 106: Exception: dispatch on void\n"
string33:               constant "ERROR: 97: Exception: dispatch on void\n"
string34:               constant "ERROR: 117: Exception: dispatch on void\n"
string35:               constant "ERROR: 121: Exception: dispatch on void\n"
string36:               constant "ERROR: 133: Exception: division by zero\n"
string37:               constant "ERROR: 134: Exception: dispatch on void\n"
string38:               constant "ERROR: 262: Exception: dispatch on void\n"
string39:               constant "ERROR: 265: Exception: dispatch on void\n"
string40:               constant "ERROR: 268: Exception: dispatch on void\n"
string41:               constant "ERROR: 271: Exception: dispatch on void\n"
string42:               constant "ERROR: 274: Exception: dispatch on void\n"
string43:               constant "ERROR: 277: Exception: dispatch on void\n"
string44:               constant "ERROR: 280: Exception: dispatch on void\n"
string45:               constant "ERROR: 283: Exception: dispatch on void\n"
string46:               constant "ERROR: 287: Exception: dispatch on void\n"
string47:               constant "ERROR: 295: Exception: dispatch on void\n"
string48:               constant "ERROR: 302: Exception: dispatch on void\n"
string49:               constant "ERROR: 303: Exception: dispatch on void\n"
string50:               constant "ERROR: 311: Exception: dispatch on void\n"
string51:               constant "ERROR: 314: Exception: dispatch on void\n"
string52:               constant "ERROR: 320: Exception: case without matching branch\n"
string53:               constant "ERROR: 320: Exception: case on void\n"
string54:               constant "ERROR: 333: Exception: dispatch on void\n"
string55:               constant "ERROR: 347: Exception: dispatch on void\n"
string56:               constant "ERROR: 422: Exception: dispatch on void\n"
string57:               constant "ERROR: 398: Exception: dispatch on void\n"
string58:               constant "ERROR: 399: Exception: dispatch on void\n"
string59:               constant "ERROR: 408: Exception: dispatch on void\n"
string60:               constant "ERROR: 381: Exception: dispatch on void\n"
string61:               constant "ERROR: 378: Exception: dispatch on void\n"
string62:               constant "ERROR: 376: Exception: dispatch on void\n"
string63:               constant "ERROR: 374: Exception: dispatch on void\n"
string64:               constant "ERROR: 371: Exception: dispatch on void\n"
string65:               constant "ERROR: 372: Exception: dispatch on void\n"
string66:               constant "ERROR: 361: Exception: case without matching branch\n"
string67:               constant "ERROR: 361: Exception: case on void\n"
string68:               constant "ERROR: 362: Exception: dispatch on void\n"
string69:               constant "ERROR: 363: Exception: dispatch on void\n"
string70:               constant "ERROR: 357: Exception: dispatch on void\n"
string71:               constant "ERROR: 358: Exception: dispatch on void\n"
string72:               constant "ERROR: 0: Exception: String.substr out of range\n"
                        
eq_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
                        li r3 <- 0
                        beq r1 r3 eq_false
                        beq r2 r3 eq_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 eq_bool
                        li r2 <- 2
                        beq r1 r2 eq_int
                        li r2 <- 6
                        beq r1 r2 eq_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
eq_false:               
                        la r1 <- false
                        jmp eq_end
eq_true:                
                        la r1 <- true
                        jmp eq_end
eq_bool:                
eq_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
le_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
                        li r3 <- 0
                        beq r1 r3 le_false
                        beq r2 r3 le_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 le_bool
                        li r2 <- 2
                        beq r1 r2 le_int
                        li r2 <- 6
                        beq r1 r2 le_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
le_false:               
                        la r1 <- false
                        jmp le_end
le_true:                
                        la r1 <- true
                        jmp le_end
le_bool:                
le_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ble r1 r2 le_true
                        jmp le_false
le_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        ble r1 r2 le_true
                        jmp le_false
le_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
lt_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        li r3 <- 0
                        beq r1 r3 lt_false
                        beq r2 r3 lt_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 lt_bool
                        li r2 <- 2
                        beq r1 r2 lt_int
                        li r2 <- 6
                        beq r1 r2 lt_string
                        
lt_false:               
                        la r1 <- false
                        jmp lt_end
lt_true:                
                        la r1 <- true
                        jmp lt_end
lt_bool:                
lt_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
int0:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 0
int1:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 1
int2:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 2
int3:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 3
int4:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 4
int5:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 5
int6:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 6
int7:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 7
int8:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 8
int9:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 9
int10:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 10
int_neg1:               constant 1
                        constant 4
                        constant Int..vtable
                        constant -1
l56:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l192
l192:                   constant "\tTo find the difference between "
l20:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l193
l193:                   constant ""
l157:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l194
l194:                   constant "is equal to "
l58:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l195
l195:                   constant "and another number...enter c:\n"
l96:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l196
l196:                   constant "Class type is now D\n"
l55:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l197
l197:                   constant "...enter b:\n"
l78:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l198
l198:                   constant "Please enter a number...  "
l68:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l199
l199:                   constant "\tTo find out if "
l101:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l200
l200:                   constant " "
l75:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l201
l201:                   constant "\tTo quit...enter q:\n\n"
l62:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l202
l202:                   constant "\tTo square "
l52:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l203
l203:                   constant "...enter a:\n"
l28:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l204
l204:                   constant "+"
l23:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l205
l205:                   constant "-"
l8:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l206
l206:                   constant "0"
l9:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l207
l207:                   constant "1"
l10:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l208
l208:                   constant "2"
l11:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l209
l209:                   constant "3"
l94:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l210
l210:                   constant "Class type is now B\n"
l12:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l211
l211:                   constant "4"
l13:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l212
l212:                   constant "5"
l14:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l213
l213:                   constant "6"
l15:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l214
l214:                   constant "7"
l16:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l215
l215:                   constant "8"
l17:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l216
l216:                   constant "9"
l104:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l217
l217:                   constant "number "
l77:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l218
l218:                   constant "\n"
l158:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l219
l219:                   constant "times 8 with a remainder of "
l111:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l220
l220:                   constant "a"
l115:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l221
l221:                   constant "b"
l119:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l222
l222:                   constant "c"
l123:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l223
l223:                   constant "d"
l127:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l224
l224:                   constant "e"
l131:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l225
l225:                   constant "f"
l135:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l226
l226:                   constant "g"
l139:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l227
l227:                   constant "h"
l143:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l228
l228:                   constant "j"
l147:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l229
l229:                   constant "q"
l97:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l230
l230:                   constant "Class type is now E\n"
l71:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l231
l231:                   constant "\tTo divide "
l53:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l232
l232:                   constant "\tTo negate "
l73:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l233
l233:                   constant "by 8...enter h:\n"
l166:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l234
l234:                   constant "is divisible by 3.\n"
l110:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l235
l235:                   constant "is even!\n"
l95:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l236
l236:                   constant "Class type is now C\n"
l67:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l237
l237:                   constant "...enter f:\n"
l50:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l238
l238:                   constant "\n\tTo add a number to "
l59:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l239
l239:                   constant "\tTo find the factorial of "
l64:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l240
l240:                   constant "...enter e:\n"
l98:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l241
l241:                   constant "Oooops\n"
l93:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l242
l242:                   constant "Class type is now A\n"
l165:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l243
l243:                   constant "is not divisible by 3.\n"
l70:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l244
l244:                   constant "is a multiple of 3...enter g:\n"
l109:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l245
l245:                   constant "is odd!\n"
l61:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l246
l246:                   constant "...enter d:\n"
l74:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l247
l247:                   constant "\tTo get a new number...enter j:\n"
l65:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l248
l248:                   constant "\tTo cube "
true:                   constant 0
                        constant 4
                        constant Bool..vtable
                        constant 1
false:                  constant 0
                        constant 4
                        constant Bool..vtable
                        constant 0
                        
start:                  
                        la r2 <- Main..new
                        push fp
                        call r2
                        push fp
                        push r1
                        la r2 <- Main.main
                        call r2
                        syscall exit
