                        
Bool..vtable:           
                        constant string1
                        constant Bool..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
CellularAutomaton..vtable:
                        constant string2
                        constant CellularAutomaton..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant CellularAutomaton.init
                        constant CellularAutomaton.print
                        constant CellularAutomaton.num_cells
                        constant CellularAutomaton.cell
                        constant CellularAutomaton.cell_left_neighbor
                        constant CellularAutomaton.cell_right_neighbor
                        constant CellularAutomaton.cell_at_next_evolution
                        constant CellularAutomaton.evolve
                        
IO..vtable:             
                        constant string3
                        constant IO..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        
Int..vtable:            
                        constant string4
                        constant Int..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Main..vtable:           
                        constant string5
                        constant Main..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant Main.main
                        
Object..vtable:         
                        constant string6
                        constant Object..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
String..vtable:         
                        constant string7
                        constant String..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant String.concat
                        constant String.length
                        constant String.substr
                        
Bool..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 0
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Bool..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
CellularAutomaton..new: 
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 10
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- CellularAutomaton..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO..new:                
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 11
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- IO..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Int..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 1
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Int..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Main..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 12
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Main..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 13
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Object..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 3
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- String..vtable
                        st r0[2] <- r2
                        
                        
                        la r1 <- the.empty.string
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.abort:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        la r1 <- string8
                        syscall IO.out_string
                        syscall exit
Object.abort.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.copy:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        ld r2 <- r0[1]
                        alloc r1 r2
                        push r1
l1:                     bz r2 l2
                        ld r3 <- r0[0]
                        st r1[0] <- r3
                        li r3 <- 1
                        add r0 <- r0 r3
                        add r1 <- r1 r3
                        li r3 <- 1
                        sub r2 <- r2 r3
                        jmp l1
l2:                     
                        pop r1
Object.copy.end:        
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.type_name:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[0]
                        st r1[3] <- r2
Object.type_name.end:   
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_int:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_int
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_int.end:          
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_string:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_string
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_string.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.out_int:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_int
                        mov r1 <- r0
IO.out_int.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
IO.out_string:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_string
                        mov r1 <- r0
IO.out_string.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
CellularAutomaton.init: 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
CellularAutomaton.init.0:
                        
                        ld r1 <- fp[2]
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.init.end
CellularAutomaton.init.end:
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
CellularAutomaton.print:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
CellularAutomaton.print.0:
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp CellularAutomaton.print.1
CellularAutomaton.print.1:
                        
                        push r0
                        push fp
                        la r1 <- l3
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l4
                        la r1 <- string9
                        syscall IO.out_string
                        syscall exit
l4:                     push r1
                        
                        call String.concat
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.print.2
CellularAutomaton.print.2:
                        jmp CellularAutomaton.print.3
CellularAutomaton.print.3:
                        
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp CellularAutomaton.print.4
CellularAutomaton.print.4:
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.print.end
CellularAutomaton.print.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
CellularAutomaton.num_cells:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
CellularAutomaton.num_cells.0:
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp CellularAutomaton.num_cells.1
CellularAutomaton.num_cells.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l5
                        la r1 <- string10
                        syscall IO.out_string
                        syscall exit
l5:                     push r1
                        
                        call String.length
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.num_cells.2
CellularAutomaton.num_cells.2:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.num_cells.end
CellularAutomaton.num_cells.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
CellularAutomaton.cell: 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
CellularAutomaton.cell.0:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell.1
CellularAutomaton.cell.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l6
                        la r1 <- string11
                        syscall IO.out_string
                        syscall exit
l6:                     push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell.2
CellularAutomaton.cell.2:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell.end
CellularAutomaton.cell.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.cell_left_neighbor:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.cell_left_neighbor.0:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_left_neighbor.1
                        jmp CellularAutomaton.cell_left_neighbor.2
CellularAutomaton.cell_left_neighbor.1:
                        jmp CellularAutomaton.cell_left_neighbor.4
CellularAutomaton.cell_left_neighbor.2:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_left_neighbor.8
CellularAutomaton.cell_left_neighbor.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_left_neighbor.end
CellularAutomaton.cell_left_neighbor.4:
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l7
                        la r1 <- string12
                        syscall IO.out_string
                        syscall exit
l7:                     push r1
                        
                        call CellularAutomaton.num_cells
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_left_neighbor.5
CellularAutomaton.cell_left_neighbor.5:
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_left_neighbor.6
CellularAutomaton.cell_left_neighbor.6:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l8
                        la r1 <- string12
                        syscall IO.out_string
                        syscall exit
l8:                     push r1
                        
                        call CellularAutomaton.cell
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_left_neighbor.7
CellularAutomaton.cell_left_neighbor.7:
                        jmp CellularAutomaton.cell_left_neighbor.3
CellularAutomaton.cell_left_neighbor.8:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l9
                        la r1 <- string13
                        syscall IO.out_string
                        syscall exit
l9:                     push r1
                        
                        call CellularAutomaton.cell
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_left_neighbor.9
CellularAutomaton.cell_left_neighbor.9:
                        jmp CellularAutomaton.cell_left_neighbor.3
CellularAutomaton.cell_left_neighbor.end:
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
CellularAutomaton.cell_right_neighbor:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.cell_right_neighbor.0:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        jmp CellularAutomaton.cell_right_neighbor.1
CellularAutomaton.cell_right_neighbor.1:
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l10
                        la r1 <- string14
                        syscall IO.out_string
                        syscall exit
l10:                    push r1
                        
                        call CellularAutomaton.num_cells
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_right_neighbor.2
CellularAutomaton.cell_right_neighbor.2:
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_right_neighbor.3
                        jmp CellularAutomaton.cell_right_neighbor.4
CellularAutomaton.cell_right_neighbor.3:
                        jmp CellularAutomaton.cell_right_neighbor.6
CellularAutomaton.cell_right_neighbor.4:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_right_neighbor.8
CellularAutomaton.cell_right_neighbor.5:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_right_neighbor.end
CellularAutomaton.cell_right_neighbor.6:
                        
                        push r0
                        push fp
                        la r1 <- int0
                        push r1
                        mov r1 <- r0
                        bnz r1 l11
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l11:                    push r1
                        
                        call CellularAutomaton.cell
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_right_neighbor.7
CellularAutomaton.cell_right_neighbor.7:
                        jmp CellularAutomaton.cell_right_neighbor.5
CellularAutomaton.cell_right_neighbor.8:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l12
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l12:                    push r1
                        
                        call CellularAutomaton.cell
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_right_neighbor.9
CellularAutomaton.cell_right_neighbor.9:
                        jmp CellularAutomaton.cell_right_neighbor.5
CellularAutomaton.cell_right_neighbor.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.cell_at_next_evolution:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.cell_at_next_evolution.0:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.1
CellularAutomaton.cell_at_next_evolution.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l13
                        la r1 <- string17
                        syscall IO.out_string
                        syscall exit
l13:                    push r1
                        
                        call CellularAutomaton.cell
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.2
CellularAutomaton.cell_at_next_evolution.2:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l14
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_at_next_evolution.3
                        jmp CellularAutomaton.cell_at_next_evolution.4
CellularAutomaton.cell_at_next_evolution.3:
                        
                        la r1 <- int1
                        st fp[-1] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.5
CellularAutomaton.cell_at_next_evolution.4:
                        
                        la r1 <- int0
                        st fp[-1] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.5
CellularAutomaton.cell_at_next_evolution.5:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.6
CellularAutomaton.cell_at_next_evolution.6:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l15
                        la r1 <- string18
                        syscall IO.out_string
                        syscall exit
l15:                    push r1
                        
                        call CellularAutomaton.cell_left_neighbor
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.7
CellularAutomaton.cell_at_next_evolution.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l14
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_at_next_evolution.8
                        jmp CellularAutomaton.cell_at_next_evolution.9
CellularAutomaton.cell_at_next_evolution.8:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.10
CellularAutomaton.cell_at_next_evolution.9:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.10
CellularAutomaton.cell_at_next_evolution.10:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.11
CellularAutomaton.cell_at_next_evolution.11:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l16
                        la r1 <- string19
                        syscall IO.out_string
                        syscall exit
l16:                    push r1
                        
                        call CellularAutomaton.cell_right_neighbor
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.12
CellularAutomaton.cell_at_next_evolution.12:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l14
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_at_next_evolution.13
                        jmp CellularAutomaton.cell_at_next_evolution.14
CellularAutomaton.cell_at_next_evolution.13:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.15
CellularAutomaton.cell_at_next_evolution.14:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.15
CellularAutomaton.cell_at_next_evolution.15:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int1
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_at_next_evolution.16
                        jmp CellularAutomaton.cell_at_next_evolution.17
CellularAutomaton.cell_at_next_evolution.16:
                        
                        la r1 <- l14
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.18
CellularAutomaton.cell_at_next_evolution.17:
                        
                        la r1 <- l17
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.18
CellularAutomaton.cell_at_next_evolution.18:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.end
CellularAutomaton.cell_at_next_evolution.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.evolve:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 6
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.evolve.0:
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp CellularAutomaton.evolve.1
CellularAutomaton.evolve.1:
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l18
                        la r1 <- string20
                        syscall IO.out_string
                        syscall exit
l18:                    push r1
                        
                        call CellularAutomaton.num_cells
                        pop fp
                        pop r0
                        st fp[-4] <- r1
                        jmp CellularAutomaton.evolve.2
CellularAutomaton.evolve.2:
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        la r3 <- the.empty.string
                        st r1[3] <- r3
                        st fp[-1] <- r1
                        jmp CellularAutomaton.evolve.3
CellularAutomaton.evolve.3:
                        
                        ld r1 <- fp[0]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[-4]
                        st fp[-2] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        ld r1 <- fp[-2]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.evolve.5
                        jmp CellularAutomaton.evolve.4
CellularAutomaton.evolve.4:
                        
                        ld r1 <- fp[-1]
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.evolve.end
CellularAutomaton.evolve.5:
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        jmp CellularAutomaton.evolve.6
CellularAutomaton.evolve.6:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        mov r1 <- r0
                        bnz r1 l19
                        la r1 <- string21
                        syscall IO.out_string
                        syscall exit
l19:                    push r1
                        
                        call CellularAutomaton.cell_at_next_evolution
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp CellularAutomaton.evolve.7
CellularAutomaton.evolve.7:
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        jmp CellularAutomaton.evolve.8
CellularAutomaton.evolve.8:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l20
                        la r1 <- string21
                        syscall IO.out_string
                        syscall exit
l20:                    push r1
                        
                        call String.concat
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp CellularAutomaton.evolve.9
CellularAutomaton.evolve.9:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.evolve.3
CellularAutomaton.evolve.end:
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
Main.main:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.main.0:            
                        
                        push fp
                        push r0
                        la r2 <- CellularAutomaton..new
                        call r2
                        pop r0
                        pop fp
                        st fp[0] <- r1
                        jmp Main.main.1
Main.main.1:            
                        
                        push r0
                        push fp
                        la r1 <- l21
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l22
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l22:                    push r1
                        
                        call CellularAutomaton.init
                        pop fp
                        pop r0
                        st r0[3] <- r1
                        jmp Main.main.2
Main.main.2:            
                        
                        ld r1 <- r0[3]
                        st fp[0] <- r1
                        jmp Main.main.3
Main.main.3:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l23
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l23:                    push r1
                        
                        call CellularAutomaton.print
                        pop fp
                        pop r0
                        jmp Main.main.4
Main.main.4:            
                        
                        la r1 <- int20
                        st fp[0] <- r1
                        jmp Main.main.5
Main.main.5:            
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        la r1 <- int0
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Main.main.7
                        jmp Main.main.6
Main.main.6:            
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.main.end
Main.main.7:            
                        
                        ld r1 <- r0[3]
                        st fp[-1] <- r1
                        jmp Main.main.8
Main.main.8:            
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l24
                        la r1 <- string24
                        syscall IO.out_string
                        syscall exit
l24:                    push r1
                        
                        call CellularAutomaton.evolve
                        pop fp
                        pop r0
                        jmp Main.main.9
Main.main.9:            
                        
                        ld r1 <- r0[3]
                        st fp[-1] <- r1
                        jmp Main.main.10
Main.main.10:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l25
                        la r1 <- string25
                        syscall IO.out_string
                        syscall exit
l25:                    push r1
                        
                        call CellularAutomaton.print
                        pop fp
                        pop r0
                        jmp Main.main.11
Main.main.11:           
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp Main.main.5
Main.main.end:          
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
String.concat:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- r0[3]
                        syscall String.concat
                        st r3[3] <- r1
                        mov r1 <- r3
String.concat.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.length:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        ld r1 <- r0[3]
                        syscall String.length
                        st r2[3] <- r1
                        mov r1 <- r2
String.length.end:      
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String.substr:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[3]
                        ld r1 <- r1[3]
                        ld r0 <- r0[3]
                        syscall String.substr
                        bnz r1 l26
                        la r1 <- string26
                        syscall IO.out_string
                        syscall exit
l26:                    st r3[3] <- r1
                        mov r1 <- r3
String.substr.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
                        
the.empty.string:       constant ""
string1:                constant "Bool"
string2:                constant "CellularAutomaton"
string3:                constant "IO"
string4:                constant "Int"
string5:                constant "Main"
string6:                constant "Object"
string7:                constant "String"
string8:                constant "abort\n"
string9:                constant "ERROR: 17: Exception: dispatch on void\n"
string10:               constant "ERROR: 23: Exception: dispatch on void\n"
string11:               constant "ERROR: 27: Exception: dispatch on void\n"
string12:               constant "ERROR: 32: Exception: dispatch on void\n"
string13:               constant "ERROR: 34: Exception: dispatch on void\n"
string14:               constant "ERROR: 39: Exception: dispatch on void\n"
string15:               constant "ERROR: 40: Exception: dispatch on void\n"
string16:               constant "ERROR: 42: Exception: dispatch on void\n"
string17:               constant "ERROR: 49: Exception: dispatch on void\n"
string18:               constant "ERROR: 50: Exception: dispatch on void\n"
string19:               constant "ERROR: 51: Exception: dispatch on void\n"
string20:               constant "ERROR: 62: Exception: dispatch on void\n"
string21:               constant "ERROR: 67: Exception: dispatch on void\n"
string22:               constant "ERROR: 83: Exception: dispatch on void\n"
string23:               constant "ERROR: 84: Exception: dispatch on void\n"
string24:               constant "ERROR: 88: Exception: dispatch on void\n"
string25:               constant "ERROR: 89: Exception: dispatch on void\n"
string26:               constant "ERROR: 0: Exception: String.substr out of range\n"
                        
eq_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
                        li r3 <- 0
                        beq r1 r3 eq_false
                        beq r2 r3 eq_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 eq_bool
                        li r2 <- 2
                        beq r1 r2 eq_int
                        li r2 <- 6
                        beq r1 r2 eq_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
eq_false:               
                        la r1 <- false
                        jmp eq_end
eq_true:                
                        la r1 <- true
                        jmp eq_end
eq_bool:                
eq_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
le_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
                        li r3 <- 0
                        beq r1 r3 le_false
                        beq r2 r3 le_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 le_bool
                        li r2 <- 2
                        beq r1 r2 le_int
                        li r2 <- 6
                        beq r1 r2 le_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
le_false:               
                        la r1 <- false
                        jmp le_end
le_true:                
                        la r1 <- true
                        jmp le_end
le_bool:                
le_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ble r1 r2 le_true
                        jmp le_false
le_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        ble r1 r2 le_true
                        jmp le_false
le_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
lt_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        li r3 <- 0
                        beq r1 r3 lt_false
                        beq r2 r3 lt_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 lt_bool
                        li r2 <- 2
                        beq r1 r2 lt_int
                        li r2 <- 6
                        beq r1 r2 lt_string
                        
lt_false:               
                        la r1 <- false
                        jmp lt_end
lt_true:                
                        la r1 <- true
                        jmp lt_end
lt_bool:                
lt_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
int0:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 0
int1:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 1
int20:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 20
l17:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l27
l27:                    constant "."
l3:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l28
l28:                    constant "\n"
l14:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l29
l29:                    constant "X"
l21:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l30
l30:                    constant "         X         "
true:                   constant 0
                        constant 4
                        constant Bool..vtable
                        constant 1
false:                  constant 0
                        constant 4
                        constant Bool..vtable
                        constant 0
                        
start:                  
                        la r2 <- Main..new
                        push fp
                        call r2
                        push fp
                        push r1
                        la r2 <- Main.main
                        call r2
                        syscall exit
