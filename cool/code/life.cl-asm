                        
Board..vtable:          
                        constant string1
                        constant Board..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Board.size_of_board
                        constant Board.board_init
                        
Bool..vtable:           
                        constant string2
                        constant Bool..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
CellularAutomaton..vtable:
                        constant string3
                        constant CellularAutomaton..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Board.size_of_board
                        constant Board.board_init
                        constant CellularAutomaton.init
                        constant CellularAutomaton.print
                        constant CellularAutomaton.num_cells
                        constant CellularAutomaton.cell
                        constant CellularAutomaton.north
                        constant CellularAutomaton.south
                        constant CellularAutomaton.east
                        constant CellularAutomaton.west
                        constant CellularAutomaton.northwest
                        constant CellularAutomaton.northeast
                        constant CellularAutomaton.southeast
                        constant CellularAutomaton.southwest
                        constant CellularAutomaton.neighbors
                        constant CellularAutomaton.cell_at_next_evolution
                        constant CellularAutomaton.evolve
                        constant CellularAutomaton.option
                        constant CellularAutomaton.prompt
                        constant CellularAutomaton.prompt2
                        
IO..vtable:             
                        constant string4
                        constant IO..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        
Int..vtable:            
                        constant string5
                        constant Int..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
Main..vtable:           
                        constant string6
                        constant Main..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant IO.in_int
                        constant IO.in_string
                        constant IO.out_int
                        constant IO.out_string
                        constant Board.size_of_board
                        constant Board.board_init
                        constant CellularAutomaton.init
                        constant CellularAutomaton.print
                        constant CellularAutomaton.num_cells
                        constant CellularAutomaton.cell
                        constant CellularAutomaton.north
                        constant CellularAutomaton.south
                        constant CellularAutomaton.east
                        constant CellularAutomaton.west
                        constant CellularAutomaton.northwest
                        constant CellularAutomaton.northeast
                        constant CellularAutomaton.southeast
                        constant CellularAutomaton.southwest
                        constant CellularAutomaton.neighbors
                        constant CellularAutomaton.cell_at_next_evolution
                        constant CellularAutomaton.evolve
                        constant CellularAutomaton.option
                        constant CellularAutomaton.prompt
                        constant CellularAutomaton.prompt2
                        constant Main.main
                        
Object..vtable:         
                        constant string7
                        constant Object..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        
String..vtable:         
                        constant string8
                        constant String..new
                        constant Object.abort
                        constant Object.copy
                        constant Object.type_name
                        constant String.concat
                        constant String.length
                        constant String.substr
                        
Board..new:             
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 6
                        alloc r0 r0
                        
                        li r2 <- 10
                        st r0[0] <- r2
                        li r2 <- 6
                        st r0[1] <- r2
                        la r2 <- Board..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[5] <- r1
                        
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Bool..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 0
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Bool..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
CellularAutomaton..new: 
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 7
                        alloc r0 r0
                        
                        li r2 <- 11
                        st r0[0] <- r2
                        li r2 <- 7
                        st r0[1] <- r2
                        la r2 <- CellularAutomaton..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[5] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[6] <- r1
                        
                        
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO..new:                
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 12
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- IO..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Int..new:               
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 1
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- Int..vtable
                        st r0[2] <- r2
                        
                        
                        li r1 <- 0
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Main..new:              
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 8
                        alloc r0 r0
                        
                        li r2 <- 13
                        st r0[0] <- r2
                        li r2 <- 8
                        st r0[1] <- r2
                        la r2 <- Main..vtable
                        st r0[2] <- r2
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[3] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[4] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        st r0[5] <- r1
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        st r0[6] <- r1
                        
                        li r1 <- 0
                        st r0[7] <- r1
                        
                        
                        
                        
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 3
                        alloc r0 r0
                        
                        li r2 <- 14
                        st r0[0] <- r2
                        li r2 <- 3
                        st r0[1] <- r2
                        la r2 <- Object..vtable
                        st r0[2] <- r2
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String..new:            
                        mov fp <- sp
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        li r0 <- 4
                        alloc r0 r0
                        
                        li r2 <- 3
                        st r0[0] <- r2
                        li r2 <- 4
                        st r0[1] <- r2
                        la r2 <- String..vtable
                        st r0[2] <- r2
                        
                        
                        la r1 <- the.empty.string
                        st r0[3] <- r1
                        
                        mov r1 <- r0
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.abort:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        la r1 <- string9
                        syscall IO.out_string
                        syscall exit
Object.abort.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.copy:            
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        ld r2 <- r0[1]
                        alloc r1 r2
                        push r1
l1:                     bz r2 l2
                        ld r3 <- r0[0]
                        st r1[0] <- r3
                        li r3 <- 1
                        add r0 <- r0 r3
                        add r1 <- r1 r3
                        li r3 <- 1
                        sub r2 <- r2 r3
                        jmp l1
l2:                     
                        pop r1
Object.copy.end:        
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
Object.type_name:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        
                        ld r2 <- r0[2]
                        
                        ld r2 <- r2[0]
                        st r1[3] <- r2
Object.type_name.end:   
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_int:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_int
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_int.end:          
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.in_string:           
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        syscall IO.in_string
                        st r2[3] <- r1
                        mov r1 <- r2
IO.in_string.end:       
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
IO.out_int:             
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_int
                        mov r1 <- r0
IO.out_int.end:         
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
IO.out_string:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        ld r2 <- fp[2]
                        ld r1 <- r2[3]
                        syscall IO.out_string
                        mov r1 <- r0
IO.out_string.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Board.size_of_board:    
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
Board.size_of_board.0:  
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Board.size_of_board.1
Board.size_of_board.1:  
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l3
                        la r1 <- string10
                        syscall IO.out_string
                        syscall exit
l3:                     push r1
                        
                        call String.length
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Board.size_of_board.2
Board.size_of_board.2:  
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Board.size_of_board.end
Board.size_of_board.end:
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
Board.board_init:       
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Board.board_init.0:     
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp Board.board_init.1
Board.board_init.1:     
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l4
                        la r1 <- string11
                        syscall IO.out_string
                        syscall exit
l4:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[9]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Board.board_init.2
Board.board_init.2:     
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int15
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Board.board_init.3
                        jmp Board.board_init.4
Board.board_init.3:     
                        
                        la r1 <- int3
                        st r0[3] <- r1
                        
                        la r1 <- int5
                        st r0[4] <- r1
                        
                        ld r1 <- fp[0]
                        st r0[5] <- r1
                        jmp Board.board_init.5
Board.board_init.4:     
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int16
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Board.board_init.6
                        jmp Board.board_init.7
Board.board_init.5:     
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Board.board_init.end
Board.board_init.6:     
                        
                        la r1 <- int4
                        st r0[3] <- r1
                        
                        la r1 <- int4
                        st r0[4] <- r1
                        
                        ld r1 <- fp[0]
                        st r0[5] <- r1
                        jmp Board.board_init.8
Board.board_init.7:     
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int20
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Board.board_init.9
                        jmp Board.board_init.10
Board.board_init.8:     
                        jmp Board.board_init.5
Board.board_init.9:     
                        
                        la r1 <- int4
                        st r0[3] <- r1
                        
                        la r1 <- int5
                        st r0[4] <- r1
                        
                        ld r1 <- fp[0]
                        st r0[5] <- r1
                        jmp Board.board_init.11
Board.board_init.10:    
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int21
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Board.board_init.12
                        jmp Board.board_init.13
Board.board_init.11:    
                        jmp Board.board_init.8
Board.board_init.12:    
                        
                        la r1 <- int3
                        st r0[3] <- r1
                        
                        la r1 <- int7
                        st r0[4] <- r1
                        
                        ld r1 <- fp[0]
                        st r0[5] <- r1
                        jmp Board.board_init.14
Board.board_init.13:    
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int25
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Board.board_init.15
                        jmp Board.board_init.16
Board.board_init.14:    
                        jmp Board.board_init.11
Board.board_init.15:    
                        
                        la r1 <- int5
                        st r0[3] <- r1
                        
                        la r1 <- int5
                        st r0[4] <- r1
                        
                        ld r1 <- fp[0]
                        st r0[5] <- r1
                        jmp Board.board_init.17
Board.board_init.16:    
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int28
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Board.board_init.18
                        jmp Board.board_init.19
Board.board_init.17:    
                        jmp Board.board_init.14
Board.board_init.18:    
                        
                        la r1 <- int7
                        st r0[3] <- r1
                        
                        la r1 <- int4
                        st r0[4] <- r1
                        
                        ld r1 <- fp[0]
                        st r0[5] <- r1
                        jmp Board.board_init.20
Board.board_init.19:    
                        
                        la r1 <- int5
                        st r0[3] <- r1
                        
                        la r1 <- int5
                        st r0[4] <- r1
                        
                        ld r1 <- fp[0]
                        st r0[5] <- r1
                        jmp Board.board_init.20
Board.board_init.20:    
                        jmp Board.board_init.17
Board.board_init.end:   
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.init: 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.init.0:
                        
                        ld r1 <- fp[2]
                        st r0[6] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.init.1
CellularAutomaton.init.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l5
                        la r1 <- string12
                        syscall IO.out_string
                        syscall exit
l5:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[10]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.init.2
CellularAutomaton.init.2:
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.init.end
CellularAutomaton.init.end:
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
CellularAutomaton.print:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 6
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.print.0:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        
                        ld r1 <- r0[5]
                        st fp[-4] <- r1
                        jmp CellularAutomaton.print.1
CellularAutomaton.print.1:
                        
                        push r0
                        push fp
                        la r1 <- l6
                        push r1
                        mov r1 <- r0
                        bnz r1 l7
                        la r1 <- string13
                        syscall IO.out_string
                        syscall exit
l7:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.print.2
CellularAutomaton.print.2:
                        jmp CellularAutomaton.print.3
CellularAutomaton.print.3:
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[-4]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.print.5
                        jmp CellularAutomaton.print.4
CellularAutomaton.print.4:
                        jmp CellularAutomaton.print.12
CellularAutomaton.print.5:
                        
                        ld r1 <- fp[0]
                        st fp[-3] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[-2] <- r1
                        
                        ld r1 <- r0[6]
                        st fp[-1] <- r1
                        jmp CellularAutomaton.print.6
CellularAutomaton.print.6:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l8
                        la r1 <- string14
                        syscall IO.out_string
                        syscall exit
l8:                     push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp CellularAutomaton.print.7
CellularAutomaton.print.7:
                        jmp CellularAutomaton.print.8
CellularAutomaton.print.8:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        mov r1 <- r0
                        bnz r1 l9
                        la r1 <- string14
                        syscall IO.out_string
                        syscall exit
l9:                     push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.print.9
CellularAutomaton.print.9:
                        jmp CellularAutomaton.print.10
CellularAutomaton.print.10:
                        
                        push r0
                        push fp
                        la r1 <- l6
                        push r1
                        mov r1 <- r0
                        bnz r1 l10
                        la r1 <- string15
                        syscall IO.out_string
                        syscall exit
l10:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.print.11
CellularAutomaton.print.11:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.print.3
CellularAutomaton.print.12:
                        
                        push r0
                        push fp
                        la r1 <- l6
                        push r1
                        mov r1 <- r0
                        bnz r1 l11
                        la r1 <- string16
                        syscall IO.out_string
                        syscall exit
l11:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.print.13
CellularAutomaton.print.13:
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.print.end
CellularAutomaton.print.end:
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
CellularAutomaton.num_cells:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.num_cells.0:
                        
                        ld r1 <- r0[6]
                        st fp[0] <- r1
                        jmp CellularAutomaton.num_cells.1
CellularAutomaton.num_cells.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        bnz r1 l12
                        la r1 <- string17
                        syscall IO.out_string
                        syscall exit
l12:                    push r1
                        
                        call String.length
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.num_cells.2
CellularAutomaton.num_cells.2:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.num_cells.end
CellularAutomaton.num_cells.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
CellularAutomaton.cell: 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.cell.0:
                        
                        ld r1 <- r0[5]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell.1
                        jmp CellularAutomaton.cell.2
CellularAutomaton.cell.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell.3
CellularAutomaton.cell.2:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[6]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell.4
CellularAutomaton.cell.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell.end
CellularAutomaton.cell.4:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int1
                        push r1
                        ld r1 <- fp[0]
                        bnz r1 l14
                        la r1 <- string18
                        syscall IO.out_string
                        syscall exit
l14:                    push r1
                        
                        call String.substr
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell.5
CellularAutomaton.cell.5:
                        jmp CellularAutomaton.cell.3
CellularAutomaton.cell.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.north:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.north.0:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.north.1
                        jmp CellularAutomaton.north.2
CellularAutomaton.north.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.north.3
CellularAutomaton.north.2:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.north.4
CellularAutomaton.north.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.north.end
CellularAutomaton.north.4:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l15
                        la r1 <- string19
                        syscall IO.out_string
                        syscall exit
l15:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.north.5
CellularAutomaton.north.5:
                        jmp CellularAutomaton.north.3
CellularAutomaton.north.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.south:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.south.0:
                        
                        ld r1 <- r0[5]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.south.1
                        jmp CellularAutomaton.south.2
CellularAutomaton.south.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.south.3
CellularAutomaton.south.2:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.south.4
CellularAutomaton.south.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.south.end
CellularAutomaton.south.4:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l16
                        la r1 <- string20
                        syscall IO.out_string
                        syscall exit
l16:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.south.5
CellularAutomaton.south.5:
                        jmp CellularAutomaton.south.3
CellularAutomaton.south.end:
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
CellularAutomaton.east: 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.east.0:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r3 <- r1[3]
                        bnz r3 l17
                        la r1 <- string21
                        syscall IO.out_string
                        syscall exit
l17:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.east.1
                        jmp CellularAutomaton.east.2
CellularAutomaton.east.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.east.3
CellularAutomaton.east.2:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.east.4
CellularAutomaton.east.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.east.end
CellularAutomaton.east.4:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l18
                        la r1 <- string22
                        syscall IO.out_string
                        syscall exit
l18:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.east.5
CellularAutomaton.east.5:
                        jmp CellularAutomaton.east.3
CellularAutomaton.east.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.west: 
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.west.0:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.west.1
                        jmp CellularAutomaton.west.2
CellularAutomaton.west.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.west.3
CellularAutomaton.west.2:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r3 <- r1[3]
                        bnz r3 l19
                        la r1 <- string23
                        syscall IO.out_string
                        syscall exit
l19:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.west.4
                        jmp CellularAutomaton.west.5
CellularAutomaton.west.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.west.end
CellularAutomaton.west.4:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.west.6
CellularAutomaton.west.5:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.west.7
CellularAutomaton.west.6:
                        jmp CellularAutomaton.west.3
CellularAutomaton.west.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l20
                        la r1 <- string24
                        syscall IO.out_string
                        syscall exit
l20:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.west.8
CellularAutomaton.west.8:
                        jmp CellularAutomaton.west.6
CellularAutomaton.west.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.northwest:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.northwest.0:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.northwest.1
                        jmp CellularAutomaton.northwest.2
CellularAutomaton.northwest.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.northwest.3
CellularAutomaton.northwest.2:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r3 <- r1[3]
                        bnz r3 l21
                        la r1 <- string25
                        syscall IO.out_string
                        syscall exit
l21:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.northwest.4
                        jmp CellularAutomaton.northwest.5
CellularAutomaton.northwest.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.northwest.end
CellularAutomaton.northwest.4:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.northwest.6
CellularAutomaton.northwest.5:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.northwest.7
CellularAutomaton.northwest.6:
                        jmp CellularAutomaton.northwest.3
CellularAutomaton.northwest.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l22
                        la r1 <- string26
                        syscall IO.out_string
                        syscall exit
l22:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[15]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.northwest.8
CellularAutomaton.northwest.8:
                        jmp CellularAutomaton.northwest.6
CellularAutomaton.northwest.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.northeast:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.northeast.0:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int0
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.northeast.1
                        jmp CellularAutomaton.northeast.2
CellularAutomaton.northeast.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.northeast.3
CellularAutomaton.northeast.2:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r3 <- r1[3]
                        bnz r3 l23
                        la r1 <- string27
                        syscall IO.out_string
                        syscall exit
l23:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.northeast.4
                        jmp CellularAutomaton.northeast.5
CellularAutomaton.northeast.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.northeast.end
CellularAutomaton.northeast.4:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.northeast.6
CellularAutomaton.northeast.5:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.northeast.7
CellularAutomaton.northeast.6:
                        jmp CellularAutomaton.northeast.3
CellularAutomaton.northeast.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l24
                        la r1 <- string28
                        syscall IO.out_string
                        syscall exit
l24:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[15]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.northeast.8
CellularAutomaton.northeast.8:
                        jmp CellularAutomaton.northeast.6
CellularAutomaton.northeast.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.southeast:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.southeast.0:
                        
                        ld r1 <- r0[5]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.southeast.1
                        jmp CellularAutomaton.southeast.2
CellularAutomaton.southeast.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.southeast.3
CellularAutomaton.southeast.2:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r3 <- r1[3]
                        bnz r3 l25
                        la r1 <- string29
                        syscall IO.out_string
                        syscall exit
l25:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.southeast.4
                        jmp CellularAutomaton.southeast.5
CellularAutomaton.southeast.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.southeast.end
CellularAutomaton.southeast.4:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.southeast.6
CellularAutomaton.southeast.5:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.southeast.7
CellularAutomaton.southeast.6:
                        jmp CellularAutomaton.southeast.3
CellularAutomaton.southeast.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l26
                        la r1 <- string30
                        syscall IO.out_string
                        syscall exit
l26:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[16]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.southeast.8
CellularAutomaton.southeast.8:
                        jmp CellularAutomaton.southeast.6
CellularAutomaton.southeast.end:
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
CellularAutomaton.southwest:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.southwest.0:
                        
                        ld r1 <- r0[5]
                        st fp[-2] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.southwest.1
                        jmp CellularAutomaton.southwest.2
CellularAutomaton.southwest.1:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.southwest.3
CellularAutomaton.southwest.2:
                        
                        ld r1 <- fp[2]
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r3 <- r1[3]
                        bnz r3 l27
                        la r1 <- string31
                        syscall IO.out_string
                        syscall exit
l27:                    
                        ld r1 <- r1[3]
                        div r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- r0[4]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        mul r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        ld r1 <- fp[0]
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.southwest.4
                        jmp CellularAutomaton.southwest.5
CellularAutomaton.southwest.3:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.southwest.end
CellularAutomaton.southwest.4:
                        
                        la r1 <- l13
                        st fp[0] <- r1
                        jmp CellularAutomaton.southwest.6
CellularAutomaton.southwest.5:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        sub r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.southwest.7
CellularAutomaton.southwest.6:
                        jmp CellularAutomaton.southwest.3
CellularAutomaton.southwest.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l28
                        la r1 <- string32
                        syscall IO.out_string
                        syscall exit
l28:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[16]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.southwest.8
CellularAutomaton.southwest.8:
                        jmp CellularAutomaton.southwest.6
CellularAutomaton.southwest.end:
                        pop ra
                        li r2 <- 5
                        add sp <- sp r2
                        return
                        
CellularAutomaton.neighbors:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.neighbors.0:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.1
CellularAutomaton.neighbors.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l29
                        la r1 <- string33
                        syscall IO.out_string
                        syscall exit
l29:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[15]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.2
CellularAutomaton.neighbors.2:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.3
                        jmp CellularAutomaton.neighbors.4
CellularAutomaton.neighbors.3:
                        
                        la r1 <- int1
                        st fp[-1] <- r1
                        jmp CellularAutomaton.neighbors.5
CellularAutomaton.neighbors.4:
                        
                        la r1 <- int0
                        st fp[-1] <- r1
                        jmp CellularAutomaton.neighbors.5
CellularAutomaton.neighbors.5:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.6
CellularAutomaton.neighbors.6:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l31
                        la r1 <- string34
                        syscall IO.out_string
                        syscall exit
l31:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[16]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.7
CellularAutomaton.neighbors.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.8
                        jmp CellularAutomaton.neighbors.9
CellularAutomaton.neighbors.8:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.10
CellularAutomaton.neighbors.9:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.10
CellularAutomaton.neighbors.10:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.11
CellularAutomaton.neighbors.11:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l32
                        la r1 <- string35
                        syscall IO.out_string
                        syscall exit
l32:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[17]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.12
CellularAutomaton.neighbors.12:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.13
                        jmp CellularAutomaton.neighbors.14
CellularAutomaton.neighbors.13:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.15
CellularAutomaton.neighbors.14:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.15
CellularAutomaton.neighbors.15:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.16
CellularAutomaton.neighbors.16:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l33
                        la r1 <- string36
                        syscall IO.out_string
                        syscall exit
l33:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[18]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.17
CellularAutomaton.neighbors.17:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.18
                        jmp CellularAutomaton.neighbors.19
CellularAutomaton.neighbors.18:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.20
CellularAutomaton.neighbors.19:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.20
CellularAutomaton.neighbors.20:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.21
CellularAutomaton.neighbors.21:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l34
                        la r1 <- string37
                        syscall IO.out_string
                        syscall exit
l34:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[20]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.22
CellularAutomaton.neighbors.22:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.23
                        jmp CellularAutomaton.neighbors.24
CellularAutomaton.neighbors.23:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.25
CellularAutomaton.neighbors.24:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.25
CellularAutomaton.neighbors.25:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.26
CellularAutomaton.neighbors.26:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l35
                        la r1 <- string38
                        syscall IO.out_string
                        syscall exit
l35:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[19]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.27
CellularAutomaton.neighbors.27:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.28
                        jmp CellularAutomaton.neighbors.29
CellularAutomaton.neighbors.28:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.30
CellularAutomaton.neighbors.29:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.30
CellularAutomaton.neighbors.30:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.31
CellularAutomaton.neighbors.31:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l36
                        la r1 <- string39
                        syscall IO.out_string
                        syscall exit
l36:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[21]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.32
CellularAutomaton.neighbors.32:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.33
                        jmp CellularAutomaton.neighbors.34
CellularAutomaton.neighbors.33:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.35
CellularAutomaton.neighbors.34:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.35
CellularAutomaton.neighbors.35:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[-1] <- r1
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.36
CellularAutomaton.neighbors.36:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l37
                        la r1 <- string40
                        syscall IO.out_string
                        syscall exit
l37:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[22]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.37
CellularAutomaton.neighbors.37:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.neighbors.38
                        jmp CellularAutomaton.neighbors.39
CellularAutomaton.neighbors.38:
                        
                        la r1 <- int1
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.40
CellularAutomaton.neighbors.39:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.40
CellularAutomaton.neighbors.40:
                        
                        ld r2 <- fp[-1]
                        ld r2 <- r2[3]
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.neighbors.end
CellularAutomaton.neighbors.end:
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
CellularAutomaton.cell_at_next_evolution:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.cell_at_next_evolution.0:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.1
CellularAutomaton.cell_at_next_evolution.1:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l38
                        la r1 <- string41
                        syscall IO.out_string
                        syscall exit
l38:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[23]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.2
CellularAutomaton.cell_at_next_evolution.2:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int3
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_at_next_evolution.3
                        jmp CellularAutomaton.cell_at_next_evolution.4
CellularAutomaton.cell_at_next_evolution.3:
                        
                        la r1 <- l30
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.5
CellularAutomaton.cell_at_next_evolution.4:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.6
CellularAutomaton.cell_at_next_evolution.5:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.end
CellularAutomaton.cell_at_next_evolution.6:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l39
                        la r1 <- string42
                        syscall IO.out_string
                        syscall exit
l39:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[23]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.7
CellularAutomaton.cell_at_next_evolution.7:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int2
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_at_next_evolution.8
                        jmp CellularAutomaton.cell_at_next_evolution.9
CellularAutomaton.cell_at_next_evolution.8:
                        
                        ld r1 <- fp[2]
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.11
CellularAutomaton.cell_at_next_evolution.9:
                        
                        la r1 <- l40
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.10
CellularAutomaton.cell_at_next_evolution.10:
                        jmp CellularAutomaton.cell_at_next_evolution.5
CellularAutomaton.cell_at_next_evolution.11:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        mov r1 <- r0
                        bnz r1 l41
                        la r1 <- string43
                        syscall IO.out_string
                        syscall exit
l41:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[14]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.12
CellularAutomaton.cell_at_next_evolution.12:
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l30
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.cell_at_next_evolution.13
                        jmp CellularAutomaton.cell_at_next_evolution.14
CellularAutomaton.cell_at_next_evolution.13:
                        
                        la r1 <- l30
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.15
CellularAutomaton.cell_at_next_evolution.14:
                        
                        la r1 <- l40
                        st fp[0] <- r1
                        jmp CellularAutomaton.cell_at_next_evolution.15
CellularAutomaton.cell_at_next_evolution.15:
                        jmp CellularAutomaton.cell_at_next_evolution.10
CellularAutomaton.cell_at_next_evolution.end:
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
CellularAutomaton.evolve:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 6
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.evolve.0:
                        
                        la r1 <- int0
                        st fp[0] <- r1
                        jmp CellularAutomaton.evolve.1
CellularAutomaton.evolve.1:
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l42
                        la r1 <- string44
                        syscall IO.out_string
                        syscall exit
l42:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[13]
                        call r2
                        pop fp
                        pop r0
                        st fp[-4] <- r1
                        jmp CellularAutomaton.evolve.2
CellularAutomaton.evolve.2:
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        la r3 <- the.empty.string
                        st r1[3] <- r3
                        st fp[-1] <- r1
                        jmp CellularAutomaton.evolve.3
CellularAutomaton.evolve.3:
                        
                        ld r1 <- fp[0]
                        st fp[-3] <- r1
                        
                        ld r1 <- fp[-4]
                        st fp[-2] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-3]
                        push r1
                        ld r1 <- fp[-2]
                        push r1
                        push r0
                        call lt_handler
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        ld r1 <- fp[-2]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.evolve.5
                        jmp CellularAutomaton.evolve.4
CellularAutomaton.evolve.4:
                        
                        ld r1 <- fp[-1]
                        st r0[6] <- r1
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.evolve.end
CellularAutomaton.evolve.5:
                        
                        ld r1 <- fp[0]
                        st fp[-2] <- r1
                        jmp CellularAutomaton.evolve.6
CellularAutomaton.evolve.6:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        mov r1 <- r0
                        bnz r1 l43
                        la r1 <- string45
                        syscall IO.out_string
                        syscall exit
l43:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[24]
                        call r2
                        pop fp
                        pop r0
                        st fp[-2] <- r1
                        jmp CellularAutomaton.evolve.7
CellularAutomaton.evolve.7:
                        
                        ld r1 <- fp[-1]
                        st fp[-1] <- r1
                        jmp CellularAutomaton.evolve.8
CellularAutomaton.evolve.8:
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l44
                        la r1 <- string45
                        syscall IO.out_string
                        syscall exit
l44:                    push r1
                        
                        call String.concat
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp CellularAutomaton.evolve.9
CellularAutomaton.evolve.9:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        ld r2 <- fp[0]
                        ld r2 <- r2[3]
                        la r1 <- int1
                        ld r1 <- r1[3]
                        add r1 <- r2 r1
                        push r1
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        pop r2
                        st r1[3] <- r2
                        st fp[0] <- r1
                        jmp CellularAutomaton.evolve.3
CellularAutomaton.evolve.end:
                        pop ra
                        li r2 <- 6
                        add sp <- sp r2
                        return
                        
CellularAutomaton.option:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 3
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.option.0:
                        jmp CellularAutomaton.option.1
CellularAutomaton.option.1:
                        
                        push r0
                        push fp
                        la r1 <- l45
                        push r1
                        mov r1 <- r0
                        bnz r1 l46
                        la r1 <- string46
                        syscall IO.out_string
                        syscall exit
l46:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.2
CellularAutomaton.option.2:
                        jmp CellularAutomaton.option.3
CellularAutomaton.option.3:
                        
                        push r0
                        push fp
                        la r1 <- l47
                        push r1
                        mov r1 <- r0
                        bnz r1 l48
                        la r1 <- string47
                        syscall IO.out_string
                        syscall exit
l48:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.4
CellularAutomaton.option.4:
                        jmp CellularAutomaton.option.5
CellularAutomaton.option.5:
                        
                        push r0
                        push fp
                        la r1 <- l49
                        push r1
                        mov r1 <- r0
                        bnz r1 l50
                        la r1 <- string48
                        syscall IO.out_string
                        syscall exit
l50:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.6
CellularAutomaton.option.6:
                        jmp CellularAutomaton.option.7
CellularAutomaton.option.7:
                        
                        push r0
                        push fp
                        la r1 <- l51
                        push r1
                        mov r1 <- r0
                        bnz r1 l52
                        la r1 <- string49
                        syscall IO.out_string
                        syscall exit
l52:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.8
CellularAutomaton.option.8:
                        jmp CellularAutomaton.option.9
CellularAutomaton.option.9:
                        
                        push r0
                        push fp
                        la r1 <- l53
                        push r1
                        mov r1 <- r0
                        bnz r1 l54
                        la r1 <- string50
                        syscall IO.out_string
                        syscall exit
l54:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.10
CellularAutomaton.option.10:
                        jmp CellularAutomaton.option.11
CellularAutomaton.option.11:
                        
                        push r0
                        push fp
                        la r1 <- l55
                        push r1
                        mov r1 <- r0
                        bnz r1 l56
                        la r1 <- string51
                        syscall IO.out_string
                        syscall exit
l56:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.12
CellularAutomaton.option.12:
                        jmp CellularAutomaton.option.13
CellularAutomaton.option.13:
                        
                        push r0
                        push fp
                        la r1 <- l57
                        push r1
                        mov r1 <- r0
                        bnz r1 l58
                        la r1 <- string52
                        syscall IO.out_string
                        syscall exit
l58:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.14
CellularAutomaton.option.14:
                        jmp CellularAutomaton.option.15
CellularAutomaton.option.15:
                        
                        push r0
                        push fp
                        la r1 <- l59
                        push r1
                        mov r1 <- r0
                        bnz r1 l60
                        la r1 <- string53
                        syscall IO.out_string
                        syscall exit
l60:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.16
CellularAutomaton.option.16:
                        jmp CellularAutomaton.option.17
CellularAutomaton.option.17:
                        
                        push r0
                        push fp
                        la r1 <- l61
                        push r1
                        mov r1 <- r0
                        bnz r1 l62
                        la r1 <- string54
                        syscall IO.out_string
                        syscall exit
l62:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.18
CellularAutomaton.option.18:
                        jmp CellularAutomaton.option.19
CellularAutomaton.option.19:
                        
                        push r0
                        push fp
                        la r1 <- l63
                        push r1
                        mov r1 <- r0
                        bnz r1 l64
                        la r1 <- string55
                        syscall IO.out_string
                        syscall exit
l64:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.20
CellularAutomaton.option.20:
                        jmp CellularAutomaton.option.21
CellularAutomaton.option.21:
                        
                        push r0
                        push fp
                        la r1 <- l65
                        push r1
                        mov r1 <- r0
                        bnz r1 l66
                        la r1 <- string56
                        syscall IO.out_string
                        syscall exit
l66:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.22
CellularAutomaton.option.22:
                        jmp CellularAutomaton.option.23
CellularAutomaton.option.23:
                        
                        push r0
                        push fp
                        la r1 <- l67
                        push r1
                        mov r1 <- r0
                        bnz r1 l68
                        la r1 <- string57
                        syscall IO.out_string
                        syscall exit
l68:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.24
CellularAutomaton.option.24:
                        jmp CellularAutomaton.option.25
CellularAutomaton.option.25:
                        
                        push r0
                        push fp
                        la r1 <- l69
                        push r1
                        mov r1 <- r0
                        bnz r1 l70
                        la r1 <- string58
                        syscall IO.out_string
                        syscall exit
l70:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.26
CellularAutomaton.option.26:
                        jmp CellularAutomaton.option.27
CellularAutomaton.option.27:
                        
                        push r0
                        push fp
                        la r1 <- l71
                        push r1
                        mov r1 <- r0
                        bnz r1 l72
                        la r1 <- string59
                        syscall IO.out_string
                        syscall exit
l72:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.28
CellularAutomaton.option.28:
                        jmp CellularAutomaton.option.29
CellularAutomaton.option.29:
                        
                        push r0
                        push fp
                        la r1 <- l73
                        push r1
                        mov r1 <- r0
                        bnz r1 l74
                        la r1 <- string60
                        syscall IO.out_string
                        syscall exit
l74:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.30
CellularAutomaton.option.30:
                        jmp CellularAutomaton.option.31
CellularAutomaton.option.31:
                        
                        push r0
                        push fp
                        la r1 <- l75
                        push r1
                        mov r1 <- r0
                        bnz r1 l76
                        la r1 <- string61
                        syscall IO.out_string
                        syscall exit
l76:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.32
CellularAutomaton.option.32:
                        jmp CellularAutomaton.option.33
CellularAutomaton.option.33:
                        
                        push r0
                        push fp
                        la r1 <- l77
                        push r1
                        mov r1 <- r0
                        bnz r1 l78
                        la r1 <- string62
                        syscall IO.out_string
                        syscall exit
l78:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.34
CellularAutomaton.option.34:
                        jmp CellularAutomaton.option.35
CellularAutomaton.option.35:
                        
                        push r0
                        push fp
                        la r1 <- l79
                        push r1
                        mov r1 <- r0
                        bnz r1 l80
                        la r1 <- string63
                        syscall IO.out_string
                        syscall exit
l80:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.36
CellularAutomaton.option.36:
                        jmp CellularAutomaton.option.37
CellularAutomaton.option.37:
                        
                        push r0
                        push fp
                        la r1 <- l81
                        push r1
                        mov r1 <- r0
                        bnz r1 l82
                        la r1 <- string64
                        syscall IO.out_string
                        syscall exit
l82:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.38
CellularAutomaton.option.38:
                        jmp CellularAutomaton.option.39
CellularAutomaton.option.39:
                        
                        push r0
                        push fp
                        la r1 <- l83
                        push r1
                        mov r1 <- r0
                        bnz r1 l84
                        la r1 <- string65
                        syscall IO.out_string
                        syscall exit
l84:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.40
CellularAutomaton.option.40:
                        jmp CellularAutomaton.option.41
CellularAutomaton.option.41:
                        
                        push r0
                        push fp
                        la r1 <- l85
                        push r1
                        mov r1 <- r0
                        bnz r1 l86
                        la r1 <- string66
                        syscall IO.out_string
                        syscall exit
l86:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.42
CellularAutomaton.option.42:
                        jmp CellularAutomaton.option.43
CellularAutomaton.option.43:
                        
                        push r0
                        push fp
                        la r1 <- l87
                        push r1
                        mov r1 <- r0
                        bnz r1 l88
                        la r1 <- string67
                        syscall IO.out_string
                        syscall exit
l88:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.44
CellularAutomaton.option.44:
                        jmp CellularAutomaton.option.45
CellularAutomaton.option.45:
                        
                        push r0
                        push fp
                        la r1 <- l89
                        push r1
                        mov r1 <- r0
                        bnz r1 l90
                        la r1 <- string68
                        syscall IO.out_string
                        syscall exit
l90:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.46
CellularAutomaton.option.46:
                        jmp CellularAutomaton.option.47
CellularAutomaton.option.47:
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l91
                        la r1 <- string69
                        syscall IO.out_string
                        syscall exit
l91:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[5]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.48
CellularAutomaton.option.48:
                        jmp CellularAutomaton.option.49
CellularAutomaton.option.49:
                        
                        push r0
                        push fp
                        la r1 <- l6
                        push r1
                        mov r1 <- r0
                        bnz r1 l92
                        la r1 <- string70
                        syscall IO.out_string
                        syscall exit
l92:                    push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.option.50
CellularAutomaton.option.50:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int1
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.51
                        jmp CellularAutomaton.option.52
CellularAutomaton.option.51:
                        
                        la r1 <- l93
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.53
CellularAutomaton.option.52:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int2
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.54
                        jmp CellularAutomaton.option.55
CellularAutomaton.option.53:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.end
CellularAutomaton.option.54:
                        
                        la r1 <- l94
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.56
CellularAutomaton.option.55:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int3
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.57
                        jmp CellularAutomaton.option.58
CellularAutomaton.option.56:
                        jmp CellularAutomaton.option.53
CellularAutomaton.option.57:
                        
                        la r1 <- l95
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.59
CellularAutomaton.option.58:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int4
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.60
                        jmp CellularAutomaton.option.61
CellularAutomaton.option.59:
                        jmp CellularAutomaton.option.56
CellularAutomaton.option.60:
                        
                        la r1 <- l96
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.62
CellularAutomaton.option.61:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int5
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.63
                        jmp CellularAutomaton.option.64
CellularAutomaton.option.62:
                        jmp CellularAutomaton.option.59
CellularAutomaton.option.63:
                        
                        la r1 <- l97
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.65
CellularAutomaton.option.64:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int6
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.66
                        jmp CellularAutomaton.option.67
CellularAutomaton.option.65:
                        jmp CellularAutomaton.option.62
CellularAutomaton.option.66:
                        
                        la r1 <- l98
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.68
CellularAutomaton.option.67:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int7
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.69
                        jmp CellularAutomaton.option.70
CellularAutomaton.option.68:
                        jmp CellularAutomaton.option.65
CellularAutomaton.option.69:
                        
                        la r1 <- l99
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.71
CellularAutomaton.option.70:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int8
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.72
                        jmp CellularAutomaton.option.73
CellularAutomaton.option.71:
                        jmp CellularAutomaton.option.68
CellularAutomaton.option.72:
                        
                        la r1 <- l100
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.74
CellularAutomaton.option.73:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int9
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.75
                        jmp CellularAutomaton.option.76
CellularAutomaton.option.74:
                        jmp CellularAutomaton.option.71
CellularAutomaton.option.75:
                        
                        la r1 <- l101
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.77
CellularAutomaton.option.76:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int10
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.78
                        jmp CellularAutomaton.option.79
CellularAutomaton.option.77:
                        jmp CellularAutomaton.option.74
CellularAutomaton.option.78:
                        
                        la r1 <- l102
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.80
CellularAutomaton.option.79:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int11
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.81
                        jmp CellularAutomaton.option.82
CellularAutomaton.option.80:
                        jmp CellularAutomaton.option.77
CellularAutomaton.option.81:
                        
                        la r1 <- l103
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.83
CellularAutomaton.option.82:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int12
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.84
                        jmp CellularAutomaton.option.85
CellularAutomaton.option.83:
                        jmp CellularAutomaton.option.80
CellularAutomaton.option.84:
                        
                        la r1 <- l104
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.86
CellularAutomaton.option.85:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int13
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.87
                        jmp CellularAutomaton.option.88
CellularAutomaton.option.86:
                        jmp CellularAutomaton.option.83
CellularAutomaton.option.87:
                        
                        la r1 <- l105
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.89
CellularAutomaton.option.88:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int14
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.90
                        jmp CellularAutomaton.option.91
CellularAutomaton.option.89:
                        jmp CellularAutomaton.option.86
CellularAutomaton.option.90:
                        
                        la r1 <- l106
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.92
CellularAutomaton.option.91:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int15
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.93
                        jmp CellularAutomaton.option.94
CellularAutomaton.option.92:
                        jmp CellularAutomaton.option.89
CellularAutomaton.option.93:
                        
                        la r1 <- l107
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.95
CellularAutomaton.option.94:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int16
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.96
                        jmp CellularAutomaton.option.97
CellularAutomaton.option.95:
                        jmp CellularAutomaton.option.92
CellularAutomaton.option.96:
                        
                        la r1 <- l108
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.98
CellularAutomaton.option.97:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int17
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.99
                        jmp CellularAutomaton.option.100
CellularAutomaton.option.98:
                        jmp CellularAutomaton.option.95
CellularAutomaton.option.99:
                        
                        la r1 <- l109
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.101
CellularAutomaton.option.100:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int18
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.102
                        jmp CellularAutomaton.option.103
CellularAutomaton.option.101:
                        jmp CellularAutomaton.option.98
CellularAutomaton.option.102:
                        
                        la r1 <- l110
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.104
CellularAutomaton.option.103:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int19
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.105
                        jmp CellularAutomaton.option.106
CellularAutomaton.option.104:
                        jmp CellularAutomaton.option.101
CellularAutomaton.option.105:
                        
                        la r1 <- l111
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.107
CellularAutomaton.option.106:
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        push r1
                        la r1 <- int20
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.108
                        jmp CellularAutomaton.option.109
CellularAutomaton.option.107:
                        jmp CellularAutomaton.option.104
CellularAutomaton.option.108:
                        
                        la r1 <- l112
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.110
CellularAutomaton.option.109:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- int21
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.option.111
                        jmp CellularAutomaton.option.112
CellularAutomaton.option.110:
                        jmp CellularAutomaton.option.107
CellularAutomaton.option.111:
                        
                        la r1 <- l113
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.113
CellularAutomaton.option.112:
                        
                        la r1 <- l114
                        st fp[0] <- r1
                        jmp CellularAutomaton.option.113
CellularAutomaton.option.113:
                        jmp CellularAutomaton.option.110
CellularAutomaton.option.end:
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
CellularAutomaton.prompt:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.prompt.0:
                        jmp CellularAutomaton.prompt.1
CellularAutomaton.prompt.1:
                        
                        push r0
                        push fp
                        la r1 <- l115
                        push r1
                        mov r1 <- r0
                        bnz r1 l116
                        la r1 <- string71
                        syscall IO.out_string
                        syscall exit
l116:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.prompt.2
CellularAutomaton.prompt.2:
                        jmp CellularAutomaton.prompt.3
CellularAutomaton.prompt.3:
                        
                        push r0
                        push fp
                        la r1 <- l117
                        push r1
                        mov r1 <- r0
                        bnz r1 l118
                        la r1 <- string72
                        syscall IO.out_string
                        syscall exit
l118:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.prompt.4
CellularAutomaton.prompt.4:
                        jmp CellularAutomaton.prompt.5
CellularAutomaton.prompt.5:
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l119
                        la r1 <- string73
                        syscall IO.out_string
                        syscall exit
l119:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt.6
CellularAutomaton.prompt.6:
                        jmp CellularAutomaton.prompt.7
CellularAutomaton.prompt.7:
                        
                        push r0
                        push fp
                        la r1 <- l6
                        push r1
                        mov r1 <- r0
                        bnz r1 l120
                        la r1 <- string74
                        syscall IO.out_string
                        syscall exit
l120:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.prompt.8
CellularAutomaton.prompt.8:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l121
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.prompt.9
                        jmp CellularAutomaton.prompt.10
CellularAutomaton.prompt.9:
                        
                        la r1 <- false
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt.11
CellularAutomaton.prompt.10:
                        
                        la r1 <- true
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt.11
CellularAutomaton.prompt.11:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt.end
CellularAutomaton.prompt.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
CellularAutomaton.prompt2:
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 2
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
CellularAutomaton.prompt2.0:
                        jmp CellularAutomaton.prompt2.1
CellularAutomaton.prompt2.1:
                        
                        push r0
                        push fp
                        la r1 <- l122
                        push r1
                        mov r1 <- r0
                        bnz r1 l123
                        la r1 <- string75
                        syscall IO.out_string
                        syscall exit
l123:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.prompt2.2
CellularAutomaton.prompt2.2:
                        jmp CellularAutomaton.prompt2.3
CellularAutomaton.prompt2.3:
                        
                        push r0
                        push fp
                        la r1 <- l124
                        push r1
                        mov r1 <- r0
                        bnz r1 l125
                        la r1 <- string76
                        syscall IO.out_string
                        syscall exit
l125:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.prompt2.4
CellularAutomaton.prompt2.4:
                        jmp CellularAutomaton.prompt2.5
CellularAutomaton.prompt2.5:
                        
                        push r0
                        push fp
                        la r1 <- l126
                        push r1
                        mov r1 <- r0
                        bnz r1 l127
                        la r1 <- string77
                        syscall IO.out_string
                        syscall exit
l127:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[8]
                        call r2
                        pop fp
                        pop r0
                        jmp CellularAutomaton.prompt2.6
CellularAutomaton.prompt2.6:
                        jmp CellularAutomaton.prompt2.7
CellularAutomaton.prompt2.7:
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l128
                        la r1 <- string78
                        syscall IO.out_string
                        syscall exit
l128:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[6]
                        call r2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt2.8
CellularAutomaton.prompt2.8:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        
                        push r0
                        push fp
                        ld r1 <- fp[0]
                        push r1
                        la r1 <- l129
                        push r1
                        push r0
                        call eq_handler
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 CellularAutomaton.prompt2.9
                        jmp CellularAutomaton.prompt2.10
CellularAutomaton.prompt2.9:
                        
                        la r1 <- true
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt2.11
CellularAutomaton.prompt2.10:
                        
                        la r1 <- false
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt2.11
CellularAutomaton.prompt2.11:
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp CellularAutomaton.prompt2.end
CellularAutomaton.prompt2.end:
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
Main.main:              
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 4
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
Main.main.0:            
                        jmp Main.main.1
Main.main.1:            
                        
                        la r1 <- l130
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.main.2
Main.main.2:            
                        jmp Main.main.3
Main.main.3:            
                        
                        la r1 <- l131
                        ld r1 <- r1[3]
                        syscall IO.out_string
                        mov r1 <- r0
                        jmp Main.main.4
Main.main.4:            
                        jmp Main.main.5
Main.main.5:            
                        jmp Main.main.8
Main.main.6:            
                        
                        mov r1 <- r0
                        st fp[0] <- r1
                        
                        ld r1 <- fp[0]
                        st fp[0] <- r1
                        jmp Main.main.end
Main.main.7:            
                        
                        la r1 <- true
                        st fp[0] <- r1
                        jmp Main.main.10
Main.main.8:            
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l132
                        la r1 <- string79
                        syscall IO.out_string
                        syscall exit
l132:                   push r1
                        
                        call CellularAutomaton.prompt2
                        pop fp
                        pop r0
                        st fp[0] <- r1
                        jmp Main.main.9
Main.main.9:            
                        ld r1 <- fp[0]
                        ld r1 <- r1[3]
                        bnz r1 Main.main.7
                        jmp Main.main.6
Main.main.10:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l133
                        la r1 <- string80
                        syscall IO.out_string
                        syscall exit
l133:                   push r1
                        
                        call CellularAutomaton.option
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.11
Main.main.11:           
                        
                        ld r1 <- fp[-1]
                        st fp[-2] <- r1
                        
                        push fp
                        push r0
                        la r2 <- CellularAutomaton..new
                        call r2
                        pop r0
                        pop fp
                        st fp[-1] <- r1
                        jmp Main.main.12
Main.main.12:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-2]
                        push r1
                        ld r1 <- fp[-1]
                        bnz r1 l134
                        la r1 <- string81
                        syscall IO.out_string
                        syscall exit
l134:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[11]
                        call r2
                        pop fp
                        pop r0
                        st r0[7] <- r1
                        jmp Main.main.13
Main.main.13:           
                        
                        ld r1 <- r0[7]
                        st fp[-1] <- r1
                        jmp Main.main.14
Main.main.14:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l135
                        la r1 <- string82
                        syscall IO.out_string
                        syscall exit
l135:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.main.15
Main.main.15:           
                        jmp Main.main.16
Main.main.16:           
                        
                        ld r1 <- fp[0]
                        st fp[-1] <- r1
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Main.main.18
                        jmp Main.main.17
Main.main.17:           
                        jmp Main.main.5
Main.main.18:           
                        jmp Main.main.19
Main.main.19:           
                        
                        push r0
                        push fp
                        mov r1 <- r0
                        bnz r1 l136
                        la r1 <- string83
                        syscall IO.out_string
                        syscall exit
l136:                   push r1
                        
                        call CellularAutomaton.prompt
                        pop fp
                        pop r0
                        st fp[-1] <- r1
                        jmp Main.main.20
Main.main.20:           
                        ld r1 <- fp[-1]
                        ld r1 <- r1[3]
                        bnz r1 Main.main.21
                        jmp Main.main.22
Main.main.21:           
                        
                        ld r1 <- r0[7]
                        st fp[-1] <- r1
                        jmp Main.main.24
Main.main.22:           
                        
                        la r1 <- false
                        st fp[0] <- r1
                        jmp Main.main.23
Main.main.23:           
                        jmp Main.main.16
Main.main.24:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l137
                        la r1 <- string84
                        syscall IO.out_string
                        syscall exit
l137:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[25]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.main.25
Main.main.25:           
                        
                        ld r1 <- r0[7]
                        st fp[-1] <- r1
                        jmp Main.main.26
Main.main.26:           
                        
                        push r0
                        push fp
                        ld r1 <- fp[-1]
                        bnz r1 l138
                        la r1 <- string85
                        syscall IO.out_string
                        syscall exit
l138:                   push r1
                        
                        ld r2 <- r1[2]
                        
                        ld r2 <- r2[12]
                        call r2
                        pop fp
                        pop r0
                        jmp Main.main.27
Main.main.27:           
                        jmp Main.main.23
Main.main.end:          
                        pop ra
                        li r2 <- 4
                        add sp <- sp r2
                        return
                        
String.concat:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- r0[3]
                        syscall String.concat
                        st r3[3] <- r1
                        mov r1 <- r3
String.concat.end:      
                        pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
String.length:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        push fp
                        push r0
                        la r2 <- Int..new
                        call r2
                        pop r0
                        pop fp
                        mov r2 <- r1
                        ld r1 <- r0[3]
                        syscall String.length
                        st r2[3] <- r1
                        mov r1 <- r2
String.length.end:      
                        pop ra
                        li r2 <- 1
                        add sp <- sp r2
                        return
                        
String.substr:          
                        mov fp <- sp
                        pop r0
                        
                        li r2 <- 1
                        sub sp <- sp r2
                        push ra
                        
                        
                        
                        
                        push fp
                        push r0
                        la r2 <- String..new
                        call r2
                        pop r0
                        pop fp
                        mov r3 <- r1
                        ld r2 <- fp[2]
                        ld r2 <- r2[3]
                        ld r1 <- fp[3]
                        ld r1 <- r1[3]
                        ld r0 <- r0[3]
                        syscall String.substr
                        bnz r1 l139
                        la r1 <- string86
                        syscall IO.out_string
                        syscall exit
l139:                   st r3[3] <- r1
                        mov r1 <- r3
String.substr.end:      
                        pop ra
                        li r2 <- 3
                        add sp <- sp r2
                        return
                        
                        
the.empty.string:       constant ""
string1:                constant "Board"
string2:                constant "Bool"
string3:                constant "CellularAutomaton"
string4:                constant "IO"
string5:                constant "Int"
string6:                constant "Main"
string7:                constant "Object"
string8:                constant "String"
string9:                constant "abort\n"
string10:               constant "ERROR: 52: Exception: dispatch on void\n"
string11:               constant "ERROR: 56: Exception: dispatch on void\n"
string12:               constant "ERROR: 116: Exception: dispatch on void\n"
string13:               constant "ERROR: 129: Exception: dispatch on void\n"
string14:               constant "ERROR: 132: Exception: dispatch on void\n"
string15:               constant "ERROR: 133: Exception: dispatch on void\n"
string16:               constant "ERROR: 137: Exception: dispatch on void\n"
string17:               constant "ERROR: 144: Exception: dispatch on void\n"
string18:               constant "ERROR: 151: Exception: dispatch on void\n"
string19:               constant "ERROR: 159: Exception: dispatch on void\n"
string20:               constant "ERROR: 167: Exception: dispatch on void\n"
string21:               constant "ERROR: 172: Exception: division by zero\n"
string22:               constant "ERROR: 175: Exception: dispatch on void\n"
string23:               constant "ERROR: 183: Exception: division by zero\n"
string24:               constant "ERROR: 186: Exception: dispatch on void\n"
string25:               constant "ERROR: 193: Exception: division by zero\n"
string26:               constant "ERROR: 196: Exception: dispatch on void\n"
string27:               constant "ERROR: 203: Exception: division by zero\n"
string28:               constant "ERROR: 206: Exception: dispatch on void\n"
string29:               constant "ERROR: 213: Exception: division by zero\n"
string30:               constant "ERROR: 216: Exception: dispatch on void\n"
string31:               constant "ERROR: 223: Exception: division by zero\n"
string32:               constant "ERROR: 226: Exception: dispatch on void\n"
string33:               constant "ERROR: 232: Exception: dispatch on void\n"
string34:               constant "ERROR: 233: Exception: dispatch on void\n"
string35:               constant "ERROR: 234: Exception: dispatch on void\n"
string36:               constant "ERROR: 235: Exception: dispatch on void\n"
string37:               constant "ERROR: 236: Exception: dispatch on void\n"
string38:               constant "ERROR: 237: Exception: dispatch on void\n"
string39:               constant "ERROR: 238: Exception: dispatch on void\n"
string40:               constant "ERROR: 239: Exception: dispatch on void\n"
string41:               constant "ERROR: 249: Exception: dispatch on void\n"
string42:               constant "ERROR: 252: Exception: dispatch on void\n"
string43:               constant "ERROR: 253: Exception: dispatch on void\n"
string44:               constant "ERROR: 266: Exception: dispatch on void\n"
string45:               constant "ERROR: 271: Exception: dispatch on void\n"
string46:               constant "ERROR: 288: Exception: dispatch on void\n"
string47:               constant "ERROR: 289: Exception: dispatch on void\n"
string48:               constant "ERROR: 290: Exception: dispatch on void\n"
string49:               constant "ERROR: 291: Exception: dispatch on void\n"
string50:               constant "ERROR: 292: Exception: dispatch on void\n"
string51:               constant "ERROR: 293: Exception: dispatch on void\n"
string52:               constant "ERROR: 294: Exception: dispatch on void\n"
string53:               constant "ERROR: 295: Exception: dispatch on void\n"
string54:               constant "ERROR: 296: Exception: dispatch on void\n"
string55:               constant "ERROR: 297: Exception: dispatch on void\n"
string56:               constant "ERROR: 298: Exception: dispatch on void\n"
string57:               constant "ERROR: 299: Exception: dispatch on void\n"
string58:               constant "ERROR: 300: Exception: dispatch on void\n"
string59:               constant "ERROR: 301: Exception: dispatch on void\n"
string60:               constant "ERROR: 302: Exception: dispatch on void\n"
string61:               constant "ERROR: 303: Exception: dispatch on void\n"
string62:               constant "ERROR: 304: Exception: dispatch on void\n"
string63:               constant "ERROR: 305: Exception: dispatch on void\n"
string64:               constant "ERROR: 306: Exception: dispatch on void\n"
string65:               constant "ERROR: 307: Exception: dispatch on void\n"
string66:               constant "ERROR: 308: Exception: dispatch on void\n"
string67:               constant "ERROR: 309: Exception: dispatch on void\n"
string68:               constant "ERROR: 310: Exception: dispatch on void\n"
string69:               constant "ERROR: 311: Exception: dispatch on void\n"
string70:               constant "ERROR: 312: Exception: dispatch on void\n"
string71:               constant "ERROR: 370: Exception: dispatch on void\n"
string72:               constant "ERROR: 371: Exception: dispatch on void\n"
string73:               constant "ERROR: 372: Exception: dispatch on void\n"
string74:               constant "ERROR: 373: Exception: dispatch on void\n"
string75:               constant "ERROR: 388: Exception: dispatch on void\n"
string76:               constant "ERROR: 389: Exception: dispatch on void\n"
string77:               constant "ERROR: 390: Exception: dispatch on void\n"
string78:               constant "ERROR: 391: Exception: dispatch on void\n"
string79:               constant "ERROR: 414: Exception: dispatch on void\n"
string80:               constant "ERROR: 417: Exception: dispatch on void\n"
string81:               constant "ERROR: 418: Exception: dispatch on void\n"
string82:               constant "ERROR: 419: Exception: dispatch on void\n"
string83:               constant "ERROR: 421: Exception: dispatch on void\n"
string84:               constant "ERROR: 423: Exception: dispatch on void\n"
string85:               constant "ERROR: 424: Exception: dispatch on void\n"
string86:               constant "ERROR: 0: Exception: String.substr out of range\n"
                        
eq_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
                        li r3 <- 0
                        beq r1 r3 eq_false
                        beq r2 r3 eq_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 eq_bool
                        li r2 <- 2
                        beq r1 r2 eq_int
                        li r2 <- 6
                        beq r1 r2 eq_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 eq_true
eq_false:               
                        la r1 <- false
                        jmp eq_end
eq_true:                
                        la r1 <- true
                        jmp eq_end
eq_bool:                
eq_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        beq r1 r2 eq_true
                        jmp eq_false
eq_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
le_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
                        li r3 <- 0
                        beq r1 r3 le_false
                        beq r2 r3 le_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 le_bool
                        li r2 <- 2
                        beq r1 r2 le_int
                        li r2 <- 6
                        beq r1 r2 le_string
                        
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        beq r1 r2 le_true
le_false:               
                        la r1 <- false
                        jmp le_end
le_true:                
                        la r1 <- true
                        jmp le_end
le_bool:                
le_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ble r1 r2 le_true
                        jmp le_false
le_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        ble r1 r2 le_true
                        jmp le_false
le_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
                        
lt_handler:             
                        mov fp <- sp
                        pop r0
                        push ra
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        li r3 <- 0
                        beq r1 r3 lt_false
                        beq r2 r3 lt_false
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        
                        add r1 <- r1 r2
                        li r2 <- 0
                        beq r1 r2 lt_bool
                        li r2 <- 2
                        beq r1 r2 lt_int
                        li r2 <- 6
                        beq r1 r2 lt_string
                        
lt_false:               
                        la r1 <- false
                        jmp lt_end
lt_true:                
                        la r1 <- true
                        jmp lt_end
lt_bool:                
lt_int:                 
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_string:              
                        ld r1 <- fp[3]
                        ld r2 <- fp[2]
                        ld r1 <- r1[3]
                        ld r2 <- r2[3]
                        ld r1 <- r1[0]
                        ld r2 <- r2[0]
                        blt r1 r2 lt_true
                        jmp lt_false
lt_end:                 pop ra
                        li r2 <- 2
                        add sp <- sp r2
                        return
int0:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 0
int1:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 1
int2:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 2
int3:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 3
int4:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 4
int5:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 5
int6:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 6
int7:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 7
int8:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 8
int9:                   constant 1
                        constant 4
                        constant Int..vtable
                        constant 9
int10:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 10
int11:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 11
int12:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 12
int13:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 13
int14:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 14
int15:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 15
int16:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 16
int17:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 17
int18:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 18
int19:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 19
int20:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 20
int21:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 21
int25:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 25
int28:                  constant 1
                        constant 4
                        constant Int..vtable
                        constant 28
l101:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l140
l140:                   constant "X   X X X   X  "
l115:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l141
l141:                   constant "Would you like to continue with the next generation? \n"
l47:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l142
l142:                   constant "\t1: A cross\n"
l103:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l143
l143:                   constant "X X X X X X X X"
l63:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l144
l144:                   constant "\t9: A 'V'\n"
l73:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l145
l145:                   constant "\t14: A plus '+'\n"
l71:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l146
l146:                   constant "\t13: A 'T'\n"
l75:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l147
l147:                   constant "\t15: A 'W'\n"
l65:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l148
l148:                   constant "\t10: An inverse 'V'\n"
l55:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l149
l149:                   constant "\t5: A greater than sign \n"
l79:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l150
l150:                   constant "\t17: An 'E'\n"
l107:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l151
l151:                   constant "X     X X X X   X X  "
l13:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l152
l152:                   constant " "
l40:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l153
l153:                   constant "-"
l85:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l154
l154:                   constant "\t20: An '8'\n"
l96:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l155
l155:                   constant "X   X X X   X   X X X   X"
l6:                     constant 3
                        constant 4
                        constant String..vtable
                        constant l156
l156:                   constant "\n"
l108:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l157
l157:                   constant "  X X   X X X X     X"
l30:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l158
l158:                   constant "X"
l59:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l159
l159:                   constant "\t7: Two greater than signs\n"
l89:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l160
l160:                   constant "Your choice => "
l131:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l161
l161:                   constant "There are many initial states to choose from. \n"
l111:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l162
l162:                   constant " XX X  XX  X XX "
l110:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l163
l163:                   constant "XXX    X   X  X    X   XXXX "
l121:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l164
l164:                   constant "n"
l129:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l165
l165:                   constant "y"
l99:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l166
l166:                   constant "X  X  X  XX  X      "
l117:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l167
l167:                   constant "Please use lowercase y or n for your answer [y]: "
l69:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l168
l168:                   constant "\t12: A full grid\n"
l105:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l169
l169:                   constant "XXXXX  X    X    X    X  "
l45:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l170
l170:                   constant "\nPlease chose a number:\n"
l95:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l171
l171:                   constant "X     X     X     X     X"
l67:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l172
l172:                   constant "\t11: Numbers 9 and 10 combined\n"
l98:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l173
l173:                   constant "    X   X   X     X     X"
l81:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l174
l174:                   constant "\t18: A '3'\n"
l130:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l175
l175:                   constant "Welcome to the Game of Life.\n"
l51:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l176
l176:                   constant "\t3: A slash from the upper right to lower left\n"
l124:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l177
l177:                   constant "Would you like to choose a background pattern? \n"
l126:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l178
l178:                   constant "Please use lowercase y or n for your answer [n]: "
l122:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l179
l179:                   constant "\n\n"
l106:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l180
l180:                   constant "  X    X  XXXXX  X    X  "
l100:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l181
l181:                   constant " X  XX  X  X  X     "
l83:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l182
l182:                   constant "\t19: An 'O'\n"
l114:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l183
l183:                   constant "                         "
l93:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l184
l184:                   constant " XX  XXXX XXXX  XX  "
l57:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l185
l185:                   constant "\t6: A less than sign\n"
l94:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l186
l186:                   constant "    X   X   X   X   X    "
l61:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l187
l187:                   constant "\t8: Two less than signs\n"
l113:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l188
l188:                   constant " XXXX   X    XX    X   XXXX "
l104:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l189
l189:                   constant "XXXXXXXXXXXXXXXXXXXXXXXXX"
l87:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l190
l190:                   constant "\t21: An 'S'\n"
l102:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l191
l191:                   constant "  X   X X X   X"
l49:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l192
l192:                   constant "\t2: A slash from the upper left to lower right\n"
l109:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l193
l193:                   constant "XXXXX   X   XXXXX   X   XXXX"
l112:                   constant 3
                        constant 4
                        constant String..vtable
                        constant l194
l194:                   constant " XX X  XX  X XX X  XX  X XX "
l77:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l195
l195:                   constant "\t16: An 'M'\n"
l97:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l196
l196:                   constant "X     X     X   X   X    "
l53:                    constant 3
                        constant 4
                        constant String..vtable
                        constant l197
l197:                   constant "\t4: An X\n"
true:                   constant 0
                        constant 4
                        constant Bool..vtable
                        constant 1
false:                  constant 0
                        constant 4
                        constant Bool..vtable
                        constant 0
                        
start:                  
                        la r2 <- Main..new
                        push fp
                        call r2
                        push fp
                        push r1
                        la r2 <- Main.main
                        call r2
                        syscall exit
